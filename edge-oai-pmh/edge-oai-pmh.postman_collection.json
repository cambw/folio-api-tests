{
	"info": {
		"_postman_id": "b87d3830-078f-43ba-bfd0-b747683f2e10",
		"name": "edge-oai-pmh",
		"description": "edge-oai-pmh api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dc7ee46-5a45-42bf-b3a6-07a2af0fc9e7",
								"exec": [
									"// Testing data holder contains all needed JSONs for further testing",
									"let testData = {",
									"    user: {",
									"\t    \"username\": \"diku_admin\",",
									"\t    \"password\": \"admin\",",
									"\t    \"id\": \"bdc453f4-6de6-4521-8e99-1f2fd452cbe5\"",
									"    },",
									"    tenant: {",
									"        name: \"diku\"",
									"    },",
									"    permission: {",
									"        permissionName: \"oai-pmh.all\"",
									"    },",
									"    instance1: {",
									"    \"id\": \"62ca5b43-0f11-40af-a6b4-1a9ee2db33cb\",",
									"    \"hrid\": \"in000019\",",
									"    \"source\": \"MARC\",",
									"    \"title\": \"The Neurotic Heroine in Tennessee Williams microform C.N. Stavrou\",",
									"    \"alternativeTitles\": [],",
									"    \"editions\": [],",
									"    \"series\": [],",
									"    \"identifiers\": [",
									"        {",
									"            \"value\": \"53957015X\",",
									"            \"identifierTypeId\": \"5d164f4b-0b15-4e42-ae75-cfcf85318ad9\"",
									"        },",
									"        {",
									"            \"value\": \"(DE-599)GBV53957015X\",",
									"            \"identifierTypeId\": \"7e591197-f335-4afb-bc6d-a6d76ca3bace\"",
									"        }",
									"    ],",
									"    \"contributors\": [",
									"        {",
									"            \"name\": \"Stavrou, C.N\",",
									"            \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"",
									"        }",
									"    ],",
									"    \"subjects\": [],",
									"    \"classifications\": [],",
									"    \"publication\": [",
									"        {",
									"            \"publisher\": \"Columbia University\",",
									"            \"place\": \"New York\",",
									"            \"dateOfPublication\": \"1955\"",
									"        }",
									"    ],",
									"    \"publicationFrequency\": [],",
									"    \"publicationRange\": [],",
									"    \"electronicAccess\": [],",
									"    \"instanceTypeId\": \"6312d172-f0cf-40f6-b27d-9fa8feaf332f\",",
									"    \"instanceFormatIds\": [],",
									"    \"physicalDescriptions\": [",
									"        \"1 Mikrofilm 26-34 S.\"",
									"    ],",
									"    \"languages\": [",
									"        \"eng\"",
									"    ],",
									"    \"notes\": [",
									"        \"Mikrofilm-Ausg. 1957 1 Mikrofilm\"",
									"    ],",
									"    \"statisticalCodes\": [],",
									"    \"sourceRecordFormat\": \"MARC-JSON\",",
									"    \"metadata\": {",
									"        \"createdDate\": \"2018-10-29T02:48:02.473+0000\",",
									"        \"createdByUserId\": \"cda822d8-09c9-5676-a743-d6311e148146\",",
									"        \"updatedDate\": \"2018-10-29T02:48:02.473+0000\",",
									"        \"updatedByUserId\": \"cda822d8-09c9-5676-a743-d6311e148146\"",
									"    },",
									"    \"holdingsRecords2\": []",
									"    }",
									"};",
									"",
									"// Global testing object - used in further tests",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"user\", JSON.stringify(testData.user, null, 2));",
									"pm.globals.set(\"instance1\", JSON.stringify(testData.instance1, null, 2));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed6905bd-6cbb-400f-bc4f-2d222494f953",
								"exec": [
									"pm.test(\"Successfully logged in (201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.globals.set(\"xokapitoken\", token);",
									"",
									"console.log(\"X-Okapi-Token : \" + token);",
									"console.log(\"X-Okapi-Tenant : \" + tenant);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{user}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Permissions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e6bedad4-60a1-44d8-b019-e0bfb8c7f486",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"pm.globals.set(\"userId\", testData.user.id);",
									"pm.globals.set(\"permissions\", JSON.stringify(testData.permission, null, 2));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8da3a0bd-eb25-4b83-8cc9-6b912e57a4c5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{permissions}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}/permissions/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{userId}}",
								"permissions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create/Verify new instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cc46022-e60f-4734-b0b5-a23ca495b282",
								"exec": [
									"pm.test(\"Testing instance created (201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let identifier = pm.globals.get(\"gl.instance.id\");",
									"let baseURI = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\");",
									"let endpoint = baseURI + \"/instance-storage/instances/\" + identifier;",
									"",
									"// Verify that instance was saved in storage",
									"const getInstanceRequest = {",
									"  url: endpoint,",
									"  method: \"GET\",",
									"  header: [\"X-Okapi-Tenant:\" + pm.globals.get(\"gl.tenant.name\"), ",
									"  \"X-Okapi-Token:\" + pm.globals.get(\"xokapitoken\")],",
									"};",
									"",
									"pm.test(\"Testing instance retrieved (200)\", function () {",
									"    pm.sendRequest(getInstanceRequest, function (err, response) {",
									"    console.log(response);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "318b5739-ba76-418e-ac31-f052eb894f79",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{instance1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MetadataFormats",
			"item": [
				{
					"name": "/oai/ - ListMetadataFormats",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "ListMetadataFormats"
								},
								{
									"key": "apikey",
									"value": "{{edge.apikey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - Existing_Identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
								"exec": [
									"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"pm.globals.set(\"identifier\", testData.instance1.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}&identifier=oai:tbd.later.folio.org:diku/{{identifier}}",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "ListMetadataFormats"
								},
								{
									"key": "apikey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "identifier",
									"value": "oai:tbd.later.folio.org:diku/{{identifier}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - Invalid_Identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
								"exec": [
									"pm.test(\"Expected Unprocessable Entity (422)\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}&identifier=invalid-identifier",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "ListMetadataFormats"
								},
								{
									"key": "apikey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "identifier",
									"value": "invalid-identifier"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - Not_Existing_Identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
								"exec": [
									"pm.test(\"Expected Not Found (404)\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}&identifier=oai:tbd.later.folio.org:diku/{{identifier}}A",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "ListMetadataFormats"
								},
								{
									"key": "apikey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "identifier",
									"value": "oai:tbd.later.folio.org:diku/{{identifier}}A"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "beab1fcc-f6a9-4310-b904-1c14ce99b95c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "527b9579-4fda-40a6-862a-1d7dfc19899c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Test Cleanup",
			"item": [
				{
					"name": "Delete Testing Instance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90d899d9-9bfa-4721-b7e7-8a4a773c1814",
								"exec": [
									"let instanceId = pm.globals.get(\"testData\").instance1.id;",
									"pm.globals.set(\"instanceId\", instanceId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2106dab6-3ef3-4bc5-96e3-c3ac6f2348b3",
								"exec": [
									"pm.test(\"Expected No Content (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Clean global variables",
									"pm.globals.clear();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4a4babf7-24f5-4f69-be22-8d7bc543a965",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4d4ea915-b9aa-4698-9b8f-a6ced1ae131e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "631c4054-088a-4af9-b451-89ee6e786f87",
			"key": "edge.protocol",
			"value": "http",
			"type": "string"
		},
		{
			"id": "4912fdd3-41d3-4ce4-bdff-8787580dbcd3",
			"key": "edge.host",
			"value": "localhost",
			"type": "string"
		},
		{
			"id": "bd1e403e-c9a1-4402-b2e2-a8f58a842c2d",
			"key": "edge.port",
			"value": "8081",
			"type": "string"
		},
		{
			"id": "7975afab-52c6-4fbf-aad0-a0c0e7308d18",
			"key": "edge.apikey",
			"value": "Z1luMHVGdjNMZl9kaWt1X2Rpa3U=",
			"type": "string"
		}
	]
}