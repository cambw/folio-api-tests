{
	"info": {
		"_postman_id": "4b234b63-15de-487f-95c9-5859d64c35ea",
		"name": "edge-oai-pmh",
		"description": "edge-oai-pmh api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dc7ee46-5a45-42bf-b3a6-07a2af0fc9e7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed6905bd-6cbb-400f-bc4f-2d222494f953",
								"exec": [
									"let EXPECTED_STATUS=201;",
									"",
									"if(pm.response.to.have.status(EXPECTED_STATUS)) {",
									"    let token = postman.getResponseHeader(\"x-okapi-token\");",
									"    pm.globals.set(\"xokapitoken\", token);",
									"    console.log(\"Current X-Okapi-Token : \" + token);",
									"}",
									"",
									"",
									"pm.test(\"Successfully logged in (201)\", function () {",
									"    pm.response.to.have.status(EXPECTED_STATUS);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
								"exec": [
									"pm.test(\"User created - Expected Created (201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
								"exec": [
									"pm.globals.set(\"user\", JSON.stringify(pm.globals.get(\"testData\").user, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{user}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/authn/credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bade5849-49cb-4004-b5bd-42a49b4d45a6",
								"exec": [
									"let EXPECTED_STATUS = 201;",
									"",
									"if(pm.response.to.have.status(EXPECTED_STATUS)) {",
									"    let credentialsId = pm.response.json().id;",
									"    pm.globals.set(\"credentialsId\", credentialsId);",
									"    console.log(\"credentialsId: \" + credentialsId);",
									"}",
									"",
									"pm.test(\"Credentials created - Expected Created (201)\", function () {",
									"    pm.response.to.have.status(EXPECTED_STATUS);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8465c7b4-1294-4c0e-8a71-729440339f84",
								"exec": [
									"pm.globals.set(\"credentials\", JSON.stringify(pm.globals.get(\"testData\").credentials, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{credentials}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
								"exec": [
									"let EXPECTED_STATUS = 201;",
									"",
									"if(pm.response.to.have.status(EXPECTED_STATUS)) {",
									"    let permissionsId = pm.response.json().id;",
									"    pm.globals.set(\"permissionsId\", permissionsId);",
									"    console.log(\"permissionsId: \" + permissionsId);",
									"}",
									"",
									"pm.test(\"Permissions created - Expected Created (201)\", function () {",
									"    pm.response.to.have.status(EXPECTED_STATUS);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dded3598-c238-487d-b06c-721c60509cf4",
								"exec": [
									"pm.globals.set(\"permissions\", JSON.stringify(pm.globals.get(\"testData\").permissions, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{permissions}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2793ed6b-8140-4170-bf25-15f58fa36c99",
								"exec": [
									"pm.test(\"Successfully logged in (201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.globals.set(\"xokapitoken\", token);",
									"",
									"console.log(\"X-Okapi-Token : \" + token);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2290ea20-79a4-49cd-a707-ea109ae7bcc0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
								"exec": [
									"pm.test(\"Instance created - Expected Created (201)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"let identifier = pm.globals.get(\"gl.instance.id\");",
									"let baseURI = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\");",
									"let endpoint = baseURI + \"/instance-storage/instances/\" + identifier;",
									"",
									"// Verify that instance was saved in storage",
									"const getInstanceRequest = {",
									"  url: endpoint,",
									"  method: \"GET\",",
									"  header: [\"X-Okapi-Tenant:\" + pm.globals.get(\"gl.tenant.name\"), ",
									"  \"X-Okapi-Token:\" + pm.globals.get(\"xokapitoken\")],",
									"};",
									"",
									"//create instances for testing List verbs",
									"for (var i = 0; i < 10; i++) {",
									"    createInstanceWithSource();",
									"}",
									"",
									"function createInstanceWithSource() {",
									"    let instance2 = pm.globals.get(\"testData\").instance2;",
									"    let uuid = require('uuid');",
									"    instance2.id = uuid.v4();",
									"    pm.sendRequest({",
									"            url: pm.variables.get(\"protocol\") + \"://\" ",
									"                + pm.variables.get(\"url\") + \":\" ",
									"                + pm.variables.get(\"okapiport\") + \"/instance-storage/instances\",",
									"            method: \"POST\",",
									"            header: {",
									"                \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
									"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
									"                \"Content-type\": \"application/json\",",
									"                \"Accept-Encoding\": \"identity\"",
									"            },",
									"            body: JSON.stringify(instance2, null, 2)",
									"        }, function (err, response) {",
									"           // if instance created then create source",
									"            if (response.code == 201) {",
									"                pm.sendRequest({",
									"                    url: pm.variables.get(\"protocol\") + \"://\" ",
									"                        + pm.variables.get(\"url\") + \":\" ",
									"                        + pm.variables.get(\"okapiport\") + \"/instance-storage/instances/\"",
									"                        + response.json().id + \"/source-record/marc-json\",",
									"                    method: \"PUT\",",
									"                    header: {",
									"                        \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
									"                        \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
									"                        \"Content-type\": \"application/json\",",
									"                        \"Accept-Encoding\": \"identity\"",
									"                    },",
									"                    body: JSON.stringify(pm.globals.get(\"testData\").marcjson1, null, 2)",
									"                }, function (err, responce) {",
									"                    console.log(response.json().id);",
									"                    var aDataEntry = pm.globals.get('id_array');",
									"                    if (aDataEntry == null) {",
									"                        aDataEntry = [];",
									"                    } else {",
									"                        aDataEntry = JSON.parse(aDataEntry);",
									"                    }",
									"                    aDataEntry.push(response.json().id);",
									"                    pm.globals.set('id_array', JSON.stringify(aDataEntry));",
									"                    pm.test(\"Expected created instance with source (201)\", function () {",
									"                        pm.expect(response.code).to.eql(201);",
									"                    });",
									"                     ",
									"                })",
									"            } else {",
									"                createInstanceWithSource();",
									"            }",
									"        })",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
								"exec": [
									"let instance1 = pm.globals.get(\"testData\").instance1;",
									"pm.globals.set(\"instance1\", JSON.stringify(instance1, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{instance1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/source-record/marc-json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
								"exec": [
									"pm.test(\"Expected Created (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").instance1.id);",
									"pm.globals.set(\"marcjson1\", JSON.stringify(pm.globals.get(\"testData\").marcjson1, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{marcjson1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}/source-record/marc-json",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}",
								"source-record",
								"marc-json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive scenarios",
			"item": [
				{
					"name": "Identify",
					"item": [
						{
							"name": "/oai/ - Identify",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identify successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Identify is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('Identify');",
											"});",
											"",
											"let identify = jsonData.Identify;",
											"",
											"pm.test(\"Contains repository name\", function() {",
											"    pm.expect(identify).to.have.property('repositoryName');",
											"});",
											"",
											"pm.test(\"Contains base URL\", function() {",
											"    pm.expect(identify).to.have.property('baseURL');",
											"});",
											"",
											"pm.test(\"Contains protocol version\", function() {",
											"    pm.expect(identify).to.have.property('protocolVersion');",
											"});",
											"",
											"pm.test(\"Contains admin's emails\", function() {",
											"    pm.expect(identify).to.have.property('adminEmail');",
											"});",
											"",
											"pm.test(\"Contains earliest datestamp\", function() {",
											"    pm.expect(identify).to.have.property('earliestDatestamp');",
											"});",
											"",
											"pm.test(\"Contains deleted record\", function() {",
											"    pm.expect(identify).to.have.property('deletedRecord');",
											"});",
											"",
											"pm.test(\"Contains granularity\", function() {",
											"    pm.expect(identify).to.have.property('granularity');",
											"});",
											"",
											"pm.test(\"Contains compression\", function() {",
											"    pm.expect(identify).to.have.property('compression');",
											"});",
											"",
											"",
											"let urlapi = require('url');",
											"let baseURL = urlapi.parse(identify.baseURL);",
											"pm.globals.set(\"identifierPrefix\", baseURL.pathname.substring(1) + \":\" + baseURL.hostname + \":\" + pm.environment.get(\"xokapitenant\"));",
											"",
											"console.log(pm.globals.get(\"identifierPrefix\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey={{edge.apikey}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "Identify"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Identify",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identify successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Identify is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('Identify');",
											"});",
											"",
											"let identify = jsonData.Identify;",
											"",
											"pm.test(\"Contains repository name\", function() {",
											"    pm.expect(identify).to.have.property('repositoryName');",
											"});",
											"",
											"pm.test(\"Contains base URL\", function() {",
											"    pm.expect(identify).to.have.property('baseURL');",
											"});",
											"",
											"pm.test(\"Contains protocol version\", function() {",
											"    pm.expect(identify).to.have.property('protocolVersion');",
											"});",
											"",
											"pm.test(\"Contains admin's emails\", function() {",
											"    pm.expect(identify).to.have.property('adminEmail');",
											"});",
											"",
											"pm.test(\"Contains earliest datestamp\", function() {",
											"    pm.expect(identify).to.have.property('earliestDatestamp');",
											"});",
											"",
											"pm.test(\"Contains deleted record\", function() {",
											"    pm.expect(identify).to.have.property('deletedRecord');",
											"});",
											"",
											"pm.test(\"Contains granularity\", function() {",
											"    pm.expect(identify).to.have.property('granularity');",
											"});",
											"",
											"pm.test(\"Contains compression\", function() {",
											"    pm.expect(identify).to.have.property('compression');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=Identify",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "Identify"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22c3bfd2-9f52-43e1-b817-943eed5deb3c",
								"type": "text/javascript",
								"exec": [
									"let utils = eval(globals.loadUtils);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8449ade2-9446-45b1-8549-ec8a1242fbbc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MetadataFormats",
					"item": [
						{
							"name": "/oai/ - ListMetadataFormats",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Existing_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListMetadataFormats",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListMetadataFormats",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Existing_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListMetadataFormats&identifier={{identifierPrefix}}/{{identifier}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "beab1fcc-f6a9-4310-b904-1c14ce99b95c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "527b9579-4fda-40a6-862a-1d7dfc19899c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListSets",
					"item": [
						{
							"name": "/oai/ - ListSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListSets successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"ListSets contains request\", function() {",
											"    pm.expect(jsonData).to.have.property('request');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListSets is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListSets');",
											"});",
											"",
											"pm.test(\"ListSets supports only set all\", function() {",
											"    pm.expect(jsonData.ListSets.set.setSpec).to.eql('all');",
											"    pm.expect(jsonData.ListSets.set.setName).to.eql('All records');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListSets&apikey={{edge.apikey}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListSets successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"ListSets contains request\", function() {",
											"    pm.expect(jsonData).to.have.property('request');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListSets is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListSets');",
											"});",
											"",
											"pm.test(\"ListSets supports only set all\", function() {",
											"    pm.expect(jsonData.ListSets.set.setSpec).to.eql('all');",
											"    pm.expect(jsonData.ListSets.set.setName).to.eql('All records');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListSets",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetRecord",
					"item": [
						{
							"name": "/oai/ - Existing_Identifier_oai_dc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('oai_dc:dc');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Existing_Identifier_oai_dc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('oai_dc:dc');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=GetRecord&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Existing_Identifier_marc_xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('marc:record');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{marc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Existing_Identifier_marc_xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('marc:record');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=GetRecord&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{marc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListIdentifiers",
					"item": [
						{
							"name": "/oai/ - ListIdentifiers resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"",
											"pm.test(\"ListIdentifiers resumption token flow\", function() {",
											"    if (jsonData.ListIdentifiers.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListIdentifiers\");",
											"        ",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{edge.apikey}}&metadataPrefix={{marc}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListIdentifiers resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"",
											"pm.test(\"ListIdentifiers resumption token flow\", function() {",
											"    if (jsonData.ListIdentifiers.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListIdentifiers\");",
											"        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListIdentifiers&metadataPrefix={{marc}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListIdentifiers date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"pm.test(\"Number of headers greater than 11\", function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListIdentifiers.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListIdentifiers.header.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(11);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListIdentifiers&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"pm.test(\"Number of headers greater than 11\", function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListIdentifiers.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListIdentifiers.header.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(11);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?apikey={{edge.apikey}}&verb=ListIdentifiers&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListRecords",
					"item": [
						{
							"name": "/oai/ - ListRecords resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"pm.test(\"ListRecords resumption token flow\", function() {",
											"    if (jsonData.ListRecords.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListRecords\");",
											"        ",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&metadataPrefix={{dc}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListRecords resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"pm.test(\"ListRecords resumption token flow\", function() {",
											"    if (jsonData.ListRecords.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListRecords\");",
											"        ",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListRecords&metadataPrefix={{dc}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords  date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"pm.test(\"Number of record greater  11\", function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListRecords.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListRecords.record.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(11);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListRecords  date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment')\r",
											"pm.globals.set(\"from\", moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"))\r",
											"pm.globals.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"pm.test(\"Number of record greater than 11\", function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListRecords.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListRecords.record.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(11);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}?verb=ListRecords&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Negative scenarios",
			"item": [
				{
					"name": "Identify",
					"item": [
						{
							"name": "/oai/ - Identify_badArgument",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identify completed with (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey={{edge.apikey}}&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "Identify"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22c3bfd2-9f52-43e1-b817-943eed5deb3c",
								"type": "text/javascript",
								"exec": [
									"let utils = eval(globals.loadUtils);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8449ade2-9446-45b1-8549-ec8a1242fbbc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MetadataFormats",
					"item": [
						{
							"name": "/oai/ - Invalid_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Expected Unprocessable Entity (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}&identifier=invalid-identifier",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "invalid-identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Not_Existing_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Expected Not Found (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"idDoesNotExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd390222-84f7-4ca5-add1-e0c51e94a698",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.globals.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}A",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}A"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "beab1fcc-f6a9-4310-b904-1c14ce99b95c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "527b9579-4fda-40a6-862a-1d7dfc19899c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListSets",
					"item": [
						{
							"name": "/oai/ - ListSets_badArgument",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"console.log(jsonData);",
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"ListSets completed with (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListSets&apikey={{edge.apikey}}&metadataPrefix=oai_dc",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "oai_dc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListSets_badResumptionToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"console.log(jsonData);",
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"ListSets completed with (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.resumptionToken).to.eql(utils.findObjectByKey(pm.request.url.query, \"resumptionToken\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badResumptionToken\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListSets&apikey={{edge.apikey}}&resumptionToken=any_resumption_token",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "resumptionToken",
											"value": "any_resumption_token"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetRecord",
					"item": [
						{
							"name": "/oai/ - Invalid_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identifier has invalid structure (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{edge.apikey}}&identifier=invalid-identifier&metadataPrefix={{marc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "invalid-identifier"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Not_Existing_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"No matching identifier in repository (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"idDoesNotExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}B&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}B"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - missing metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Missing required parameter (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - invalid metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Cannot disseminate format (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"cannotDisseminateFormat\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix=mark_xml",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "mark_xml"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListIdentifiers",
					"item": [
						{
							"name": "/oai/ - ListIdentifiers empty result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment')\r",
											"pm.globals.set(\"from\", moment().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers no any record found matching search criteria (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"noRecordsMatch\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{edge.apikey}}&metadataPrefix={{marc}}&from={{from}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers invalid date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers illegal date format (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{edge.apikey}}&metadataPrefix={{marc}}&from=2018-11-13T12:13:50",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "2018-11-13T12:13:50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers invalid metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers cannot disseminate format (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"cannotDisseminateFormat\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{edge.apikey}}&metadataPrefix=mark_xml",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "mark_xml"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers bad resumption token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers The value of the resumptionToken argument is invalid (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.resumptionToken).to.eql(utils.findObjectByKey(pm.request.url.query, \"resumptionToken\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badResumptionToken\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{edge.apikey}}&resumptionToken=bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "resumptionToken",
											"value": "bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers from grater than until",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().hours(0).format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers 'from' must be less than or equal to 'until' (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{edge.apikey}}&metadataPrefix={{marc}}&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListRecords",
					"item": [
						{
							"name": "/oai/ - ListIRecords bad resumption token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords The value of the resumptionToken argument is invalid (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.resumptionToken).to.eql(utils.findObjectByKey(pm.request.url.query, \"resumptionToken\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badResumptionToken\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&resumptionToken=bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "resumptionToken",
											"value": "bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords empty result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment')\r",
											"pm.globals.set(\"from\", moment().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords no any record found matching search criteria (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"noRecordsMatch\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&metadataPrefix={{marc}}&from={{from}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords invalid date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords illegal date format (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&metadataPrefix={{marc}}&from=2018-11-13T12:13:50",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "2018-11-13T12:13:50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords invalid metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords cannot disseminate format (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"cannotDisseminateFormat\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&metadataPrefix=mark_xml",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "mark_xml"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords from grater than until",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().hours(0).format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords 'from' must be less than or equal to 'until' (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{edge.apikey}}&metadataPrefix={{marc}}&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/oai/ - Acces denied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"Acces denied (403)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/plain');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey={{edge.apikey}}aad",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								},
								{
									"key": "apikey",
									"value": "{{edge.apikey}}aad"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/apiKeyPath - Acces denied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"Acces denied (403)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/plain');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.apikey}}aad?verb=Identify",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai",
								"{{edge.apikey}}aad"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - Invalid apKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"Invalid API Key (401)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/plain');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey=a",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								},
								{
									"key": "apikey",
									"value": "a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/apiKeyPath - Invalid apKeyPath Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"IInvalid apiKey (401)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/plain');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/a?verb=Identify",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai",
								"a"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - badVerb",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Identify completed with (400)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.equal('text/xml');",
									"});",
									"",
									"pm.test(\"Error is returned\", function() {",
									"    pm.expect(jsonData[\"OAI-PMH\"]).to.have.property('error');",
									"});",
									"",
									"pm.test(\"Error is valid\", function() {",
									"    let errorCode = jsonData[\"OAI-PMH\"].error.$.code;",
									"    pm.expect(errorCode).to.eql(\"badVerb\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=badVerb&apikey={{edge.apikey}}",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "badVerb"
								},
								{
									"key": "apikey",
									"value": "{{edge.apikey}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Cleanup",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "123459a0-b737-4767-a32c-1c5692b8d920",
								"exec": [
									"let userId = pm.globals.get(\"testData\").user.id;",
									"pm.globals.set(\"userId\", userId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
								"exec": [
									"pm.test(\"User deleted - Expected No Content (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{userId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/authn/credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e68cd5-eca2-4427-ba8b-6f059a5fc130",
								"exec": [
									"pm.globals.set(\"credentials\", JSON.stringify(pm.globals.get(\"testData\").credentials, null, 2));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ff89363-4db6-40bc-a848-e7532b2a7bc0",
								"exec": [
									"pm.test(\"Credentials deleted - Expected No Content (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{credentialsId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"credentials",
								"{{credentialsId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "234a882a-edd7-4bac-8bc2-7f89c8a7a713",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f74eb5c8-1652-480c-9fac-356b3a3ffc56",
								"exec": [
									"pm.test(\"Permissions deleted - Expected No Content (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{permissionsId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{permissionsId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/source-record/marc-json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
								"exec": [
									"pm.test(\"Expected Deleted (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"deleteInstances();",
									"",
									"//delete instances which were created for testing List verbs",
									"function deleteInstances() {",
									"    let idArray = pm.globals.get('id_array');",
									"    if (idArray == null) {",
									"        return;",
									"    }",
									"    ",
									"    idArray = JSON.parse(idArray);",
									"    ",
									"    for (var i = 0; i < idArray.length; i++) {",
									"        console.log(idArray[i]);",
									"        pm.sendRequest({",
									"                url: pm.variables.get(\"protocol\") + \"://\" ",
									"                    + pm.variables.get(\"url\") + \":\" ",
									"                    + pm.variables.get(\"okapiport\") + \"/instance-storage/instances/\"",
									"                    + idArray[i] + \"/source-record/marc-json\",",
									"                method: \"DELETE\",",
									"                header: {",
									"                    \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
									"                    \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
									"                    \"Content-type\": \"application/json\",",
									"                    \"Accept-Encoding\": \"identity\"",
									"                }",
									"            }, function (err, response) {",
									"                console.log(response.code);",
									"                pm.test(\"Expected deleted source (204)\", function () {",
									"                    pm.expect(response.code).to.eql(204);",
									"                });",
									"            });",
									"            ",
									"        pm.sendRequest({",
									"                url: pm.variables.get(\"protocol\") + \"://\" ",
									"                    + pm.variables.get(\"url\") + \":\" ",
									"                    + pm.variables.get(\"okapiport\") + \"/instance-storage/instances/\"",
									"                    + idArray[i],",
									"                method: \"DELETE\",",
									"                header: {",
									"                    \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
									"                    \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
									"                    \"Content-type\": \"application/json\",",
									"                    \"Accept-Encoding\": \"identity\"",
									"                }",
									"            }, function (err, response) {",
									"                console.log(response.code);",
									"                pm.test(\"Expected deleted instance (204)\", function () {",
									"                    pm.expect(response.code).to.eql(204);",
									"                });",
									"            });",
									"        ",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"pm.globals.set(\"instanceId\", testData.instance1.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}/source-record/marc-json",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}",
								"source-record",
								"marc-json"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cc46022-e60f-4734-b0b5-a23ca495b282",
								"exec": [
									"pm.test(\"Testing instance created (204)\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "318b5739-ba76-418e-ac31-f052eb894f79",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").instance1.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aab0639c-5e64-4ad1-b296-ad829c519ebd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "16fa792e-fd75-4612-979a-07974ef36cf9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4a4babf7-24f5-4f69-be22-8d7bc543a965",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // Hardcoded id",
					"    user: {",
					"        \"id\": \"dd0e3f0b-1f55-4ccc-9ec5-a7e5054cb758\",",
					"        \"username\": \"user\",",
					"        \"active\": true,",
					"        \"proxyFor\": [],",
					"        \"personal\": {",
					"            \"lastName\": \"LastName\",",
					"            \"firstName\": \"FirstName\",",
					"            \"addresses\": []",
					"        }",
					"    },",
					"    credentials: {",
					"\t    \"username\": \"user\",",
					"\t    \"password\": \"password\"",
					"    },",
					"    permissions: {",
					"\t    \"userId\": \"dd0e3f0b-1f55-4ccc-9ec5-a7e5054cb758\",",
					"\t    \"permissions\": [\"oai-pmh.all\"]",
					"    },",
					"    instance1: {",
					"    \"id\": \"62ca5b43-0f11-40af-a6b4-1a9ee2db33cb\",",
					"    \"hrid\": \"in000019\",",
					"    \"source\": \"MARC\",",
					"    \"title\": \"The Neurotic Heroine in Tennessee Williams microform C.N. Stavrou\",",
					"    \"alternativeTitles\": [],",
					"    \"editions\": [],",
					"    \"series\": [],",
					"    \"identifiers\": [",
					"        {",
					"            \"value\": \"53957015X\",",
					"            \"identifierTypeId\": \"5d164f4b-0b15-4e42-ae75-cfcf85318ad9\"",
					"        },",
					"        {",
					"            \"value\": \"(DE-599)GBV53957015X\",",
					"            \"identifierTypeId\": \"7e591197-f335-4afb-bc6d-a6d76ca3bace\"",
					"        }",
					"    ],",
					"    \"contributors\": [",
					"        {",
					"            \"name\": \"Stavrou, C.N\",",
					"            \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"",
					"        }",
					"    ],",
					"    \"subjects\": [],",
					"    \"classifications\": [],",
					"    \"publication\": [",
					"        {",
					"            \"publisher\": \"Columbia University\",",
					"            \"place\": \"New York\",",
					"            \"dateOfPublication\": \"1955\"",
					"        }",
					"    ],",
					"    \"publicationFrequency\": [],",
					"    \"publicationRange\": [],",
					"    \"electronicAccess\": [],",
					"    \"instanceTypeId\": \"6312d172-f0cf-40f6-b27d-9fa8feaf332f\",",
					"    \"instanceFormatIds\": [],",
					"    \"physicalDescriptions\": [",
					"        \"1 Mikrofilm 26-34 S.\"",
					"    ],",
					"    \"languages\": [",
					"        \"eng\"",
					"    ],",
					"    \"notes\": [",
					"        \"Mikrofilm-Ausg. 1957 1 Mikrofilm\"",
					"    ],",
					"    \"statisticalCodes\": [],",
					"    \"sourceRecordFormat\": \"MARC-JSON\",",
					"    \"metadata\": {",
					"        \"createdDate\": \"2018-10-29T02:48:02.473+0000\",",
					"        \"createdByUserId\": \"cda822d8-09c9-5676-a743-d6311e148146\",",
					"        \"updatedDate\": \"2018-10-29T02:48:02.473+0000\",",
					"        \"updatedByUserId\": \"cda822d8-09c9-5676-a743-d6311e148146\"",
					"    },",
					"    \"holdingsRecords2\": []",
					"    },",
					"    instance2: {",
					"      \"id\": \"601a8dc4-dee7-48eb-b03f-d02fdf0debd0\",",
					"      \"source\": \"MARC\",",
					"      \"title\": \"ADVANCING LIBRARY EDUCATION: TECHNOLOGICAL INNOVATION AND INSTRUCTIONAL DESIGN\",",
					"      \"contributors\": [",
					"        {",
					"          \"name\": \"Sigal, Ari\",",
					"          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\",",
					"          \"primary\": true",
					"        }",
					"      ],",
					"      \"identifiers\": [",
					"        {",
					"          \"identifierTypeId\": \"2e48e713-17f3-4c13-a9f8-23845bb210af\",",
					"          \"value\": \"9781466636897\"",
					"        },",
					"        {",
					"          \"identifierTypeId\": \"6051f95c-028e-4c6a-8a9e-ee689dd51453\",",
					"          \"value\": \"1\"",
					"        }",
					"      ],",
					"      \"sourceRecordFormat\": \"MARC-JSON\",",
					"      \"instanceTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2c\"",
					"    },",
					"    marcjson1: {",
					"    \"leader\": \"01860nam a2200337 ca4500\",",
					"    \"fields\": [",
					"        {",
					"            \"001\": \"1010770160\"",
					"        },",
					"        {",
					"            \"003\": \"DE-601\"",
					"        },",
					"        {",
					"            \"005\": \"20180214103458.0\"",
					"        },",
					"        {",
					"            \"008\": \"180111s2018\\\\\\\\\\\\\\\\xxu\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\000\\\\0\\\\eng\\\\d\"",
					"        },",
					"        {",
					"            \"020\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"9781473937703\"",
					"                    },",
					"                    {",
					"                        \"c\": \"set\"",
					"                    },",
					"                    {",
					"                        \"9\": \"978-1-4739-3770-3\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"035\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"(DE-599)GBV1010770160\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"040\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"b\": \"ger\"",
					"                    },",
					"                    {",
					"                        \"c\": \"GBVCP\"",
					"                    },",
					"                    {",
					"                        \"e\": \"rda\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"041\": {",
					"                \"ind1\": \"0\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"eng\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"044\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"xxu\"",
					"                    },",
					"                    {",
					"                        \"a\": \"xxk\"",
					"                    },",
					"                    {",
					"                        \"a\": \"ii\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"050\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"0\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"H\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"082\": {",
					"                \"ind1\": \"0\",",
					"                \"ind2\": \"0\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"300\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"084\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"74.72\"",
					"                    },",
					"                    {",
					"                        \"9\": \"Stadtplanung\"",
					"                    },",
					"                    {",
					"                        \"9\": \"kommunale Planung\"",
					"                    },",
					"                    {",
					"                        \"2\": \"bkl\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"084\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"74.12\"",
					"                    },",
					"                    {",
					"                        \"9\": \"Stadtgeographie\"",
					"                    },",
					"                    {",
					"                        \"9\": \"Siedlungsgeographie\"",
					"                    },",
					"                    {",
					"                        \"2\": \"bkl\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"245\": {",
					"                \"ind1\": \"0\",",
					"                \"ind2\": \"4\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"The city\"",
					"                    },",
					"                    {",
					"                        \"b\": \"post-modernity\"",
					"                    },",
					"                    {",
					"                        \"c\": \"edited by Alan Latham\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"264\": {",
					"                \"ind1\": \"3\",",
					"                \"ind2\": \"1\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"Los Angeles\"",
					"                    },",
					"                    {",
					"                        \"a\": \"London\"",
					"                    },",
					"                    {",
					"                        \"a\": \"New Delhi\"",
					"                    },",
					"                    {",
					"                        \"a\": \"Singapore\"",
					"                    },",
					"                    {",
					"                        \"a\": \"Washington DC\"",
					"                    },",
					"                    {",
					"                        \"a\": \"Melbourne\"",
					"                    },",
					"                    {",
					"                        \"b\": \"SAGE\"",
					"                    },",
					"                    {",
					"                        \"c\": \"2018\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"336\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"Text\"",
					"                    },",
					"                    {",
					"                        \"b\": \"txt\"",
					"                    },",
					"                    {",
					"                        \"2\": \"rdacontent\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"337\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"ohne Hilfsmittel zu benutzen\"",
					"                    },",
					"                    {",
					"                        \"b\": \"n\"",
					"                    },",
					"                    {",
					"                        \"2\": \"rdamedia\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"338\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"Band\"",
					"                    },",
					"                    {",
					"                        \"b\": \"nc\"",
					"                    },",
					"                    {",
					"                        \"2\": \"rdacarrier\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"490\": {",
					"                \"ind1\": \"0\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"SAGE benchmarks in culture and society\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"520\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"Cities are sites of great wealth and poverty, of hope and despair, of social and economic dynamism, as well as tradition and established power. Social scientists and humanities scholars have over the past three decades generated an impressive range of perspectives for making sense of the vast complexities of cities. These perspectives tell both of the economic, social and political dynamism cities generate, and point to possible lines of future development. The four volumes, The City: Post-Modernity, will focus more exclusively on the contemporary city, looking at the subject through the lenses of globalization and post-colonialism, amongst others\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"650\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"7\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"0\": \"(DE-601)106153919\"",
					"                    },",
					"                    {",
					"                        \"0\": \"(DE-588)4056723-0\"",
					"                    },",
					"                    {",
					"                        \"a\": \"Stadt\"",
					"                    },",
					"                    {",
					"                        \"2\": \"gnd\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"650\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"7\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"0\": \"(DE-601)104288515\"",
					"                    },",
					"                    {",
					"                        \"0\": \"(DE-588)4115604-3\"",
					"                    },",
					"                    {",
					"                        \"a\": \"Postmoderne\"",
					"                    },",
					"                    {",
					"                        \"2\": \"gnd\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"655\": {",
					"                \"ind1\": \"0\",",
					"                \"ind2\": \"7\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"0\": \"(DE-588)4143413-4\"",
					"                    },",
					"                    {",
					"                        \"a\": \"Aufsatzsammlung\"",
					"                    },",
					"                    {",
					"                        \"2\": \"gnd-content\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"700\": {",
					"                \"ind1\": \"1\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"Latham, Alan\"",
					"                    },",
					"                    {",
					"                        \"e\": \"HerausgeberIn\"",
					"                    },",
					"                    {",
					"                        \"4\": \"edt\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"900\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"a\": \"GBV\"",
					"                    },",
					"                    {",
					"                        \"b\": \"SUB+Uni Hamburg <18>\"",
					"                    }",
					"                ]",
					"            }",
					"        },",
					"        {",
					"            \"954\": {",
					"                \"ind1\": \"\\\\\",",
					"                \"ind2\": \"\\\\\",",
					"                \"subfields\": [",
					"                    {",
					"                        \"0\": \"SUB+Uni Hamburg <18>\"",
					"                    },",
					"                    {",
					"                        \"a\": \"22\"",
					"                    },",
					"                    {",
					"                        \"b\": \"1740834291\"",
					"                    },",
					"                    {",
					"                        \"c\": \"01\"",
					"                    },",
					"                    {",
					"                        \"x\": \"0018\"",
					"                    }",
					"                ]",
					"            }",
					"        }",
					"    ]",
					"}",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.findObjectByKey = function findObjectByKey(queryParams, key) {",
					"        var array = queryParams.members;",
					"        for (var i = 0; i < array.length; i++) {",
					"            if (array[i].key === key) {",
					"                return array[i][\"value\"];",
					"            }",
					"        ",
					"        }",
					"        return null;",
					"    }",
					"    ",
					"   utils.sendRequestWithResumptionToken = function sendRequestWithResumptionToken(oaiResponse, verb) {",
					"        let resumptionToken = oaiResponse[verb].resumptionToken._;",
					"        console.log(resumptionToken);",
					"        let paths = pm.request.url.path; ",
					"        let path = \"\";",
					"        for ( var i = 0; i < paths.length; i++) {",
					"            path += \"/\" + paths[i];",
					"        }",
					"        pm.sendRequest({",
					"            url: pm.variables.get(\"edge.protocol\") + \"://\" ",
					"                + pm.variables.get(\"edge.host\") + \":\" ",
					"                + pm.variables.get(\"edge.port\") + \"/\"",
					"                + path + \"?apikey=\"",
					"                + pm.variables.get(\"edge.apikey\") + \"&resumptionToken=\"",
					"                + resumptionToken + \"&verb=\"",
					"                + verb,",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                \"Accept-Encoding\": \"identity\"",
					"            }",
					"        }, function (err, response) {",
					"            let result = xml2Json(response.text())[\"OAI-PMH\"];",
					"            console.log(result);",
					"            pm.test(\"Request with resumption token successfully completed (200)\", function () {",
					"                 pm.expect(response.code).to.equal(200);",
					"            });",
					"            var key = Object.keys(result[verb]);",
					"            var recordsLength = Number(result[verb][key[0]].length);",
					"            recordsLength = recordsLength ? recordsLength : 1;",
					"            let currentListSize = Number(result[verb].resumptionToken.$.cursor) + recordsLength;",
					"            let completeListSize = result[verb].resumptionToken.$.completeListSize;",
					"            if (currentListSize < completeListSize) {",
					"                sendRequestWithResumptionToken(result, verb)",
					"            } else {",
					"                pm.test(\"Resumption token is empty\", function () {",
					"                    pm.expect(result[verb].resumptionToken._).to.equal(undefined);",
					"                });",
					"            }",
					"        });",
					"    }",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4d4ea915-b9aa-4698-9b8f-a6ced1ae131e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "67a7e15d-731d-4bcb-8ae9-f49572face7b",
			"key": "dc",
			"value": "oai_dc",
			"type": "string"
		},
		{
			"id": "1b7406ca-94bf-4a76-b6bf-a8faca3e3eed",
			"key": "marc",
			"value": "marc_xml",
			"type": "string"
		}
	]
}