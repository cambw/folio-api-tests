{
	"info": {
		"_postman_id": "ebca41cc-1bf7-434e-a62f-d172c663a537",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify required modules enabled",
					"item": [
						{
							"name": "mod-orders is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-orders"
										}
									]
								},
								"description": "Check if mod-orders is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						},
						{
							"name": "mod-configuration is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-configuration"
										}
									]
								},
								"description": "Check if mod-orders is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"let bodyTemplate = testConfigs.bodyTemplate;",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    let existingConfig = utils.getConfigByName(configs, configName);",
											"    if (existingConfig) {",
											"        existingConfig.value = value;",
											"        utils.updateConfig(existingConfig);",
											"    } else {",
											"        bodyTemplate.configName = configName;",
											"        bodyTemplate.value = value;",
											"        utils.createConfig(bodyTemplate);",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "composite_purchase_order.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_composite_purchase_order\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_composite_purchase_order_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{schema_composite_purchase_order}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{schema_composite_purchase_order}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "adjustment.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_adjustment\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_adjustment_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_adjustment}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_adjustment}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "alert.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_alert\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_alert_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_alert}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_alert}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "composite_po_line.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_composite_po_line\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_composite_po_line_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{schema_composite_po_line}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{schema_composite_po_line}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "cost.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_cost\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_cost_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_cost}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_cost}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "claim.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_claim\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_claim_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_claim}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_claim}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "details.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_details\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_details_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_details}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_details}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "eresource.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_eresource\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_eresource_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_eresource}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_eresource}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "fund_distribution.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_fund_distribution\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_fund_distribution_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_fund_distribution}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_fund_distribution}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "location.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_location\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_location_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_location}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_location}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "physical.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_physical\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_physical_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_physical}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_physical}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "renewal.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_renewal\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_renewal_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_renewal}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_renewal}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "reporting_code.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_reporting_code\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_reporting_code_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_reporting_code}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_reporting_code}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "source.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_source\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_source_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_source}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_source}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "vendor_detail.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_vendor_detail\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_vendor_detail_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_vendor_detail}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_vendor_detail}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "metadata.shcema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_metadata\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_metadata_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{raml_loc}}/schemas/{{schema_metadata}}",
									"host": [
										"{{raml_loc}}"
									],
									"path": [
										"schemas",
										"{{schema_metadata}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "po_number.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_po_number\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_po_number_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{business_module}}/schemas/{{schema_po_number}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{business_module}}",
										"schemas",
										"{{schema_po_number}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order_format.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_order_format\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_order_format_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_order_format}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_order_format}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "receipt_status.json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_receipt_status\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_receipt_status_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{storage_module}}/schemas/{{schema_receipt_status}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{storage_module}}",
										"schemas",
										"{{schema_receipt_status}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"order_body\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"    });",
											"    ",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"empty_order_id\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.po_number).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"MODORDERS-145: Verify status to be Pending\", function(){",
											"        pm.expect(jsonData.workflow_status).to.equal(\"Pending\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Update order with new po_number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get Order and update po_number only (MODORDERS-150)",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.empty_order_id, (err, res) => {",
											"    let order  = res.json();",
											"    let number = \"UPD\" + order.po_number;",
											"    order.po_number = number;",
											"    pm.variables.set(\"updated_number\", number);",
											"    pm.variables.set(\"updated_order\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.empty_order_id, (err, res) => {",
											"        pm.test(\"Verify order updated with new PO number\", function () {",
											"            let order  = res.json();",
											"            pm.expect(order.po_number).to.equal(pm.variables.get(\"updated_number\"));",
											"        });",
											"    });",
											"});   ",
											"",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updated_order}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{empty_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{empty_order_id}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{empty_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{empty_order_id}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1ed8c17-6277-4493-a68c-40ef625cec32",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd99c49b-c8fe-4752-96e2-fceab96b7e71",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflow_status = \"Pending\";",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"complete_order_id\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.po_number).to.exist;",
													"    pm.globals.set(\"complete_order_po_number\",\"\\\"\"+jsonData.po_number+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.total_items).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Get order by order id and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchase_order_id = pm.globals.get(\"complete_order_id\");",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId(true));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"1 po_line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.complete_order_id);",
													"",
													"pm.globals.set(\"new_empty_po_line\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													"",
													"utils.rememberPoLineId(jsonData);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{new_empty_po_line}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchase_order_id = pm.globals.get(\"complete_order_id\");",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2, false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId(true));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.po_line_number += \"1\";",
													"line.po_line_description += \" another PO Line\";",
													"line.purchase_order_id = pm.globals.get(\"complete_order_id\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													"",
													"utils.rememberPoLineId(jsonData);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.complete_order_id);",
													"",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());",
													"pm.variables.set(\"new_empty_po_line\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{new_empty_po_line}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8859bd1d-f892-4d95-bb24-32c495252f22",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85d967cc-42f8-49e6-9705-7f46ac900f1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": " Add expected receipt date to PO Line",
							"item": [
								{
									"name": "Update last line with expected receipt date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"// Using id of the last PO Line",
													"let poLineId = utils.getLastPoLineId();",
													"pm.variables.set(\"poline_id\", poLineId);",
													"utils.sendGetRequest(\"/orders/order-lines/\" + poLineId, (err, res) => {",
													"    // Get physical object",
													"    let physical = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0].physical;",
													"    // make sure there is no id provided",
													"    delete physical.id;",
													"",
													"    // Get current date and add 1 month",
													"    let expectedReceiptDate = moment().utc().add(1, 'month').format();",
													"    pm.variables.set(\"expectedReceiptDate\", expectedReceiptDate);",
													"    physical.expectedReceiptDate = expectedReceiptDate;",
													"",
													"    let poLine  = res.json();",
													"    poLine.physical = physical;",
													"    pm.variables.set(\"updated_po_line\", JSON.stringify(poLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"// Get updated PO Line",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poline_id\"), function (err, res) {",
													"    pm.test(\"PO Line updated with expected receipt date\", function () {",
													"        let poLine  = res.json();",
													"        // Dates should be in the same format",
													"        let expectedReceiptDate = moment(pm.variables.get(\"expectedReceiptDate\")).utc().format();",
													"        let actualDate = moment(poLine.physical.expectedReceiptDate).utc().format();",
													"",
													"        pm.expect(actualDate).to.equal(expectedReceiptDate);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_po_line}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "Gets content of last PO Line and updates it adding expected receipt date"
									},
									"response": []
								}
							],
							"description": "[MODORDERS-135](https://issues.folio.org/browse/MODORDERS-135)\n\nAdd an `expected_receipt_date` field to the physical sub-object.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12fb8535-67c4-44e3-a656-ae684fccb7a0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c6ff5d2-f3ba-4a69-be99-c36a49678157",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"order_type\": \"One-Time\",\n  \"po_number\": \"268758test2\",\n  \"re_encumber\": false,\n  \"total_estimated_price\": 100.99,\n  \"total_items\": 2,\n  \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n  \"workflow_status\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"id\": \"{{poline_id}}\",\n      \"acquisition_method\": \"Purchase At Vendor System\",\n      \"adjustment\": {\n            \"credit\": 0,\n            \"discount\": 0,\n            \"insurance\": 0,\n            \"invoice_id\": \"2d6d495c-c237-476f-aa48-57f7cbf74ca4\",\n            \"overhead\": 0,\n            \"shipment\": 0,\n            \"tax_1\": 0,\n            \"tax_2\": 0,\n            \"use_pro_rate\": false\n        },\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellation_restriction\": false,\n      \"cancellation_restriction_note\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributor_type\": \"fbdd42a8-e47d-4694-b448-cc571d1b44c3\"\n        }\n      ],\n      \"cost\": {\n        \"list_price\": 24.99,\n        \"currency\": \"USD\",\n        \"quantity_physical\": 2,\n        \"po_line_estimated_price\": 49.98\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receiving_note\": \"ABCDEFGHIJKL\",\n        \"product_ids\": [\n          {\n            \"product_id\": \"9780764354113\",\n            \"product_id_type\": \"ISBN\"\n          }\n        ],\n        \"material_types\": [\n          \"1a54b431-2e4f-452d-9cae-9cee66c9a892\"\n        ],\n        \"subscription_from\": \"2018-10-09T00:00:00.000Z\",\n        \"subscription_interval\": 824,\n        \"subscription_to\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fund_distribution\": [\n        {\n          \"code\": \"HIST\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"location_id\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantity_electronic\": 0,\n        \"quantity_physical\": 2\n      }],\n      \"order_format\": \"Physical Resource\",\n      \"owner\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n      \"payment_status\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"material_supplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receipt_due\": \"2018-10-10T00:00:00.000Z\"\n      },\n      \"po_line_description\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"po_line_number\": \"268758-03\",\n      \"publication_date\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receipt_date\": \"2018-10-09T00:00:00.000Z\",\n      \"receipt_status\": \"Awaiting Receipt\", \n      \"reporting_codes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendor_detail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"note_from_vendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"ref_number\": \"123456-78\",\n        \"ref_number_type\": \"Supplier's unique order line reference number\",\n        \"vendor_account\": \"8910-10\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"1 po_line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate po_line_number\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order and verify adjustments",
							"item": [
								{
									"name": "Update order changing adjustment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"pm.environment.set(\"adjustment_credit_update\", 1.0);",
													"pm.environment.set(\"adjustment_discount_update\", 1.0);",
													"pm.environment.set(\"adjustment_insurance_update\", 1.0);",
													"pm.environment.set(\"adjustment_overhead_update\",1.0);",
													"pm.environment.set(\"adjustment_shipment_update\",1.0);",
													"pm.environment.set(\"adjustment_tax_1_update\",10.0);",
													"pm.environment.set(\"adjustment_tax_2_update\",10.0);",
													"pm.environment.set(\"adjustment_update_pro_rate\", true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"order_type\": \"One-Time\",\n  \"po_number\": {{complete_order_po_number}},\n  \"re_encumber\": false,\n  \"total_estimated_price\": 100.99,\n  \"total_items\": 1,\n  \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n  \"workflow_status\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"acquisition_method\": \"Purchase At Vendor System\",\n      \"adjustment\": {\n        \"credit\": {{adjustment_credit_update}},\n        \"discount\": {{adjustment_discount_update}},\n        \"insurance\": {{adjustment_insurance_update}},\n        \"invoice_id\": \"2d6d495c-c237-476f-aa48-57f7cbf74ca4\",\n        \"overhead\": {{adjustment_overhead_update}},\n        \"shipment\": {{adjustment_shipment_update}},\n        \"tax_1\": {{adjustment_tax_1_update}},\n        \"tax_2\": {{adjustment_tax_2_update}},\n        \"use_pro_rate\": {{adjustment_update_pro_rate}}\n      },\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellation_restriction\": false,\n      \"cancellation_restriction_note\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributor_type\": \"fbdd42a8-e47d-4694-b448-cc571d1b44c3\"\n        }\n      ],\n      \"cost\": {\n        \"list_price\": 24.99,\n        \"currency\": \"USD\",\n        \"quantity_physical\": 1,\n        \"po_line_estimated_price\": 24.99\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receiving_note\": \"ABCDEFGHIJKL\",\n        \"product_ids\": [\n          {\n            \"product_id\": \"9780764354113\",\n            \"product_id_type\": \"ISBN\"\n          }\n        ],\n        \"material_types\": [\n          \"1a54b431-2e4f-452d-9cae-9cee66c9a892\"\n        ],\n        \"subscription_from\": \"2018-10-09T00:00:00.000Z\",\n        \"subscription_interval\": 824,\n        \"subscription_to\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fund_distribution\": [\n        {\n          \"code\": \"HIST\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"location_id\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantity_physical\": 1\n      }],\n      \"order_format\": \"Physical Resource\",\n      \"owner\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n      \"payment_status\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"material_supplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receipt_due\": \"2018-10-10T00:00:00.000Z\"\n      },\n      \"po_line_description\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"po_line_number\": \"268758-03\",\n      \"publication_date\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receipt_date\": \"2018-10-09T00:00:00.000Z\",\n      \"receipt_status\": \"Awaiting Receipt\", \n      \"reporting_codes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendor_detail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"note_from_vendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"ref_number\": \"123456-78\",\n        \"ref_number_type\": \"Supplier's unique order line reference number\",\n        \"vendor_account\": \"8910-10\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate updated adjustment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate that response contains updated adjustment\", function () {    ",
													"    pm.response.to.have.jsonBody(\"adjustment.credit\", pm.environment.get(\"adjustment_credit_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.discount\", pm.environment.get(\"adjustment_discount_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.insurance\", pm.environment.get(\"adjustment_insurance_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.overhead\", pm.environment.get(\"adjustment_overhead_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.shipment\", pm.environment.get(\"adjustment_shipment_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.tax_1\", pm.environment.get(\"adjustment_tax_1_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.tax_2\", pm.environment.get(\"adjustment_tax_2_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.use_pro_rate\", pm.environment.get(\"adjustment_update_pro_rate\"));",
													"}); ",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b82e58b2-e7bc-42fd-9431-8f52a3158f19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e52c84d-bd9a-4522-bd46-8bdc423b9491",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new po_number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Order and update po_number only",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.complete_order_id, (err, res) => {",
													"    let order  = res.json();",
													"    order.po_number = \"newponumber\";",
													"    pm.variables.set(\"updated_order\", JSON.stringify(order));",
													"});",
													"",
													"pm.globals.set(\"po_number\", \"newponumber\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_order}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate po_number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate po_number\", function() {",
													"    pm.expect(jsonData.po_number).to.equal(pm.globals.get(\"po_number\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"po_number\": \"{{po_number}}\",\n    \"order_type\": \"Ongoing\",\n    \"re_encumber\": false,\n    \"total_estimated_price\": 99.99,\n    \"total_items\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflow_status\": \"Pending\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate po_line_number\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"po_number\": \"{{po_number}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.compositePoLines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4c80dcd-5979-4caa-9226-16a94cd885a8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5cdf6bc0-c660-4bec-be5c-440eb74bfe55",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflow_status = \"Pending\";",
											"    // Setting create inventory to false for PO Line with P/E Mix format",
											"    order.compositePoLines[0].eresource.create_inventory = false;",
											"    order = utils.deletePoNumber(order);",
											"",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"po_lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"another_complete_order_id\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.po_number).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.total_items).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    // Few more cases for MODORDERS-117",
											"    order.compositePoLines[0].order_format = \"Physical Resource\";",
											"    setPhysicalQuantity(order.compositePoLines[0]);",
											"    order.compositePoLines[1].order_format = \"Other\";",
											"    setPhysicalQuantity(order.compositePoLines[1]);",
											"",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    // Set Open status",
											"    pendingOrder.workflow_status = \"Open\";",
											"",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"another_complete_order_content\");",
											"});",
											"",
											"function setPhysicalQuantity(line) {",
											"    delete line.cost.quantity_electronic;",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantity_electronic;",
											"        location.quantity_physical = i + 1;",
											"        total += location.quantity_physical;",
											"    }",
											"    line.cost.quantity_physical = total;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.another_complete_order_id, function (err, res) {",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4, true);",
											"        //check status changed",
											"        order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{another_complete_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{another_complete_order_id}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflow_status = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2, true);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"complete_open_order_id\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.po_number).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.total_items).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    pm.variables.set(\"po_one_physical_one_electronic_lines\", JSON.stringify(utils.prepareOrder(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"phys_el_open_order_id\", order.id); ",
											"});",
											"",
											"pm.test(\"2 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 2, true);",
											"    order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_one_physical_one_electronic_lines}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Create Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflow_status = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        for(var i = 0; i < order.compositePoLines.length; i++) {",
											"    \t  order.compositePoLines[i].receipt_status = \"Receipt Not Required\";",
											"        }",
											"        ",
											"        pm.globals.set(\"order_with_receipt_not_required_lines\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Verify two po_lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2, false);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Receipt Not Required\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"order_without_inventory_records_id\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.po_number).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.total_items).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_receipt_not_required_lines}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117))."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Receive all pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.complete_open_order_id, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.complete_open_order_id, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert all received piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive 10 pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.phys_el_open_order_id, \"Physical Resource\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 10);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 10, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives 10 piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.phys_el_open_order_id, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 10 received piece records back to `Expected` and Inventory items back to `On order` for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.phys_el_open_order_id, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.phys_el_open_order_id, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Revert 2 received pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.phys_el_open_order_id, \"Electronic Resource\", 2);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 2, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 2 received piece records back to `Expected` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.complete_open_order_id, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 3 pieces, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Revert 1 received piece for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.complete_open_order_id, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, receivingHistoryTotalRecords - 1);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for an order with 4 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.another_complete_order_id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.another_complete_order_id, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create another Pending order` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"NewPO111NewPO\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get po_number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e9d47e7-02ab-4874-9914-a9d55ae25bd9",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify response status\r",
											"pm.test(\"First response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Validate PoNumber schema\r",
											"var schema = JSON.parse(globals.schema_po_number_content);\r",
											"pm.test('PoNumber schema is valid', function() {\r",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//3.  Verify po number generation process\r",
											"let endpoint = utils.buildOkapiUrl(\"/orders/po-number\");\r",
											"\r",
											"const getPoNumberRequest = {\r",
											"  url: endpoint,\r",
											"  method: \"GET\",\r",
											"  header: [\"X-Okapi-Tenant:\" + pm.environment.get(\"xokapitenant\"),\r",
											"  \"Content-Type:application/json\",\r",
											"  \"X-Okapi-Token:\" + pm.environment.get(\"xokapitoken\")],\r",
											"};\r",
											"\r",
											"pm.sendRequest(getPoNumberRequest, function (err, res) {\r",
											"    pm.test(\"Second response status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Second request po number : \" + res.json().poNumber);\r",
											"\r",
											"        pm.test(\"po numbers are not same\", function () {\r",
											"            pm.expect(jsonData.poNumber).to.not.eql(res.json().poNumber);\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98ec7aae-aa2c-45b6-8ecb-3e690ab56bf2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 3 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchase_orders).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchase_orders.length; i++) {",
											"    \tpm.expect(jsonData.purchase_orders[i].workflow_status).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflow_status==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflow_status==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Order Lines",
					"item": [
						{
							"name": "Get list of lines by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.po_lines).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines with Pending payment status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper payment status\", function () {",
											"    var jsonData = pm.response.json();",
											"    for(var i = 0; i < jsonData.po_lines.length; i++) {",
											"    \tpm.expect(jsonData.po_lines[i].payment_status).to.equal(\"Pending\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=payment_status==Pending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "payment_status==Pending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "373d8659-329d-42ba-ac4d-f5411d4083d4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96ee5cd4-fc48-4e2d-abd5-7ebf31882f78",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving History",
					"item": [
						{
							"name": "Get receiving history for Open Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has pieces to receive\", function() {",
											"    pm.expect(jsonData.total_records).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{complete_open_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{complete_open_order_id}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history for Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has no pieces to receive\", function() {",
											"    pm.expect(jsonData.total_records).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{order_without_inventory_records_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{order_without_inventory_records_id}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create Order for tests",
					"item": [
						{
							"name": "Create an order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"order_body\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.globals.set(\"negative_tests_order_id\", jsonData.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Add POLine order for further tests",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    eval(globals.loadUtils).rememberPoLineId(pm.response.json());",
											"});",
											"",
											"pm.test(\"Validate that response contains desired data\", function () {",
											"    let line = pm.response.json();",
											"    pm.expect(line.reporting_codes).to.have.lengthOf(2);",
											"    pm.expect(line.locations).to.have.lengthOf(1);",
											"    pm.globals.set(\"po_line_for_negative_tests\", JSON.stringify(line));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"locations\" : [{\n      \"quantity\" : 1,\n      \"quantity_electronic\" : 1,\n      \"quantity_physical\" : 0\n    }],\n\t\"source\": { \"code\": \"FOLIO\" },\n    \"purchase_order_id\" : \"{{negative_tests_order_id}}\",\n\t\"reporting_codes\": [\n\t\t{\n\t\t  \"code\": \"CODE1\",\n\t\t  \"description\": \"ABCDEF\"\n\t\t},\n\t\t{\n\t\t  \"code\": \"CODE2\",\n\t\t  \"description\": \"ABCDE\"\n\t\t}\n\t]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "Get order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Update order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Delete order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Get order - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ea0cb79-8f57-490d-b2a9-c368ac95914a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 400"
							},
							"response": []
						},
						{
							"name": "Get order - bad token format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "63145320-5160-4511-b040-bd72005f8468",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "bad-token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get order - invalid token - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e41e5c9e-c396-4f1e-81ff-10b79f737233",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id request that return 401"
							},
							"response": []
						},
						{
							"name": "Get order - random order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c51240b-34ce-4a8b-9db1-a1150320f0fe",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get order - empty order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										""
									]
								},
								"description": "GET /orders/composite-orders/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update order - empty po_number - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"pm.variables.set(\"poline_id\", eval(globals.loadUtils).getLastPoLineId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negative_tests_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negative_tests_order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "Verify PO Line required properties",
							"item": [
								{
									"name": "Create line - no source - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let line = utils.buildPoLineWithMinContent(globals.negative_tests_order_id);",
													"delete line.source;",
													"pm.variables.set(\"line_body\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Quantity validation",
							"item": [
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchase_order_id = globals.negative_tests_order_id;",
													"",
													"        line.order_format = \"Physical Resource\";",
													"        line.cost.quantity_electronic = 5;",
													"        line.cost.quantity_physical = 0;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantity_electronic = 10;",
													"            location.quantity_physical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchase_order_id = globals.negative_tests_order_id;",
													"",
													"        line.order_format = \"Electronic Resource\";",
													"        line.cost.quantity_electronic = 0;",
													"        line.cost.quantity_physical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantity_electronic = 10;",
													"            location.quantity_physical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify P/E Mix Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.id = JSON.parse(globals.po_line_for_negative_tests).id;",
													"        line.purchase_order_id = globals.negative_tests_order_id;",
													"",
													"        line.order_format = \"P/E Mix\";",
													"        line.cost.quantity_electronic = 0;",
													"        line.cost.quantity_physical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantity_electronic = 10;",
													"            location.quantity_physical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"        pm.variables.set(\"lineId\", line.id);",
													"",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{lineId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get line - empty polineId - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										""
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negative_tests_order_id);",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negative_tests_order_id);",
											"line.nonexistent_property = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negative_tests_order_id);",
											"line.nonexistent_property = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negative_tests_order_id);",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Delete line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line - invalid order Id in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"line.purchase_order_id = \"\";",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - update removed sub-object - 500",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let line = JSON.parse(globals.po_line_for_negative_tests);",
											"line.po_line_description =\"Description\";",
											"pm.variables.set(\"po_line_for_negative_tests\", JSON.stringify(line));",
											"pm.variables.set(\"poline_id\", line.id);",
											"",
											"// Delete one reporting code from storage",
											"utils.processDeleteRequest(\"/orders-storage/reporting_codes/\" + line.reporting_codes[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"",
											"    // Further tests can be done only if Server Error happened",
											"    pm.test(\"Error in body as json\", function () {",
											"        pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
											"    });",
											"",
											"    utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poline_id\"), function (err, res) {",
											"        pm.test(\"po_line has updates\", function () {",
											"            let line = res.json();",
											"            pm.expect(line.locations).to.have.lengthOf(1);",
											"            pm.expect(line.po_line_description).to.exist;",
											"            pm.expect(line.reporting_codes).to.have.lengthOf(1);",
											"        });",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_for_negative_tests}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{poline_id}}"
									]
								},
								"description": "The test verifies that PO Line is partially updated even if errors happened on sub-object operations\n1. Remove one of reporting codes in the Pre-request script\n2. Submit PUT PO Line request\n3. Verify expected behavior in Tests"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate - existing PO Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negative_tests_order_id, function (err, res) {",
											"    pm.variables.set(\"existing_number\", res.json().po_number);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : {{existing_number}}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 400 if an existing PO Number is supplied"
							},
							"response": []
						},
						{
							"name": "Validate - invalid PONumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"12-12-13\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 422 when an invalid PO Number is specified"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Attempt to receive already received pieces for physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"    url: utils.buildOkapiUrl(\"/orders/receiving-history?limit=10&query=receivingStatus==Received and purchaseOrderId=\" + globals.phys_el_open_order_id),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
											"        }",
											"},",
											"function (err, res) {",
											"    let receivingRq = utils.prepareReceivingRequest(res.json().receiving_history);",
											"    pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"All items should be failed because already received before\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(10);",
											"    let processedWithError = 0;",
											"    for(let i = 0; i < jsonRs.receivingResults.length; i++) {",
											"        let result = jsonRs.receivingResults[i];",
											"        pm.expect(result.processedSuccessfully).to.equal(0);",
											"        processedWithError += result.processedWithError;",
											"        for(let j = 0; j < result.receivingItemResults.length; j++) {",
											"            pm.expect(result.receivingItemResults[j].processingStatus).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.type).to.equal(\"failure\");",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"        }",
											"    }",
											"    pm.expect(processedWithError).to.equal(jsonRs.totalRecords);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records created by previous request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.configs.configNames;",
											"let originalConfigs = pm.environment.get(\"mod-orders-configs\") ? JSON.parse(pm.environment.get(\"mod-orders-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByName(originalConfigs, configName);",
											"    if (originalConfig) {",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Pending order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Order has been successfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete Pending to Open order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.another_complete_order_id, (err, res) => {",
									"    // The po_listed_print_monograph.json was used to create this order and one more Open order. Some instances will not be deleted now but with deletion of the next order",
									"    utils.deleteInventoryRecords(res.json(), false);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Order has been successfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{another_complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{another_complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete Open order with P/E Mix and Electronic lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.complete_open_order_id, (err, res) => {",
									"    // The instances should be deleted at this point for all orders created based on po_listed_print_monograph.json",
									"    utils.deleteInventoryRecords(res.json(), true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Order has been successfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_open_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_open_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete Open order with physical and electronic lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.phys_el_open_order_id, (err, res) => {",
									"    utils.deleteInventoryRecords(res.json(), true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Order has been successfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{phys_el_open_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{phys_el_open_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete order for negative tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Order has been successfully deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negative_tests_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{negative_tests_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete order with no created instances",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_without_inventory_records_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{order_without_inventory_records_id}}"
							]
						},
						"description": "DELETE /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Verify no lines left in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let lineId = utils.getLastPoLineId();",
									"if (lineId) {",
									"    pm.variables.set(\"complete_poline_id\", lineId);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Verify that no lines found\", function () {",
									"    pm.expect(pm.response.json().total_records).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/po_lines?query=purchase_order_id=={{complete_order_id}} or purchase_order_id=={{another_complete_order_id}} or purchase_order_id=={{complete_open_order_id}} or purchase_order_id=={{negative_tests_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"po_lines"
							],
							"query": [
								{
									"key": "query",
									"value": "purchase_order_id=={{complete_order_id}} or purchase_order_id=={{another_complete_order_id}} or purchase_order_id=={{complete_open_order_id}} or purchase_order_id=={{negative_tests_order_id}}"
								}
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "Verify that orders deleted in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Verify that no orders found\", function () {",
									"    pm.expect(pm.response.json().total_records).to.equal(0);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase_orders?query=id=={{complete_order_id}} or id=={{another_complete_order_id}} or id=={{complete_open_order_id}} or id=={{negative_tests_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"purchase_orders"
							],
							"query": [
								{
									"key": "query",
									"value": "id=={{complete_order_id}} or id=={{another_complete_order_id}} or id=={{complete_open_order_id}} or id=={{negative_tests_order_id}}"
								}
							]
						},
						"description": "GET /orders-storage/purchase_orders returns a 404 after delete"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [\"poLines-limit\"],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    receiving: {",
					"        bodyTemplate: {",
					"            \"toBeReceived\": [",
					"                {",
					"                    \"poLineId\": \"\",",
					"                    \"received\": 1,",
					"                    \"receivedItems\": [",
					"                        {",
					"                            \"barcode\": \"11111111111\",",
					"                            \"comment\": \"Very important note\",",
					"                            \"caption\": \"Vol. 1\",",
					"                            \"itemStatus\": \"Received\",",
					"                            \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",",
					"                            \"pieceId\": \"\"",
					"                        }",
					"                    ]",
					"                }",
					"            ],",
					"            \"totalRecords\": 1",
					"        }",
					"    }",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function (order) {",
					"        delete order.id;",
					"        console.log(\"Preparing order. Number of PO lines: %d\", order.compositePoLines.length);",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function (poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchase_order_id;",
					"        delete poLine.receipt_date;",
					"        utils._deleteSubObjectIds(poLine.adjustment);",
					"        utils._deleteSubObjectIds(poLine.cost);",
					"        utils._deleteSubObjectIds(poLine.details);",
					"        utils._deleteSubObjectIds(poLine.eresource);",
					"        utils._deleteSubObjectsIds(poLine.locations);",
					"        utils._deleteSubObjectIds(poLine.physical);",
					"        utils._deleteSubObjectIds(poLine.source);",
					"        utils._deleteSubObjectIds(poLine.vendor_detail);",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.claims);",
					"        utils._deleteSubObjectsIds(poLine.fund_distribution);",
					"        utils._deleteSubObjectsIds(poLine.reporting_codes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Build Order with minimal required fields.",
					"     */",
					"    utils.buildOrderWithMinContent = function () {",
					"        return {};",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function (orderId) {",
					"        return {",
					"            \"po_line_number\": \"tempnumber-123\",",
					"            \"purchase_order_id\": orderId,",
					"            \"source\": {",
					"                \"code\": \"FOLIO\"",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function (order, expectedCount) {",
					"        utils.validatePoLines(order, expectedCount, false);",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function (order, expectedCount, checkInventory) {",
					"        console.log(\"Validating PO Lines for order with PO number=%s. Expected lines count=%d. Inventory check required: %s\", order.po_number, expectedCount, checkInventory);",
					"        pm.expect(order.compositePoLines).to.have.lengthOf(expectedCount);",
					"        order.compositePoLines.forEach(poLine => {",
					"            pm.test(\"Validating PO Line with number=\" + poLine.po_line_number, function () {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchase_order_id, \"Line has to have order id\").to.equal(order.id);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"",
					"                if (checkInventory) {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    utils.verifyNoInventoryItemsExist(poLine);",
					"                    pm.expect(poLine.instance_id).to.not.exist;",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function (poLine) {",
					"        // Instance should created only",
					"        if (utils.calculateExpectedItemsQuantity(poLine) > 0) {",
					"            pm.expect(poLine.instance_id, \"Instance id is expected\").to.exist;",
					"            utils.sendGetRequest(\"/instance-storage/instances/\" + poLine.instance_id, (err, res) => {",
					"                pm.test(\"Instance Record exist for PO Line with number=\" + poLine.po_line_number, function () {",
					"                    pm.expect(res.json()).to.exist;",
					"                    pm.expect(res.json().id).to.equal(poLine.instance_id);",
					"                    //Check if holdings record is created",
					"                    utils.validateHoldingsRecord(poLine);",
					"                    // Now check items",
					"                    utils.validateInventoryItems(poLine);",
					"                });",
					"            });",
					"        } else {",
					"            utils.verifyNoInventoryItemsExist(poLine);",
					"            pm.expect(poLine.instance_id).to.not.exist;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function (line) {",
					"        let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"        utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records exist for PO Line with number=\" + line.po_line_number, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.getItemsByPoLineId = function (id, limit, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=\" + limit + \"&query=purchaseOrderLineIdentifier==\" + id, handler);",
					"    };",
					"",
					"    /**",
					"     * Validates that Holdings Record was created  in the inventory",
					"     */",
					"    utils.validateHoldingsRecord = function (poLine) {",
					"        let instanceId = poLine.instance_id;",
					"        pm.expect(instanceId).to.exist;",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + instanceId, (err, res) => {",
					"            pm.test(\"Holding Records exist for Created Instance=\" + instanceId, function () {",
					"                let body = res.json();",
					"                pm.expect(body.totalRecords).to.be.above(0);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that there is no any item associated with the PO Line",
					"     */",
					"    utils.verifyNoInventoryItemsExist = function (line) {",
					"        return new Promise((resolve) => {",
					"            utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"                resolve();",
					"                pm.test(\"No Item Records found for PO Line with number=\" + line.po_line_number, function () {",
					"                    pm.expect(res.code).to.eql(200);",
					"                    pm.expect(res.json().totalRecords).to.eql(0);",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's receipt status updated to expected",
					"     */",
					"    utils.validateReceiptStatus = function(poLine, receiptStatus) {",
					"        pm.test(poLine.po_line_number + \" PO Line should have \" + receiptStatus + \" receipt status\", function () {",
					"            pm.expect(poLine.receipt_status, \"Receipt status should be \" + receiptStatus).to.equal(receiptStatus);",
					"            if (\"Fully Received\" === receiptStatus) {",
					"                pm.expect(poLine.receipt_date, \"Receipt date should be set\").to.not.be.empty;",
					"            } else {",
					"                pm.expect(poLine.receipt_date, \"Receipt date should be empty\").to.not.exist;",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that items received in the inventory (MODORDERS-103)",
					"     */",
					"    utils.validateInventoryItemsReceived = function(poLine, expectedQuantity) {",
					"        let expectedCount = typeof expectedQuantity === \"undefined\" ? utils.calculateExpectedItemsQuantity(poLine) : expectedQuantity;",
					"        utils.sendGetRequest(\"/item-storage/items?limit=100&query=status.name==Received and purchaseOrderLineIdentifier==\" + poLine.id, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records marked as received for PO Line with number=\" + poLine.po_line_number, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items received for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                body.items.forEach(function (item) {",
					"                    pm.expect(item.barcode, \"Barcode should not be empty\").to.not.be.empty;",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected number of pieces received using receiving history endpoint (MODORDERS-103)",
					"     */",
					"    utils.validateReceivingHistoryNumberOfPiecesByStatus = function(poLine, expectedQuantity, receivingStatus) {",
					"        receivingStatus = typeof receivingStatus === \"undefined\" ? \"Expected\" : receivingStatus;",
					"        utils.sendGetRequest(\"/orders/receiving-history?limit=0&query=receivingStatus==\" + receivingStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"            pm.test(expectedQuantity + \" \" + receivingStatus + \" pieces for PO Line with number=\" + poLine.po_line_number, function () {",
					"                pm.expect(res.json().total_records).to.equal(expectedQuantity);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for all PO Lines of an order",
					"     * The function sets following variable:",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive one PO Line of the desired order format",
					"     * @param quantityToReceive number of pieces to receive. In case if not specified, all pieces will be received",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForOrder = function(orderId, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"Received\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            pm.test(\"Preparing receiving request for entire order with id=\" + orderId, function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"",
					"            if (typeof quantityToReceive === \"undefined\") {",
					"                quantityToReceive = 1000;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and purchaseOrderId=\" + orderId, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receiving_history, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().total_records);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForOrder = function(orderId, quantity) {",
					"        utils.prepareReceivingRequestForOrder(orderId, quantity, \"On order\");",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForPoLineOfFormat = function(orderId, orderFormat, quantity) {",
					"        utils.prepareReceivingRequestForPoLineOfFormat(orderId, orderFormat, quantity, \"On order\");",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for PO Line of expected order format",
					"     * The function sets 2 variables:",
					"     * - `receivingPoLineId` the PO Line id receiving request is going to be sent",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive/revert pieces of the PO Line of the desired order format",
					"     * @param orderFormat the desired order format of the PO Line",
					"     * @param quantityToReceive number of pieces to receive/revert. In case if not specified, all pieces will be received/reverted",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForPoLineOfFormat = function(orderId, orderFormat, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"Received\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let poLine;",
					"            pm.test(\"One PO Line with \" + orderFormat + \" order format expected\", function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"                let lines = res.json().compositePoLines.filter(line => line.order_format === orderFormat);",
					"                pm.expect(lines.length).to.equal(1);",
					"                poLine = lines[0];",
					"            });",
					"",
					"            pm.variables.set(\"receivingPoLineId\", poLine.id);",
					"            let piecesQuantity = utils.calculateExpectedPiecesQuantity(poLine);",
					"            if (typeof quantityToReceive === \"undefined\" || quantityToReceive > piecesQuantity) {",
					"                quantityToReceive = piecesQuantity;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receiving_history, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().total_records);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body based on receiving history array (MODORDERS-103)",
					"     */",
					"    utils.prepareReceivingRequest = function(receivingHistory, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"Received\";",
					"        }",
					"        let isRevertCase = itemStatus === \"On order\";",
					"",
					"        let totalQty = receivingHistory.length;",
					"        let piecesGroupedByPol = new Map();",
					"        for(let i = 0; i < totalQty; i++) {",
					"            let record = receivingHistory[i];",
					"            if (!piecesGroupedByPol.has(record.poLineId)) {",
					"                piecesGroupedByPol.set(record.poLineId, []);",
					"            }",
					"            piecesGroupedByPol.get(record.poLineId).push(record.id);",
					"        }",
					"",
					"        let receivingRq = globals.testData.receiving.bodyTemplate;",
					"        let toBeReceivedTemplate = receivingRq.toBeReceived.pop();",
					"        let receivedItemTemplate = toBeReceivedTemplate.receivedItems.pop();",
					"        receivedItemTemplate.itemStatus = itemStatus;",
					"",
					"        let barcode;",
					"        if (isRevertCase) {",
					"            delete receivedItemTemplate.barcode;",
					"            delete receivedItemTemplate.comment;",
					"            delete receivedItemTemplate.caption;",
					"            delete receivedItemTemplate.locationId;",
					"        } else {",
					"            barcode = parseInt(pm.environment.get(\"receivingItemBarcode\") ? pm.environment.get(\"receivingItemBarcode\") : receivedItemTemplate.barcode);",
					"        }",
					"",
					"        let total = 0;",
					"        for (var [polId, pieceIds] of piecesGroupedByPol) {",
					"            let toBeReceived = utils.copyJsonObj(toBeReceivedTemplate);",
					"            toBeReceived.poLineId = polId;",
					"            toBeReceived.received = pieceIds.length;",
					"            for(let i = 0; i < pieceIds.length; i++) {",
					"                let receivedItem = utils.copyJsonObj(receivedItemTemplate);",
					"                receivedItem.pieceId = pieceIds[i];",
					"                if (!isRevertCase) {",
					"                    // Inventory requires unique barcodes",
					"                    receivedItem.barcode = ++barcode;",
					"                }",
					"                toBeReceived.receivedItems.push(receivedItem);",
					"                total++;",
					"            }",
					"            receivingRq.toBeReceived.push(toBeReceived);",
					"        }",
					"        receivingRq.totalRecords = total;",
					"",
					"        if (!isRevertCase) {",
					"            pm.environment.set(\"receivingItemBarcode\", barcode);",
					"        }",
					"        return receivingRq;",
					"    };",
					"",
					"    /**",
					"     * Verify receiving response body",
					"     */",
					"    utils.verifyReceivingResponse = function(jsonRs, expectedSucceededQuantity, expectedFailedQuantity) {",
					"        pm.expect(jsonRs.totalRecords).to.be.above(0);",
					"        let processedSuccessfully = 0;",
					"        let processedWithError = 0;",
					"        jsonRs.receivingResults.forEach(result => {",
					"            processedSuccessfully += result.processedSuccessfully;",
					"            processedWithError += result.processedWithError;",
					"            let succeeded = 0;",
					"            let failed = 0;",
					"            result.receivingItemResults.forEach(receivingItemResult => {",
					"                pm.expect(receivingItemResult.pieceId).to.exist;",
					"                pm.expect(receivingItemResult.processingStatus).to.exist;",
					"                receivingItemResult.processingStatus.type === \"success\" ? succeeded++ : failed++;",
					"            });",
					"            pm.expect(succeeded).to.equal(result.processedSuccessfully);",
					"            pm.expect(failed).to.equal(result.processedWithError);",
					"        });",
					"        pm.expect(processedWithError).to.equal(expectedFailedQuantity);",
					"        pm.expect(processedSuccessfully).to.equal(expectedSucceededQuantity);",
					"        pm.expect(processedWithError + processedSuccessfully).to.equal(jsonRs.totalRecords);",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-117",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function(poLine) {",
					"        switch (poLine.order_format) {",
					"            case \"P/E Mix\":",
					"                return utils.getPhysicalQuantity(poLine) + utils.getElectronicQuantity(poLine);",
					"            case \"Physical Resource\":",
					"                return utils.getPhysicalQuantity(poLine);",
					"            case \"Electronic Resource\":",
					"                return utils.getElectronicQuantity(poLine);",
					"            case \"Other\":",
					"                return 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-100",
					"     */",
					"    utils.calculateExpectedPiecesQuantity = function(poLine) {",
					"        switch (poLine.order_format) {",
					"            case \"P/E Mix\":",
					"            case \"Other\":",
					"                return poLine.cost.quantity_physical + poLine.cost.quantity_electronic;",
					"            case \"Physical Resource\":",
					"                return poLine.cost.quantity_physical;",
					"            case \"Electronic Resource\":",
					"                return poLine.cost.quantity_electronic;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalQuantity = function(poLine) {",
					"        let total = 0;",
					"        let locations = poLine.locations;",
					"        if (locations) {",
					"            for(let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantity_physical;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicQuantity = function(poLine) {",
					"        let total = 0;",
					"        if (poLine.eresource && poLine.eresource.create_inventory && poLine.locations) {",
					"            let locations = poLine.locations;",
					"            for(let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantity_electronic;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function(poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisition_method, \"acquisition_method expected\").to.exist;",
					"        pm.expect(poLine.adjustment, \"adjustment expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellation_restriction, \"cancellation_restriction expected\").to.exist;",
					"        pm.expect(poLine.cancellation_restriction_note, \"cancellation_restriction_note expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fund_distribution, \"fund_distribution expected\").to.exist;",
					"        pm.expect(poLine.locations, \"locations expected\").to.exist;",
					"        pm.expect(poLine.order_format, \"order_format expected\").to.exist;",
					"        pm.expect(poLine.owner, \"owner expected\").to.exist;",
					"        pm.expect(poLine.payment_status, \"payment_status expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.po_line_description, \"po_line_description expected\").to.exist;",
					"        pm.expect(poLine.po_line_number, \"po_line_number expected\").to.exist;",
					"        pm.expect(poLine.publication_date, \"publication_date expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receipt_status, \"receipt_status expected\").to.exist;",
					"        pm.expect(poLine.reporting_codes, \"reporting_codes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.title, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendor_detail, \"vendor_detail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function(poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchase_order_id, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source not expected\").to.exist;",
					"        pm.expect(poLine.acquisition_method, \"acquisition_method not expected\").to.not.exist;",
					"        pm.expect(poLine.adjustment, \"adjustment not expected\").to.not.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellation_restriction, \"cancellation_restriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellation_restriction_note, \"cancellation_restriction_note not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost not expected\").to.not.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fund_distribution, \"fund_distribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.locations, \"locations should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.order_format, \"order_format not expected\").to.not.exist;",
					"        pm.expect(poLine.owner, \"owner not expected\").to.not.exist;",
					"        pm.expect(poLine.payment_status, \"payment_status not expected\").to.not.exist;",
					"        pm.expect(poLine.physical, \"physical not expected\").to.not.exist;",
					"        pm.expect(poLine.po_line_description, \"po_line_description not expected\").to.not.exist;",
					"        pm.expect(poLine.po_line_number, \"po_line_number is expected\").to.exist;",
					"        pm.expect(poLine.publication_date, \"publication_date not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receipt_date, \"receipt_date not expected\").to.not.exist;",
					"        pm.expect(poLine.receipt_status, \"receipt_status must be Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.reporting_codes, \"reporting_codes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.rush, \"rush not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.title, \"title not expected\").to.not.exist;",
					"        pm.expect(poLine.vendor_detail, \"vendor_detail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `complete_poline_ids` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function(poLine) {",
					"        if (poLine && poLine.id) {",
					"            let complete_poline_ids = pm.globals.get(\"complete_poline_ids\") ? JSON.parse(pm.globals.get(\"complete_poline_ids\")) : [];",
					"            complete_poline_ids.push(poLine.id);",
					"            pm.globals.set(\"complete_poline_ids\", JSON.stringify(complete_poline_ids));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `complete_poline_ids` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function(withRemoval) {",
					"        let complete_poline_ids = globals.complete_poline_ids ? JSON.parse(globals.complete_poline_ids) : [];",
					"        if (complete_poline_ids.length > 0) {",
					"            let lineId = complete_poline_ids.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"complete_poline_ids\", JSON.stringify(complete_poline_ids));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function(jsonData) {",
					"        let schema = JSON.parse(globals.schema_composite_po_line_content);",
					"        utils._validateAgainstSchema(jsonData, schema);",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function(jsonData) {",
					"        let schema = JSON.parse(globals.schema_composite_purchase_order_content);",
					"        utils._validateAgainstSchema(jsonData, schema);",
					"    };",
					"",
					"    /**",
					"     * Validates the PO Lines number",
					"     */",
					"    utils.validatePoLinesNumber = function(order) {",
					"        let poLineSuffix = \"(-[0-9]{1,3})\";",
					"        let regex = new RegExp(order.po_number + poLineSuffix);",
					"        for(let i = 0; i < order.compositePoLines.length; i++) {",
					"            let poLineNumber = order.compositePoLines[i].po_line_number;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Deletes Instance from Inventory by id linked to PO line",
					"     */",
					"    utils.deleteInventoryInstance = function(instanceId) {",
					"        return utils.processDeleteRequest(\"/instance-storage/instances/\" + instanceId)",
					"            .then(code => {",
					"                return new Promise((resolve) => {",
					"                    resolve(code);",
					"                    utils.validateResultOfDeleteRequest(code, \"Instance should be successfully deleted. Instance id=\" + instanceId)",
					"                });",
					"            });",
					"    };",
					"",
					"    /**",
					"     * Deletes Holdings from Inventory",
					"     */",
					"    utils.deleteHoldingsRecords = function(lineId, holdingsIds) {",
					"        let promises = [];",
					"        holdingsIds.forEach(holdingId => {",
					"            promises.push(",
					"                utils.searchForItemsByHoldingId(holdingId)",
					"                    .then(itemsQty => {",
					"                        if (itemsQty === 0) {",
					"                            return utils.processDeleteRequest(\"/holdings-storage/holdings/\" + holdingId);",
					"                        } else {",
					"                            console.log(\"Holding with id=%s for line with id=%s has %d items linked. Delete request is skipped.\", holdingId, lineId, itemsQty);",
					"                            pm.test(itemsQty + \" item record(s) referenced by holding with id=\" + holdingId + \". The holding deletion is skipped!\", function () {});",
					"                            return -1;",
					"                        }",
					"                    })",
					"            );",
					"        });",
					"        console.log(\"Attempting to delete %d holdings for line with id=%s\", holdingsIds.length, lineId);",
					"",
					"        return new Promise((resolve) => {",
					"            Promise.all(promises)",
					"                .then(results => {",
					"                    resolve(results);",
					"",
					"                    let skippedQty = results.filter(code => code === -1).length;",
					"                    let deletedQty = results.filter(code => code === 204).length;",
					"                    pm.test(holdingsIds.length - skippedQty + \" holding(s) without items should be deleted for PO Line with id=\" + lineId, () => {",
					"                        pm.expect(skippedQty + deletedQty).to.eql(holdingsIds.length);",
					"                    });",
					"                });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Searches for item records in Inventory by holding id.",
					"     * The function returns Promise which holds quantity of found items",
					"     */",
					"    utils.searchForItemsByHoldingId = function(holdingsId) {",
					"        return new Promise((resolve) => {",
					"            utils.sendGetRequest(\"/item-storage/items?limit=0&query=holdingsRecordId==\" + holdingsId, (err, response) => {",
					"                if (response.code !== 200) {",
					"                    resolve(-1);",
					"                }",
					"                pm.expect(response.code, \"Inventory cannot return items\").to.eql(200);",
					"                resolve(response.json().totalRecords);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Searches for item records in Inventory by PO Line id.",
					"     * The function returns Promise which holds found items.",
					"     */",
					"    utils.getItemsByPoLine = function(line) {",
					"        return new Promise((resolve) => {",
					"            let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"            utils.getItemsByPoLineId(line.id, expectedCount, (err, response) => {",
					"                pm.test(\"Search for item records by PO Line id=\" + line.id, function () {",
					"                    if (response.code !== 200) {",
					"                        resolve([]);",
					"                    }",
					"                    pm.expect(response.code, \"Inventory cannot return items\").to.eql(200);",
					"",
					"                    resolve(response.json().items);",
					"",
					"                    // Test expected items count as the last step to make sure delete requests are sent",
					"                    let foundItems = response.json().totalRecords;",
					"                    pm.expect(foundItems, \"Expected items count does not match to found\").to.equal(expectedCount);",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Deletes Item records from Inventory. The function returns Promise which holds holdings ids once completed",
					"     */",
					"    utils.deleteInventoryItemRecords = function(line) {",
					"        return new Promise((resolve) => {",
					"            // Get",
					"            utils.getItemsByPoLine(line)",
					"                .then(items => {",
					"                    let holdingsIds = [];",
					"                    let promises = [];",
					"                    items.forEach(item => {",
					"                        // Using array because Set is not working for some reason",
					"                        if (!holdingsIds.includes(item.holdingsRecordId)) {",
					"                            holdingsIds.push(item.holdingsRecordId);",
					"                        }",
					"                        promises.push(utils.processDeleteRequest(\"/item-storage/items/\" + item.id));",
					"                    });",
					"                    console.log(\"Deleting %d items for line with id=%s\", items.length, line.id);",
					"                    // Wait for items to be deleted and then return holdings ids as a result of the promise defined in the top",
					"                    Promise.all(promises)",
					"                    // The promisses will be always resolved so not handling reject case",
					"                        .then(itemDelResults => {",
					"                            // Returning the holding ids regardless of the result of the item deletion jut to try to delete holdings in any case",
					"                            resolve(holdingsIds);",
					"",
					"                            let deletedQty = itemDelResults.filter(code => code === 204).length;",
					"                            pm.test(items.length + \" item(s) should be deleted for PO Line with id=\" + line.id, () => {",
					"                                pm.expect(deletedQty).to.eql(items.length);",
					"                            });",
					"                        });",
					"",
					"                    // Test expected items count as the last step to make sure that delete requests are sent",
					"                    let foundItems = response.json().totalRecords;",
					"                    let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"                    pm.expect(foundItems, \"Expected items count does not match to found\").to.equal(expectedCount);",
					"                });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Cascasde Deletes Inventory Records created for PO lines",
					"     * Starting with Delete items-> holdings -> Instances",
					"     *",
					"     * Note: The timeout is required when Promise is used. See https://community.getpostman.com/t/using-native-javascript-promises-in-postman/636",
					"     */",
					"    utils.deleteInventoryRecords = function(order, verifyRecordsDeletion) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"",
					"        let promises = [];",
					"        order.compositePoLines.forEach(line => {",
					"            // The function returns Promise",
					"            promises.push(",
					"                utils.deleteInventoryItemRecords(line)",
					"                    .then(holdingsIds => {",
					"                        console.log(\"%d holdings ids collected for line %s\", holdingsIds.length, line.id);",
					"                        return holdingsIds.length > 0 ? utils.deleteHoldingsRecords(line.id, holdingsIds) : [];",
					"                    })",
					"                    .then(holdingsDelResult => {",
					"                        // delete instance if there is an instance id and there is no holdings linked to any item",
					"                        if (line.instance_id) {",
					"                            // see utils.deleteHoldingsRecords()",
					"                            let holdingsQty = holdingsDelResult.filter(code => code === -1).length;",
					"                            if (holdingsQty === 0) {",
					"                                return utils.deleteInventoryInstance(line.instance_id);",
					"                            } else {",
					"                                pm.test(holdingsQty + \" holdings record(s) referenced by instance id=\" + line.instance_id + \". The instance deletion is skipped!\", () => {});",
					"                            }",
					"                        }",
					"                        return -1;",
					"                    })",
					"            );",
					"        });",
					"        return Promise.all(promises)",
					"            .then(success => {",
					"                console.log(\"Inventory Records deletion processed: \", success);",
					"                return verifyRecordsDeletion ? utils.verifyInventoryRecordsDeleted(order) : success;",
					"            })",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"",
					"    /**",
					"     * Verifies if instance, holding(s) and item(s) have been removed for the PO Line",
					"     */",
					"    utils.verifyInventoryRecordsDeleted = function(order) {",
					"        let promises = [];",
					"        order.compositePoLines.forEach(line => {",
					"            promises.push(utils.verifyInventoryInstanceDeleted(line));",
					"            promises.push(utils.verifyInventoryHoldingsDeleted(line));",
					"            promises.push(utils.verifyNoInventoryItemsExist(line));",
					"        });",
					"        return Promise.all(promises);",
					"    };",
					"",
					"    /**",
					"     * Verifies if instance associated with the PO Line has been deleted",
					"     */",
					"    utils.verifyInventoryInstanceDeleted = function(line) {",
					"        return new Promise((resolve) => {",
					"            if (line.instance_id) {",
					"                utils.sendGetRequest(\"/instance-storage/instances/\" + line.instance_id, (err, res) => {",
					"                    resolve();",
					"                    pm.test(\"No Instance Record found for PO Line with id=\" + line.id, function () {",
					"                        pm.expect(res.code).to.eql(404);",
					"                    });",
					"                });",
					"            } else {",
					"                resolve();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if holdings associated with the PO Line have been deleted",
					"     */",
					"    utils.verifyInventoryHoldingsDeleted = function(line) {",
					"        return new Promise((resolve) => {",
					"            if (line.instance_id) {",
					"                utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + line.instance_id, (err, res) => {",
					"                    resolve();",
					"                    pm.test(\"No Holding Records found for PO Line with id=\" + line.id, function () {",
					"                        pm.expect(res.code).to.eql(200);",
					"                        pm.expect(res.json().totalRecords).to.eql(0);",
					"                    });",
					"                });",
					"            } else {",
					"                resolve();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => {",
					"            pm.sendRequest({",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"DELETE\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\")",
					"                }",
					"            }, function (err, response) {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigByName = function(configs, configName) {",
					"        let config = configs.filter(value => value.configName === configName);",
					"        return config.length > 0 ? config[0] : null;",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries\"),",
					"            method: \"POST\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function (err, response) {",
					"            pm.test(\"Config created\", function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries/\" + body.id),",
					"            method: \"PUT\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function (err, response) {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(",
					"            {",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"GET\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            handler",
					"        );",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"schema_composite_purchase_order_content\");",
					"        pm.globals.unset(\"schema_adjustment_content\");",
					"        pm.globals.unset(\"schema_alert_content\");",
					"        pm.globals.unset(\"schema_composite_po_line_content\");",
					"        pm.globals.unset(\"schema_cost_content\");",
					"        pm.globals.unset(\"schema_claim_content\");",
					"        pm.globals.unset(\"schema_details_content\");",
					"        pm.globals.unset(\"schema_eresource_content\");",
					"        pm.globals.unset(\"schema_fund_distribution_content\");",
					"        pm.globals.unset(\"schema_location_content\");",
					"        pm.globals.unset(\"schema_physical_content\");",
					"        pm.globals.unset(\"schema_renewal_content\");",
					"        pm.globals.unset(\"schema_reporting_code_content\");",
					"        pm.globals.unset(\"schema_source_content\");",
					"        pm.globals.unset(\"schema_vendor_detail_content\");",
					"        pm.globals.unset(\"schema_metadata_content\");",
					"        pm.globals.unset(\"schema_po_number_content\");",
					"        pm.globals.unset(\"schema_order_format_content\");",
					"        pm.globals.unset(\"schema_receipt_status_content\");",
					"        pm.globals.unset(\"empty_order_id\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"complete_poline_ids\");",
					"        pm.globals.unset(\"complete_order_id\");",
					"        pm.globals.unset(\"phys_el_open_order_id\");",
					"        pm.globals.unset(\"negative_tests_order_id\");",
					"        pm.globals.unset(\"another_complete_order_id\");",
					"        pm.globals.unset(\"complete_open_order_id\");",
					"        pm.globals.unset(\"po_line_for_negative_tests\");",
					"        pm.globals.unset(\"complete_order_po_number\");",
					"        pm.globals.unset(\"new_empty_po_line\");",
					"        pm.globals.unset(\"po_number\");",
					"",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"adjustment_credit_update\");",
					"        pm.environment.unset(\"adjustment_discount_update\");",
					"        pm.environment.unset(\"adjustment_insurance_update\");",
					"        pm.environment.unset(\"adjustment_overhead_update\");",
					"        pm.environment.unset(\"adjustment_shipment_update\");",
					"        pm.environment.unset(\"adjustment_tax_1_update\");",
					"        pm.environment.unset(\"adjustment_tax_2_update\");",
					"        pm.environment.unset(\"adjustment_update_pro_rate\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        //https://github.com/folio-org/acq-models/blob/master/composite_purchase_order.json",
					"        //https://github.com/folio-org/acq-models/blob/master/composite_po_line.json",
					"        tv4.addSchema(\"composite_po_line.json\", JSON.parse(globals.schema_composite_po_line_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/adjustment.json\", JSON.parse(globals.schema_adjustment_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/alert.json\", JSON.parse(globals.schema_alert_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/claim.json\", JSON.parse(globals.schema_claim_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/cost.json\", JSON.parse(globals.schema_cost_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/details.json\", JSON.parse(globals.schema_details_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/eresource.json\", JSON.parse(globals.schema_eresource_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/fund_distribution.json\", JSON.parse(globals.schema_fund_distribution_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/location.json\", JSON.parse(globals.schema_location_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/physical.json\", JSON.parse(globals.schema_physical_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/renewal.json\", JSON.parse(globals.schema_renewal_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/reporting_code.json\", JSON.parse(globals.schema_reporting_code_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/source.json\", JSON.parse(globals.schema_source_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/vendor_detail.json\", JSON.parse(globals.schema_vendor_detail_content));",
					"        tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(globals.schema_metadata_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/order_format.json\", JSON.parse(globals.schema_order_format_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/receipt_status.json\", JSON.parse(globals.schema_receipt_status_content));",
					"    };",
					"",
					"    /**",
					"     * Internal function to delete 'id' and 'po_line_id' in sub-object",
					"     */",
					"    utils._deleteSubObjectIds = function(data) {",
					"        if (data) {",
					"            delete data.id;",
					"            delete data.po_line_id;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            for(let i = 0; i < data.length; i++) {",
					"                utils._deleteSubObjectIds(data[i]);",
					"            }",
					"        }",
					"    };",
					"",
					"    utils.deletePoNumber = function(order) {",
					"        delete order.po_number;",
					"",
					"        return order;",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9c0e204f-c0ad-4ef8-babd-3fbcc6ab5373",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "d8794ea1-22a2-4b42-8a46-de8a149bf060",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org/acq-models/master",
			"type": "string"
		},
		{
			"id": "855b1683-f330-4bb6-83b8-debd442188a4",
			"key": "schema_composite_purchase_order",
			"value": "composite_purchase_order.json",
			"type": "string"
		},
		{
			"id": "66c17199-cdb1-465f-ad9c-2548ee4b4882",
			"key": "schema_adjustment",
			"value": "adjustment.json",
			"type": "string"
		},
		{
			"id": "1824e20f-9c4b-4191-ad92-d56d57c4a437",
			"key": "schema_alert",
			"value": "alert.json",
			"type": "string"
		},
		{
			"id": "e27f2bde-d95b-443c-9738-42b288a6b13a",
			"key": "schema_claim",
			"value": "claim.json",
			"type": "string"
		},
		{
			"id": "aa05dd7b-609b-4a6e-9c32-9347ca40493e",
			"key": "schema_composite_po_line",
			"value": "composite_po_line.json",
			"type": "string"
		},
		{
			"id": "58d6a7a4-1e49-429a-b25d-1c6d81073703",
			"key": "schema_cost",
			"value": "cost.json",
			"type": "string"
		},
		{
			"id": "3bff641e-1eff-43c7-8d66-27c68cb9ae96",
			"key": "schema_details",
			"value": "details.json",
			"type": "string"
		},
		{
			"id": "af0a0097-ca00-4dfe-ab23-ffac69a7f967",
			"key": "schema_eresource",
			"value": "eresource.json",
			"type": "string"
		},
		{
			"id": "7964eeca-2dab-43b7-aff2-15000c564927",
			"key": "schema_fund_distribution",
			"value": "fund_distribution.json",
			"type": "string"
		},
		{
			"id": "6cfe3206-db5a-4679-a5f9-4fbeb2ca42d3",
			"key": "schema_location",
			"value": "location.json",
			"type": "string"
		},
		{
			"id": "bd5f457f-64fd-49e1-a33c-73fd449d4c7d",
			"key": "schema_physical",
			"value": "physical.json",
			"type": "string"
		},
		{
			"id": "2b4819d5-9de2-4ca2-9e4f-56d5e30c2ef8",
			"key": "schema_renewal",
			"value": "renewal.json",
			"type": "string"
		},
		{
			"id": "51e22b26-5037-411b-8637-040f2e641336",
			"key": "schema_reporting_code",
			"value": "reporting_code.json",
			"type": "string"
		},
		{
			"id": "f9f00b37-1d5a-4e99-91bd-d1338031a6f4",
			"key": "schema_source",
			"value": "source.json",
			"type": "string"
		},
		{
			"id": "5f5e9a63-4733-40e0-bbe9-400ff0853caa",
			"key": "schema_vendor_detail",
			"value": "vendor_detail.json",
			"type": "string"
		},
		{
			"id": "023df824-7912-45f7-954d-e8d5941c6c34",
			"key": "schema_order_format",
			"value": "order_format.json",
			"type": "string"
		},
		{
			"id": "bc72308d-bde8-4b39-aa6d-5ce28d2bba04",
			"key": "schema_receipt_status",
			"value": "receipt_status.json",
			"type": "string"
		},
		{
			"id": "470fc98a-8d92-44e4-92f3-a9984a138429",
			"key": "storage_module",
			"value": "mod-orders-storage",
			"type": "string"
		},
		{
			"id": "366e29bf-0b91-4ae8-83cc-f3ffb9dc301d",
			"key": "business_module",
			"value": "mod-orders",
			"type": "string"
		},
		{
			"id": "0ed1edd7-9c94-4c30-90b7-23d5434c0531",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "474c8714-5469-4e79-9443-d4dfaa403644",
			"key": "schema_po_number",
			"value": "po_number.json",
			"type": "string"
		},
		{
			"id": "3a04f91f-fdc2-41b2-aae9-0e368c1ec9b6",
			"key": "raml_loc",
			"value": "https://raw.githubusercontent.com/folio-org/raml/raml1.0",
			"type": "string"
		},
		{
			"id": "93648307-7a1f-4c52-9db7-ce0eea589d30",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		}
	]
}