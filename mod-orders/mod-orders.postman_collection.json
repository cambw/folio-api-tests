{
	"info": {
		"_postman_id": "3a2356c4-69d4-433a-9a16-ad19f26977b9",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify required modules enabled",
					"item": [
						{
							"name": "mod-orders is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-orders"
										}
									]
								},
								"description": "Check if mod-orders is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						},
						{
							"name": "mod-configuration is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-configuration"
										}
									]
								},
								"description": "Check if mod-orders is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configCodesToProcess = testConfigs.codes;",
											"console.log(\"Config codes to process: \" + configCodesToProcess);",
											"let bodyTemplate = testConfigs.bodyTemplate;",
											"for (var i = 0; i < configCodesToProcess.length; i++) {",
											"    let configCode = configCodesToProcess[i];",
											"    bodyTemplate.code = configCode;",
											"    bodyTemplate.value = pm.variables.get(configCode);",
											"",
											"    let existingConfig = utils.getConfigByCode(configs, configCode);",
											"    if (existingConfig) {",
											"        utils.updateConfig(bodyTemplate, existingConfig.id);",
											"    } else {",
											"        utils.createConfig(bodyTemplate);",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "composite_purchase_order.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_composite_purchase_order\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_composite_purchase_order_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{schema_composite_purchase_order}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{schema_composite_purchase_order}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "adjustment.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_adjustment\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_adjustment_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_adjustment}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_adjustment}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "alert.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_alert\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_alert_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_alert}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_alert}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "composite_po_line.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_composite_po_line\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_composite_po_line_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{schema_composite_po_line}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{schema_composite_po_line}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "cost.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_cost\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_cost_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_cost}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_cost}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "claim.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_claim\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_claim_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_claim}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_claim}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "details.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_details\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_details_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_details}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_details}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "eresource.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_eresource\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_eresource_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_eresource}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_eresource}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "fund_distribution.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_fund_distribution\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_fund_distribution_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_fund_distribution}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_fund_distribution}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "location.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_location\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_location_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_location}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_location}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "physical.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_physical\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_physical_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_physical}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_physical}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "renewal.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_renewal\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_renewal_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_renewal}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_renewal}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "reporting_code.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_reporting_code\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_reporting_code_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_reporting_code}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_reporting_code}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "source.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_source\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_source_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_source}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_source}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "vendor_detail.json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"pm.test(pm.variables.get(\"schema_vendor_detail\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_vendor_detail_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{schema_loc}}/{{module}}/schemas/{{schema_vendor_detail}}",
									"host": [
										"{{schema_loc}}"
									],
									"path": [
										"{{module}}",
										"schemas",
										"{{schema_vendor_detail}}"
									]
								},
								"description": "GET schema validation"
							},
							"response": []
						},
						{
							"name": "metadata.shcema",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
										"exec": [
											"pm.test(pm.variables.get(\"schema_metadata\") + \" GET OK\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.globals.set(\"schema_metadata_content\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{raml_loc}}/schemas/{{schema_metadata}}",
									"host": [
										"{{raml_loc}}"
									],
									"path": [
										"schemas",
										"{{schema_metadata}}"
									]
								}
							},
							"response": []
						},
                      {
                        "name": "po_number.json",
                        "event": [
                          {
                            "listen": "test",
                            "script": {
                              "id": "8a9792a3-7f93-41cd-8b8f-e00b68d10c0e",
                              "exec": [
                                "pm.test(pm.variables.get(\"schema_po_number\") + \" GET OK\", function () {",
                                "    pm.response.to.be.ok;",
                                "    pm.response.to.be.withBody;",
                                "});",
                                "",
                                "pm.globals.set(\"schema_po_number_content\", responseBody);"
                              ],
                              "type": "text/javascript"
                            }
                          }
                        ],
                        "request": {
                          "method": "GET",
                          "header": [],
                          "body": {
                            "mode": "raw",
                            "raw": ""
                          },
                          "url": {
                            "raw": "{{schema_loc}}/{{module}}/schemas/{{schema_po_number}}",
                            "host": [
                              "{{schema_loc}}"
                            ],
                            "path": [
                              "{{module}}",
                              "schemas",
                              "{{schema_po_number}}"
                            ]
                          }
                        },
                        "response": []
                      }
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Empty list of notes exist\", function () {",
											"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"});",
											"",
											"pm.test(\"Each order has required fields\", function(){",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"empty_order_id\", jsonData.id); ",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.po_number).to.exist;",
											"    pm.expect(jsonData.po_lines).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on MODORDERS-136)."
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{empty_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{empty_order_id}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1ed8c17-6277-4493-a68c-40ef625cec32",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd99c49b-c8fe-4752-96e2-fceab96b7e71",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let order  = res.json();",
													"        order.workflow_status = \"Pending\";",
													"        order = utils.deletePoNumber(order);",
													"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"complete_order_id\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.po_number).to.exist;",
													"    pm.globals.set(\"complete_order_po_number\",\"\\\"\"+jsonData.po_number+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.total_items).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Get order by order id and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        var poline = utils.preparePoLine(res.json());",
													"        poline.purchase_order_id = pm.globals.get(\"complete_order_id\");",
													"        pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"    }",
													");",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId(true));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"1 po_line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.complete_order_id);",
													"",
													"pm.globals.set(\"new_empty_po_line\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													"",
													"utils.rememberPoLineId(jsonData);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{new_empty_po_line}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        var poline = utils.preparePoLine(res.json());",
													"        poline.purchase_order_id = pm.globals.get(\"complete_order_id\");",
													"        pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"    }",
													");",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId(true));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).po_lines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.po_line_number += \"1\";",
													"line.po_line_description += \" another PO Line\";",
													"line.purchase_order_id = pm.globals.get(\"complete_order_id\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													"",
													"utils.rememberPoLineId(jsonData);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.complete_order_id);",
													"",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());",
													"pm.variables.set(\"new_empty_po_line\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{new_empty_po_line}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"po_line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poline_id\"));",
													"    pm.expect(jsonData.purchase_order_id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poline_id}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8859bd1d-f892-4d95-bb24-32c495252f22",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85d967cc-42f8-49e6-9705-7f46ac900f1d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"order_type\": \"One-Time\",\n  \"po_number\": \"268758test2\",\n  \"re_encumber\": false,\n  \"total_estimated_price\": 100.99,\n  \"total_items\": 2,\n  \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n  \"workflow_status\": \"Pending\",\n  \"po_lines\": [\n    {\n      \"id\": \"{{poline_id}}\",\n      \"acquisition_method\": \"Purchase At Vendor System\",\n      \"adjustment\": {\n            \"credit\": 0,\n            \"discount\": 0,\n            \"insurance\": 0,\n            \"invoice_id\": \"2d6d495c-c237-476f-aa48-57f7cbf74ca4\",\n            \"overhead\": 0,\n            \"shipment\": 0,\n            \"tax_1\": 0,\n            \"tax_2\": 0,\n            \"use_pro_rate\": false\n        },\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellation_restriction\": false,\n      \"cancellation_restriction_note\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributor_type\": \"fbdd42a8-e47d-4694-b448-cc571d1b44c3\"\n        }\n      ],\n      \"cost\": {\n        \"list_price\": 24.99,\n        \"currency\": \"USD\",\n        \"quantity_physical\": 1,\n        \"quantity_electronic\": 1,\n        \"po_line_estimated_price\": 49.98\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receiving_note\": \"ABCDEFGHIJKL\",\n        \"product_ids\": [\n          {\n            \"product_id\": \"9780764354113\",\n            \"product_id_type\": \"ISBN\"\n          }\n        ],\n        \"material_types\": [\n          \"1a54b431-2e4f-452d-9cae-9cee66c9a892\"\n        ],\n        \"subscription_from\": \"2018-10-09T00:00:00.000Z\",\n        \"subscription_interval\": 824,\n        \"subscription_to\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fund_distribution\": [\n        {\n          \"code\": \"HIST\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"location\": {\n        \"location_id\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantity\": 2,\n        \"quantity_electronic\": 1,\n        \"quantity_physical\": 1\n      },\n      \"order_format\": \"Physical Resource\",\n      \"owner\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n      \"payment_status\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"material_supplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receipt_due\": \"2018-10-10T00:00:00.000Z\"\n      },\n      \"po_line_description\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"po_line_number\": \"268758-03\",\n      \"publication_date\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receipt_date\": \"2018-10-09T00:00:00.000Z\",\n      \"receipt_status\": \"Awaiting Receipt\", \n      \"reporting_codes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendor_detail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"note_from_vendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"ref_number\": \"123456-78\",\n        \"ref_number_type\": \"Supplier's unique order line reference number\",\n        \"vendor_account\": \"8910-10\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"1 po_line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate po_line_number\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order and verify adjustments",
							"item": [
								{
									"name": "Update order changing adjustment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"pm.environment.set(\"adjustment_credit_update\", 1.0);",
													"pm.environment.set(\"adjustment_discount_update\", 1.0);",
													"pm.environment.set(\"adjustment_insurance_update\", 1.0);",
													"pm.environment.set(\"adjustment_overhead_update\",1.0);",
													"pm.environment.set(\"adjustment_shipment_update\",1.0);",
													"pm.environment.set(\"adjustment_tax_1_update\",10.0);",
													"pm.environment.set(\"adjustment_tax_2_update\",10.0);",
													"pm.environment.set(\"adjustment_update_pro_rate\", true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"order_type\": \"One-Time\",\n  \"po_number\": {{complete_order_po_number}},\n  \"re_encumber\": false,\n  \"total_estimated_price\": 100.99,\n  \"total_items\": 2,\n  \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n  \"workflow_status\": \"Pending\",\n  \"po_lines\": [\n    {\n      \"acquisition_method\": \"Purchase At Vendor System\",\n      \"adjustment\": {\n        \"credit\": {{adjustment_credit_update}},\n        \"discount\": {{adjustment_discount_update}},\n        \"insurance\": {{adjustment_insurance_update}},\n        \"invoice_id\": \"2d6d495c-c237-476f-aa48-57f7cbf74ca4\",\n        \"overhead\": {{adjustment_overhead_update}},\n        \"shipment\": {{adjustment_shipment_update}},\n        \"tax_1\": {{adjustment_tax_1_update}},\n        \"tax_2\": {{adjustment_tax_2_update}},\n        \"use_pro_rate\": {{adjustment_update_pro_rate}}\n      },\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellation_restriction\": false,\n      \"cancellation_restriction_note\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributor_type\": \"fbdd42a8-e47d-4694-b448-cc571d1b44c3\"\n        }\n      ],\n      \"cost\": {\n        \"list_price\": 24.99,\n        \"currency\": \"USD\",\n        \"quantity_physical\": 1,\n        \"quantity_electronic\": 1,\n        \"po_line_estimated_price\": 49.98\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receiving_note\": \"ABCDEFGHIJKL\",\n        \"product_ids\": [\n          {\n            \"product_id\": \"9780764354113\",\n            \"product_id_type\": \"ISBN\"\n          }\n        ],\n        \"material_types\": [\n          \"1a54b431-2e4f-452d-9cae-9cee66c9a892\"\n        ],\n        \"subscription_from\": \"2018-10-09T00:00:00.000Z\",\n        \"subscription_interval\": 824,\n        \"subscription_to\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fund_distribution\": [\n        {\n          \"code\": \"HIST\",\n          \"percentage\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"percentage\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"location\": {\n        \"location_id\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantity\": 2,\n        \"quantity_electronic\": 1,\n        \"quantity_physical\": 1\n      },\n      \"order_format\": \"Physical Resource\",\n      \"owner\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n      \"payment_status\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"material_supplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receipt_due\": \"2018-10-10T00:00:00.000Z\"\n      },\n      \"po_line_description\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"po_line_number\": \"268758-03\",\n      \"publication_date\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receipt_date\": \"2018-10-09T00:00:00.000Z\",\n      \"receipt_status\": \"Awaiting Receipt\", \n      \"reporting_codes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": {\n        \"code\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZABC\",\n        \"description\": \"ABCDEFGHIJKLMNO\"\n      },\n      \"tags\": [\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFG\",\n        \"ABCDEFGHIJKLMNOPQRSTU\",\n        \"ABCDEFGHIJKLMNO\"\n      ],\n      \"title\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendor_detail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"note_from_vendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"ref_number\": \"123456-78\",\n        \"ref_number_type\": \"Supplier's unique order line reference number\",\n        \"vendor_account\": \"8910-10\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate updated adjustment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate that response contains updated adjustment\", function () {    ",
													"    pm.response.to.have.jsonBody(\"adjustment.credit\", pm.environment.get(\"adjustment_credit_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.discount\", pm.environment.get(\"adjustment_discount_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.insurance\", pm.environment.get(\"adjustment_insurance_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.overhead\", pm.environment.get(\"adjustment_overhead_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.shipment\", pm.environment.get(\"adjustment_shipment_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.tax_1\", pm.environment.get(\"adjustment_tax_1_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.tax_2\", pm.environment.get(\"adjustment_tax_2_update\"));",
													"    pm.response.to.have.jsonBody(\"adjustment.use_pro_rate\", pm.environment.get(\"adjustment_update_pro_rate\"));",
													"}); ",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"po_lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b82e58b2-e7bc-42fd-9431-8f52a3158f19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e52c84d-bd9a-4522-bd46-8bdc423b9491",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new po_number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"pm.globals.set(\"po_number\", \"newponumber\");",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"po_number\": \"{{po_number}}\",\n    \"order_type\": \"Ongoing\",\n    \"re_encumber\": false,\n    \"total_estimated_price\": 99.99,\n    \"total_items\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflow_status\": \"Pending\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate po_number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate po_number\", function() {",
													"    pm.expect(jsonData.po_number).to.equal(pm.globals.get(\"po_number\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assigned_to\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"po_number\": \"{{po_number}}\",\n    \"order_type\": \"Ongoing\",\n    \"re_encumber\": false,\n    \"total_estimated_price\": 99.99,\n    \"total_items\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflow_status\": \"Pending\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"complete_order_id\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate po_line_number\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Url",
												"type": "text",
												"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "text/plain",
												"disabled": true
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"po_number\": \"{{po_number}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"var jsonData = pm.response.json();",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.po_lines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{complete_order_id}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4c80dcd-5979-4caa-9226-16a94cd885a8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5cdf6bc0-c660-4bec-be5c-440eb74bfe55",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflow_status = \"Pending\";",
											"        order = utils.deletePoNumber(order);",
											"",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"po_lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"another_complete_order_id\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.po_number).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.total_items).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"        let order  = utils.prepareOrder(res.json());",
											"        // Set PO Line numbers manually for now",
											"        order.po_lines[0].po_line_number = pendingOrder.po_lines[0].po_line_number + 1;",
											"        order.po_lines[1].po_line_number = pendingOrder.po_lines[1].po_line_number + 1;",
											"        // Few more cases for MODORDERS-117",
											"        order.po_lines[0].order_format = \"Physical Resource\";",
											"        order.po_lines[1].order_format = \"Other\";",
											"",
											"        // add 2 new PO lines",
											"        pendingOrder.po_lines = pendingOrder.po_lines.concat(order.po_lines);",
											"        // Set Open status",
											"        pendingOrder.workflow_status = \"Open\";",
											"",
											"        pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"        pm.globals.unset(\"another_complete_order_content\");",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    pm.sendRequest({",
											"        url: pm.request.url,",
											"            method: \"GET\",",
											"            header: {",
											"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
											"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
											"            }",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4, true);",
											"    }",
											"    );",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{another_complete_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{another_complete_order_id}}"
									]
								},
								"description": "PUT /orders/composite-orders/id requests that return 204"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Create Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflow_status = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2, true);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"complete_open_order_id\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.po_number).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.total_items).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117))."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"po_number\" : \"NewPO111NewPO\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get po_number",
							"event": [
								{
									"listen": "test",
									"script": {
                                      "id": "9e9d47e7-02ab-4874-9914-a9d55ae25bd9",
                                      "exec": [
                                        "let utils = eval(globals.loadUtils);\r",
                                        "\r",
                                        "var jsonData = pm.response.json();\r",
                                        "\r",
                                        "// 1. Verify response status\r",
                                        "pm.test(\"First response status code is 200\", function () {\r",
                                        "    pm.response.to.have.status(200);\r",
                                        "});\r",
                                        "\r",
                                        "// 2. Validate PoNumber schema\r",
                                        "var schema = JSON.parse(globals.schema_po_number_content);\r",
                                        "pm.test('PoNumber schema is valid', function() {\r",
                                        "  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
                                        "});\r",
                                        "\r",
                                        "//3.  Verify po_number generation process\r",
                                        "let endpoint = utils.buildOkapiUrl(\"/orders/po-number\");\r",
                                        "\r",
                                        "const getPoNumberRequest = {\r",
                                        "  url: endpoint,\r",
                                        "  method: \"GET\",\r",
                                        "  header: [\"X-Okapi-Tenant:\" + pm.environment.get(\"xokapitenant\"),\r",
                                        "  \"Content-Type:application/json\",\r",
                                        "  \"X-Okapi-Token:\" + pm.environment.get(\"xokapitoken\")],\r",
                                        "};\r",
                                        "\r",
                                        "pm.test(\"Second response status code is 200\", function () {\r",
                                        "    pm.sendRequest(getPoNumberRequest, function (err, res) {\r",
                                        "        pm.response.to.have.status(200);\r",
                                        "        console.log(\"Second request po_number : \" + res.json().po_number);\r",
                                        "        pm.test(\"po_numbers are not same\", function () {\r",
                                        "            pm.expect(jsonData.po_number).to.not.eql(res.json().po_number);\r",
                                        "        });\r",
                                        "    });\r",
                                        "});\r",
                                        ""
                                      ],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98ec7aae-aa2c-45b6-8ecb-3e690ab56bf2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchase_orders).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"var jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchase_orders.length; i++) {",
											"    \tpm.expect(jsonData.purchase_orders[i].workflow_status).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflow_status==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflow_status==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/orders/composite-orders/id - bad ID - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
								"exec": [
									"pm.test(\"Status code is 400 - resource does not exist\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error string in response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
									"    pm.expect(pm.response.text()).to.include(\"fb40b2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/fb40b2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"fb40b2"
							]
						},
						"description": "GET /orders/composite-orders/id requests that returns 404"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/id - bad ID - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
								"exec": [
									"pm.test(\"Status code is 400 - resource does not exist\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error string in response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
									"    pm.expect(pm.response.text()).to.include(\"fb40b2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/fb40b2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"fb40b2"
							]
						},
						"description": "GET /orders/composite-orders/id requests that returns 404"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/id - bad ID - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
								"exec": [
									"pm.test(\"Status code is 400 - resource does not exist\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error string in response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
									"    pm.expect(pm.response.text()).to.include(\"fb40b2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/fb40b2",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"fb40b2"
							]
						},
						"description": "GET /orders/composite-orders/id requests that returns 404"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/{{complete_order_id}} - valid token, invalid tenant - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea0cb79-8f57-490d-b2a9-c368ac95914a",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "fs12345678"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 400"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/{{complete_order_id}} - valid token, missing tenant - 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63145320-5160-4511-b040-bd72005f8468",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/{{complete_order_id}} - invalid token - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e41e5c9e-c396-4f1e-81ff-10b79f737233",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id request that return 401"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/id - invalid order ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c51240b-34ce-4a8b-9db1-a1150320f0fe",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{$guid}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 404"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/ - empty order ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								""
							]
						},
						"description": "GET /orders/composite-orders/ requests that return 404"
					},
					"response": []
				},
				{
					"name": "/orders/composite-orders/id - empty po_number - 422",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
								"exec": [
									"pm.variables.set(\"poline_id\", eval(globals.loadUtils).getLastPoLineId());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_order_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - deleted line - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"{{$guid}}"
							]
						},
						"description": "GET /orders/order-lines/ requests that return 404"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - deleted line - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"{{$guid}}"
							]
						},
						"description": "GET /orders/order-lines/ requests that return 404"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - empty polineId - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								""
							]
						},
						"description": "GET /orders/order-lines/ requests that return 404"
					},
					"response": []
				},
				{
					"name": "Add POLine to existing order for further tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    eval(globals.loadUtils).rememberPoLineId(pm.response.json());",
									"});",
									"",
									"pm.test(\"Validate that response contains desired data\", function () {",
									"    let line = pm.response.json();",
									"    pm.expect(line.reporting_codes).to.have.lengthOf(2);",
									"    pm.expect(line.location).to.exist;",
									"    pm.globals.set(\"po_line_for_negative_tests\", JSON.stringify(line));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"location\" : {\n      \"quantity\" : 1,\n      \"quantity_electronic\" : 1,\n      \"quantity_physical\" : 0\n    },\n    \"purchase_order_id\" : \"{{complete_order_id}}\",\n\t\"reporting_codes\": [\n\t\t{\n\t\t  \"code\": \"CODE1\",\n\t\t  \"description\": \"ABCDEF\"\n\t\t},\n\t\t{\n\t\t  \"code\": \"CODE2\",\n\t\t  \"description\": \"ABCDE\"\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines"
							]
						},
						"description": "GET /orders/order-lines/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - bad id format in body - 422",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
								"exec": [
									"pm.variables.set(\"poline_id\", eval(globals.loadUtils).getLastPoLineId());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"bad-id\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"{{poline_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - bad content - 422",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
								"exec": [
									"pm.variables.set(\"poline_id\", eval(globals.loadUtils).getLastPoLineId());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"nonexistent_property\": \"nonexistent_property_value\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"{{poline_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/orders-storage/reporting_codes/id - deleted reporting code for further tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									"pm.variables.set(\"reporting_code\", JSON.parse(globals.po_line_for_negative_tests).reporting_codes[0].id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/reporting_codes/{{reporting_code}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"reporting_codes",
								"{{reporting_code}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - update removed sub-object - 500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
								"exec": [
									"let line = JSON.parse(globals.po_line_for_negative_tests);",
									"line.po_line_description =\"Description\";",
									"pm.variables.set(\"po_line_for_negative_tests\", JSON.stringify(line));",
									"pm.variables.set(\"poline_id\", line.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Error in body as json\", function () {",
									"    pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_line_for_negative_tests}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"{{poline_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/polineId - verify that line partially updated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.variables.set(\"poline_id\", utils.getLastPoLineId());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"po_line has updates\", function () {",
									"    let line = pm.response.json();",
									"    pm.expect(line.location).to.exist;",
									"    pm.expect(line.po_line_description).to.exist;",
									"    pm.expect(line.reporting_codes).to.have.lengthOf(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poline_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"{{poline_id}}"
							]
						},
						"description": "GET /orders/order-lines/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - invalid polineId - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Incorrect parameter pattern error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
									"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"po1ineid-with-eror-r400-000000000000"
							]
						},
						"description": "GET /orders/order-lines/ requests that return 422"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - invalid polineId - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Incorrect parameter pattern error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
									"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"po1ineid-with-eror-r400-000000000000"
							]
						},
						"description": "GET /orders/order-lines/ requests that return 422"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - invalid polineId - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Incorrect parameter pattern error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
									"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines",
								"po1ineid-with-eror-r400-000000000000"
							]
						},
						"description": "GET /orders/order-lines requests that return 422"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - invalid orderId in line - 422",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"exec": [
									"var uuid = require('uuid');",
									"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).po_lines[0];",
									"line.purchase_order_id = \"\";",
									"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{po_line_listed_print_monograph}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines"
							]
						},
						"description": "GET /orders/order-lines/id requests that return 422"
					},
					"response": []
				},
				{
					"name": "/orders/order-lines/lineId - invalid content - 422",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"One error expected\", function() {",
									"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": \"123\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"order-lines"
							]
						},
						"description": "GET /orders/order-lines/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "POST /orders/po-number/validate- existing PO Number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"po_number\" : {{another_complete_order_id}}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"po-number",
								"validate"
							]
						},
						"description": "Return a 400 if an existing PO Number is supplied"
					},
					"response": []
				},
				{
					"name": "POST /orders/po-number/validate- invalid PONumber",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"po_number\" : \"12-12-13\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"po-number",
								"validate"
							]
						},
						"description": "Return a 422 when an invalid PO Number is specified"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs for oai-pmh\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \" + currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.configs.codes;",
											"let originalConfigs = pm.environment.get(\"mod-orders-configs\") ? JSON.parse(pm.environment.get(\"mod-orders-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configCode = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByCode(originalConfigs, configCode);",
											"    if (originalConfig) {",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByCode(currentConfigs, configCode).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted with code=\" + configCode);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Pending order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete Pending to Open order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.sendRequest({",
									"        url: utils.buildOkapiUrl(\"/orders/composite-orders/\" + pm.globals.get(\"another_complete_order_id\")),",
									"        method: \"GET\",",
									"        header: {",
									"            \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
									"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
									"        }",
									"    },",
									"    function (err, res) {",
									"        let order  = res.json();",
									"        utils.deleteInventoryInstances(order);",
									"        utils.deleteInventoryItems(order);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{another_complete_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{another_complete_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Delete Open order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.sendRequest({",
									"        url: utils.buildOkapiUrl(\"/orders/composite-orders/\" + pm.globals.get(\"complete_open_order_id\")),",
									"        method: \"GET\",",
									"        header: {",
									"            \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
									"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
									"        }",
									"    },",
									"    function (err, res) {",
									"        let order  = res.json();",
									"        utils.deleteInventoryInstances(order);",
									"        utils.deleteInventoryItems(order);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{complete_open_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders",
								"composite-orders",
								"{{complete_open_order_id}}"
							]
						},
						"description": "GET /orders/composite-orders/id requests that return 204"
					},
					"response": []
				},
				{
					"name": "Verify no lines left in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"let lineId = utils.getLastPoLineId();",
									"if (lineId) {",
									"    pm.variables.set(\"complete_poline_id\", lineId);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Verify that no lines found\", function () {",
									"    pm.expect(pm.response.json().total_records).to.equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/po_lines?query=purchase_order_id=={{complete_order_id}} or purchase_order_id=={{another_complete_order_id}} or purchase_order_id=={{complete_open_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"po_lines"
							],
							"query": [
								{
									"key": "query",
									"value": "purchase_order_id=={{complete_order_id}} or purchase_order_id=={{another_complete_order_id}} or purchase_order_id=={{complete_open_order_id}}"
								}
							]
						},
						"description": "GET /orders/id requests that return 200"
					},
					"response": []
				},
				{
					"name": "Verify that orders deleted in storage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"exec": [
									"pm.test(\"Verify that no orders found\", function () {",
									"    pm.expect(pm.response.json().total_records).to.equal(0);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/purchase_orders?query=id=={{complete_order_id}} or id=={{another_complete_order_id}} or id=={{complete_open_order_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"orders-storage",
								"purchase_orders"
							],
							"query": [
								{
									"key": "query",
									"value": "id=={{complete_order_id}} or id=={{another_complete_order_id}} or id=={{complete_open_order_id}}"
								}
							]
						},
						"description": "GET /orders-storage/purchase_orders returns a 404 after delete"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        codes: [\"poLines-limit\"],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"code\": \"\",",
					"            \"description\": \"Test Config Description\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        console.log(\"Preparing order. Number of PO lines: \" + order.po_lines.length);",
					"",
					"        for(var i = 0; i < order.po_lines.length; i++) {",
					"            utils.preparePoLine(order.po_lines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchase_order_id;",
					"        utils._deleteSubObjectIds(poLine.adjustment);",
					"        utils._deleteSubObjectIds(poLine.cost);",
					"        utils._deleteSubObjectIds(poLine.details);",
					"        utils._deleteSubObjectIds(poLine.eresource);",
					"        utils._deleteSubObjectIds(poLine.location);",
					"        utils._deleteSubObjectIds(poLine.physical);",
					"        utils._deleteSubObjectIds(poLine.source);",
					"        utils._deleteSubObjectIds(poLine.vendor_detail);",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.claims);",
					"        utils._deleteSubObjectsIds(poLine.fund_distribution);",
					"        utils._deleteSubObjectsIds(poLine.reporting_codes);",
					"",
					"        // Add missing data",
					"        if (!poLine.receipt_date) {",
					"            poLine.receipt_date = \"2020-10-10T00:00:00.000Z\";",
					"        }",
					"        if (!poLine.physical) {",
					"            poLine.physical = {",
					"                \"volumes\": [",
					"                  \"vol.1\"",
					"                ],",
					"                \"material_supplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",",
					"                \"receipt_due\": \"2020-10-10T00:00:00.000Z\"",
					"            };",
					"        }",
					"        console.log(\"Updated PO Line:\" + JSON.stringify(poLine));",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function(orderId) {",
					"        return {",
					"            \"po_line_number\": \"tempnumber-123\",",
					"            \"purchase_order_id\": orderId,",
					"            \"source\": {",
					"                \"code\": \"FOLIO\"",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function(order, expectedCount) {",
					"        utils.validatePoLines(order, expectedCount, false);",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function(order, expectedCount, checkInventory) {",
					"        console.log(\"Validating PO Lines for order with PO number=\" + order.po_number + \". Expected lines count=\" + expectedCount + \". Inventory check required: \" + checkInventory);",
					"        pm.expect(order.po_lines).to.have.lengthOf(expectedCount);",
					"        for(i = 0; i < order.po_lines.length; i++) {",
					"            let poLine = order.po_lines[i];",
					"            pm.test(\"Validating PO Line with number=\" + poLine.po_line_number, function () {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchase_order_id).to.equal(order.id);",
					"                utils.validatePoLineSubObjetcsPresence(poLine);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"                ",
					"                if (checkInventory) {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    pm.expect(poLine.instance_id).to.not.exist;",
					"                }",
					"            });",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function(poLine) {",
					"      // Instance should created only",
					"      if (utils.calculateExpectedItemsQuantity(poLine) > 0) {",
					"        pm.expect(poLine.instance_id).to.exist;",
					"        pm.sendRequest({",
					"                url: utils.buildOkapiUrl(\"/inventory/instances/\" + poLine.instance_id),",
					"                method: \"GET\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            function (err, res) {",
					"                pm.test(\"Instance Record exist for PO Line with number=\" + poLine.po_line_number, function () {",
					"                    pm.expect(res.json()).to.exist;",
					"                    pm.expect(res.json().id).to.equal(poLine.instance_id);",
					"",
					"                    // Now check items",
					"                    utils.validateInventoryItems(poLine);",
					"                });",
					"            }",
					"        );",
					"      } else {",
					"        pm.expect(poLine.instance_id).to.not.exist;",
					"      }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function(poLine) {",
					"        pm.expect(poLine.instance_id).to.exist;",
					"        pm.sendRequest({",
					"                url: utils.buildOkapiUrl(\"/item-storage/items?limit=1&query=purchaseOrderLineIdentifier==\" + poLine.id),",
					"                method: \"GET\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            function (err, res) {",
					"                pm.test(\"Item Records exist for PO Line with number=\" + poLine.po_line_number, function () {",
					"                    let body = res.json();",
					"                    pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                    let expectedCount = utils.calculateExpectedItemsQuantity(poLine);",
					"                    pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                });",
					"            }",
					"        );",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-117",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function(poLine) {",
					"        switch (poLine.order_format) {",
					"            case \"P/E Mix\":",
					"                return utils.getPhysicalQuantity(poLine) + utils.getElectronicQuantity(poLine);",
					"            case \"Physical Resource\":",
					"                return utils.getPhysicalQuantity(poLine);",
					"            case \"Electronic Resource\":",
					"                return utils.getElectronicQuantity(poLine);",
					"            case \"Other\":",
					"                return 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalQuantity = function(poLine) {",
					"        let location = poLine.location;",
					"        if (location && (location.quantity_physical > 0)) {",
					"            return location.quantity_physical;",
					"        }",
					"        return 0;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicQuantity = function(poLine) {",
					"        if (poLine.eresource && poLine.eresource.create_inventory) {",
					"            let location = poLine.location;",
					"            if (location && (location.quantity_electronic > 0)) {",
					"                return location.quantity_electronic;",
					"            }",
					"        }",
					"        return 0;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function(poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisition_method, \"acquisition_method expected\").to.exist;",
					"        pm.expect(poLine.adjustment, \"adjustment expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellation_restriction, \"cancellation_restriction expected\").to.exist;",
					"        pm.expect(poLine.cancellation_restriction_note, \"cancellation_restriction_note expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fund_distribution, \"fund_distribution expected\").to.exist;",
					"        pm.expect(poLine.location, \"location expected\").to.exist;",
					"        pm.expect(poLine.order_format, \"order_format expected\").to.exist;",
					"        pm.expect(poLine.owner, \"owner expected\").to.exist;",
					"        pm.expect(poLine.payment_status, \"payment_status expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.po_line_description, \"po_line_description expected\").to.exist;",
					"        pm.expect(poLine.po_line_number, \"po_line_number expected\").to.exist;",
					"        pm.expect(poLine.publication_date, \"publication_date expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receipt_date, \"receipt_date expected\").to.exist;",
					"        pm.expect(poLine.receipt_status, \"receipt_status expected\").to.exist;",
					"        pm.expect(poLine.reporting_codes, \"reporting_codes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.title, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendor_detail, \"vendor_detail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function(poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchase_order_id, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source not expected\").to.exist;",
					"        pm.expect(poLine.acquisition_method, \"acquisition_method not expected\").to.not.exist;",
					"        pm.expect(poLine.adjustment, \"adjustment not expected\").to.not.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellation_restriction, \"cancellation_restriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellation_restriction_note, \"cancellation_restriction_note not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost not expected\").to.not.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fund_distribution, \"fund_distribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.location, \"location not expected\").to.not.exist;",
					"        pm.expect(poLine.order_format, \"order_format not expected\").to.not.exist;",
					"        pm.expect(poLine.owner, \"owner not expected\").to.not.exist;",
					"        pm.expect(poLine.payment_status, \"payment_status not expected\").to.not.exist;",
					"        pm.expect(poLine.physical, \"physical not expected\").to.not.exist;",
					"        pm.expect(poLine.po_line_description, \"po_line_description not expected\").to.not.exist;",
					"        pm.expect(poLine.po_line_number, \"po_line_number is expected\").to.exist;",
					"        pm.expect(poLine.publication_date, \"publication_date not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receipt_date, \"receipt_date not expected\").to.not.exist;",
					"        pm.expect(poLine.receipt_status, \"receipt_status not expected\").to.not.exist;",
					"        pm.expect(poLine.reporting_codes, \"reporting_codes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.rush, \"rush not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.title, \"title not expected\").to.not.exist;",
					"        pm.expect(poLine.vendor_detail, \"vendor_detail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `complete_poline_ids` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function(poLine) {",
					"        if (poLine && poLine.id) {",
					"            let complete_poline_ids = pm.globals.get(\"complete_poline_ids\") ? JSON.parse(pm.globals.get(\"complete_poline_ids\")) : [];",
					"            complete_poline_ids.push(poLine.id);",
					"            pm.globals.set(\"complete_poline_ids\", JSON.stringify(complete_poline_ids));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `complete_poline_ids` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function(withRemoval) {",
					"        let complete_poline_ids = globals.complete_poline_ids ? JSON.parse(globals.complete_poline_ids) : [];",
					"        console.log(\"Number of PO lines created: \" + complete_poline_ids.length);",
					"        if (complete_poline_ids.length > 0) {",
					"            let lineId = complete_poline_ids.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"complete_poline_ids\", JSON.stringify(complete_poline_ids));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function(jsonData) {",
					"        let schema = JSON.parse(globals.schema_composite_po_line_content);",
					"        utils._validateAgainstSchema(jsonData, schema);",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function(jsonData) {",
					"        let schema = JSON.parse(globals.schema_composite_purchase_order_content);",
					"        utils._validateAgainstSchema(jsonData, schema);",
					"    };",
					"    ",
					"    /**",
					"     * Validates the PO Lines number  ",
					"     */",
					"     utils.validatePoLinesNumber = function(order) {",
					"         let poLineSuffix = \"(-[0-9]{1,3})\";",
					"         let regex = new RegExp(order.po_number + poLineSuffix);",
					"         for(i = 0; i < order.po_lines.length; i++) {",
					"            let poLineNumber = order.po_lines[i].po_line_number;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"     }",
					"",
					"    /**",
					"     * Deletes Instances linked by PO lines from Inventory",
					"     */",
					"    utils.deleteInventoryInstances = function(order) {",
					"      order.po_lines.forEach(function(line) {",
					"        if (line.instance_id) {",
					"          utils.processDeleteRequest(\"/inventory/instances/\" + line.instance_id, \"Instance should be successfully deleted\");",
					"        }",
					"        });  ",
					"    };",
					"",
					"    /**",
					"     * Deletes Inventory Items created for PO lines",
					"     */",
					"    utils.deleteInventoryItems = function(order) {",
					"      order.po_lines.forEach(function(line) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/item-storage/items?limit=100&query=purchaseOrderLineIdentifier==\" + line.id),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\")",
					"            }",
					"        }, function (err, response) {",
					"            pm.test(\"Delete Items for PO Line with id=\" + line.id, function () {",
					"                pm.expect(response.code).to.eql(200);",
					"                response.json().items.forEach(function(item) {",
					"                    utils.processDeleteRequest(\"/item-storage/items/\" + item.id, \"Item should be successfully deleted. ID=\" + item.id);",
					"                });",
					"                // Test expected items count as the last step to make sure that delete requests are sent",
					"                let foundItems = response.json().totalRecords;",
					"                let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"                pm.expect(foundItems, \"Expected items count does not match to found\").to.equal(expectedCount);",
					"            });",
					"        });",
					"      });  ",
					"    };",
					"",
					"    utils.processDeleteRequest = function(path, message) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(path),",
					"            method: \"DELETE\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Accept-Encoding\": \"identity\"",
					"            }",
					"        }, function (err, response) {",
					"            pm.test(message ? message : \"Record deleted\", function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    }",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigByCode = function(configs, code) {",
					"        let config = configs.filter(value => value.code === code);",
					"        return config.length > 0 ? config[0] : null;",
					"    }",
					"    ",
					"    utils.createConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries\"),",
					"            method: \"POST\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function (err, response) {",
					"            pm.test(\"Config created\", function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    }",
					"    ",
					"    utils.updateConfig = function(body, id) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries/\" + id),",
					"            method: \"PUT\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function (err, response) {",
					"            pm.test(\"Config updated\", function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    }",
					"",
					"    utils.deleteConfig = function(id) {",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id, \"Config deleted\");",
					"    }",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"schema_composite_purchase_order_content\");",
					"        pm.globals.unset(\"schema_adjustment_content\");",
					"        pm.globals.unset(\"schema_alert_content\");",
					"        pm.globals.unset(\"schema_composite_po_line_content\");",
					"        pm.globals.unset(\"schema_cost_content\");",
					"        pm.globals.unset(\"schema_claim_content\");",
					"        pm.globals.unset(\"schema_details_content\");",
					"        pm.globals.unset(\"schema_eresource_content\");",
					"        pm.globals.unset(\"schema_fund_distribution_content\");",
					"        pm.globals.unset(\"schema_location_content\");",
					"        pm.globals.unset(\"schema_physical_content\");",
					"        pm.globals.unset(\"schema_renewal_content\");",
					"        pm.globals.unset(\"schema_reporting_code_content\");",
					"        pm.globals.unset(\"schema_source_content\");",
					"        pm.globals.unset(\"schema_vendor_detail_content\");",
					"        pm.globals.unset(\"schema_metadata_content\");",
					"        pm.globals.unset(\"schema_po_number_content\");",
					"        pm.globals.unset(\"empty_order_id\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"complete_poline_ids\");",
					"        pm.globals.unset(\"complete_order_id\");",
					"        pm.globals.unset(\"another_complete_order_id\");",
					"        pm.globals.unset(\"complete_open_order_id\");",
					"        pm.globals.unset(\"po_line_for_negative_tests\");",
					"        pm.globals.unset(\"complete_order_po_number\");",
					"        pm.globals.unset(\"new_empty_po_line\");",
					"        pm.globals.unset(\"po_number\");",
					"        ",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"adjustment_credit_update\");",
					"        pm.environment.unset(\"adjustment_discount_update\");",
					"        pm.environment.unset(\"adjustment_insurance_update\");",
					"        pm.environment.unset(\"adjustment_overhead_update\");",
					"        pm.environment.unset(\"adjustment_shipment_update\");",
					"        pm.environment.unset(\"adjustment_tax_1_update\");",
					"        pm.environment.unset(\"adjustment_tax_2_update\");",
					"        pm.environment.unset(\"adjustment_update_pro_rate\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        //https://github.com/folio-org/acq-models/blob/master/composite_purchase_order.json",
					"        //https://github.com/folio-org/acq-models/blob/master/composite_po_line.json",
					"        tv4.addSchema(\"composite_po_line.json\", JSON.parse(globals.schema_composite_po_line_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/adjustment.json\", JSON.parse(globals.schema_adjustment_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/alert.json\", JSON.parse(globals.schema_alert_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/claim.json\", JSON.parse(globals.schema_claim_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/cost.json\", JSON.parse(globals.schema_cost_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/details.json\", JSON.parse(globals.schema_details_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/eresource.json\", JSON.parse(globals.schema_eresource_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/fund_distribution.json\", JSON.parse(globals.schema_fund_distribution_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/location.json\", JSON.parse(globals.schema_location_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/physical.json\", JSON.parse(globals.schema_physical_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/renewal.json\", JSON.parse(globals.schema_renewal_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/reporting_code.json\", JSON.parse(globals.schema_reporting_code_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/source.json\", JSON.parse(globals.schema_source_content));",
					"        tv4.addSchema(\"mod-orders-storage/schemas/vendor_detail.json\", JSON.parse(globals.schema_vendor_detail_content));",
					"        tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(globals.schema_metadata_content));",
					"    };",
					"",
					"    /**",
					"     * Internal function to delete 'id' and 'po_line_id' in sub-object",
					"     */",
					"    utils._deleteSubObjectIds = function(data) {",
					"        if (data) {",
					"            delete data.id;",
					"            delete data.po_line_id;",
					"        }",
					"    }",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            for(i = 0; i < data.length; i++) {",
					"                utils._deleteSubObjectIds(data[i]);",
					"            }",
					"        }",
					"    }",
					"    ",
					"     utils.deletePoNumber = function(order) {",
					"        delete order.po_number;",
					"        ",
					"        return order;",
					"    }",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2b44d336-63ab-43be-8c19-0533227608a7",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "555e1179-ce0b-474f-bbcc-3f85dfa612d7",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org/acq-models/master",
			"type": "string"
		},
		{
			"id": "723ebcf3-8198-46d2-90b5-6181cff19d58",
			"key": "schema_composite_purchase_order",
			"value": "composite_purchase_order.json",
			"type": "string"
		},
		{
			"id": "33f06ce7-b98a-42db-b39c-a7a4c76ec811",
			"key": "schema_adjustment",
			"value": "adjustment.json",
			"type": "string"
		},
		{
			"id": "294efbdd-9be4-4cc2-884e-6915d2b9fbf6",
			"key": "schema_alert",
			"value": "alert.json",
			"type": "string"
		},
		{
			"id": "852a8b4a-15d1-456b-9f0a-23622c995e95",
			"key": "schema_claim",
			"value": "claim.json",
			"type": "string"
		},
		{
			"id": "e8abe68b-693e-46eb-83c1-0cee6e623b38",
			"key": "schema_composite_po_line",
			"value": "composite_po_line.json",
			"type": "string"
		},
		{
			"id": "9d18841c-9446-4197-b1be-bc9bf9c17db0",
			"key": "schema_cost",
			"value": "cost.json",
			"type": "string"
		},
		{
			"id": "fd9c5f4c-9e9f-4e5a-88d6-6cb064674a2f",
			"key": "schema_details",
			"value": "details.json",
			"type": "string"
		},
		{
			"id": "d283ef91-5dac-4a88-b176-8598efdb2e53",
			"key": "schema_eresource",
			"value": "eresource.json",
			"type": "string"
		},
		{
			"id": "6dbe0eab-bc00-4f91-a55d-619c5dfd035b",
			"key": "schema_fund_distribution",
			"value": "fund_distribution.json",
			"type": "string"
		},
		{
			"id": "e7e220ae-e73a-4dcb-be62-38562b986d21",
			"key": "schema_location",
			"value": "location.json",
			"type": "string"
		},
		{
			"id": "6e80216c-bd13-4036-865b-01d171f0c0f5",
			"key": "schema_physical",
			"value": "physical.json",
			"type": "string"
		},
		{
			"id": "86e776cf-240d-4e23-b94b-3d754af79ae4",
			"key": "schema_renewal",
			"value": "renewal.json",
			"type": "string"
		},
		{
			"id": "cc341781-d4fb-4d1a-9b7b-fe87a97d12ed",
			"key": "schema_reporting_code",
			"value": "reporting_code.json",
			"type": "string"
		},
		{
			"id": "c4dfbb88-c4fc-48f8-b3ed-61d6d8a76791",
			"key": "schema_source",
			"value": "source.json",
			"type": "string"
		},
		{
			"id": "ad2c4faf-f8e3-4dd4-9c8b-fe91c3c524b0",
			"key": "schema_vendor_detail",
			"value": "vendor_detail.json",
			"type": "string"
		},
		{
			"id": "56b10695-81d4-443d-b67f-e4416791be49",
			"key": "module",
			"value": "mod-orders-storage",
			"type": "string"
		},
		{
			"id": "60e28a13-1655-48e3-ab1d-ea446be6fa04",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "6340cfa6-f80b-492b-a1e8-bd496fe5fdfc",
			"key": "schema_po_number",
			"value": "po_number.json",
			"type": "string"
		},
		{
			"id": "0781374e-ac55-4387-aa20-36f00e79c60a",
			"key": "raml_loc",
			"value": "https://raw.githubusercontent.com/folio-org/raml/raml1.0",
			"type": "string"
		},
		{
			"id": "56cac440-b5be-4e6b-8208-ce1b77b1ef9e",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		}
	]
}