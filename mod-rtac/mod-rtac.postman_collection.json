{
	"info": {
		"_postman_id": "72dae617-9244-42a4-bc5d-5971bb9b82df",
		"name": "mod-rtac",
		"description": "Tests for mod-rtac",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Schemas",
			"item": [
				{
					"name": "schema_holding",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ffa902b8-5ba8-4035-8270-a735f424ff82",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_holding_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/mod-rtac/master/ramls/{{schema_holding}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"mod-rtac",
								"master",
								"ramls",
								"{{schema_holding}}"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "schema_holdings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85917db7-7320-4a02-9489-64a8351404c7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_holdings_content\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/mod-rtac/master/ramls/{{schema_holdings}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"mod-rtac",
								"master",
								"ramls",
								"{{schema_holdings}}"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "/rtac/ - single holding with status Checked out",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"instanceIdSingleHolding\", \"163d51fd-633f-40d3-aa5d-d5e39951409b\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Holdings exist\", function () {",
									"    pm.expect(jsonData.holdings).to.have.lengthOf(1);",
									"});",
									"",
									"pm.test(\"Required holdings data returned\", function () {",
									"    pm.expect(jsonData.holdings[0].callNumber).to.equal(\"163d51fd-633f-40d3-aa5d-d5e39951409b\");",
									"    pm.expect(jsonData.holdings[0].status).to.equal(\"Checked out\");",
									"    pm.expect(jsonData.holdings[0].id).to.equal(\"6cd4aa93-72d3-41b8-a0b2-97de03b9798d\");",
									"    pm.expect(jsonData.holdings[0].location).to.equal(\"Annex\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"holding.json\", JSON.parse(pm.variables.get(\"schema_holding_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_holdings_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/163d51fd-633f-40d3-aa5d-d5e39951409b",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"163d51fd-633f-40d3-aa5d-d5e39951409b"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - multiple holdings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"instanceIdMultipleHoldings\", \"7cac8bf1-8f72-4593-bfdb-075f59d12e60\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Multiple holdings exist\", function () {",
									"    pm.expect(jsonData.holdings).to.have.lengthOf(2);",
									"});",
									"",
									"pm.test(\"Each holding has required fields\", function(){",
									"    ",
									"    jsonData.holdings.forEach(function(element){",
									"        pm.expect(element.callNumber).to.exist;",
									"        pm.expect(element.id).to.exist;",
									"        pm.expect(element.status).to.exist;",
									"        pm.expect(element.location).to.exist;",
									"    });",
									"});",
									"",
									"pm.test(\"Statuses are \\\"Available\\\" and \\\"Checked out\\\"\", function(){",
									"    ",
									"    console.log(jsonData.holdings);",
									"    ",
									"    jsonData.holdings.forEach(function(element){",
									"        ",
									"        console.log(element);",
									"        ",
									"        if (element.id == \"7cac8bf1-8f72-4593-bfdb-075f59d12e60\"){",
									"            pm.expect(element.status).equal(\"Checked out\");",
									"            pm.expect(element.dueDate).to.exist;",
									"            pm.expect(element.dueDate).equal(\"2018-05-31T17:58:49.198+0000\");",
									"        }",
									"        else if (element.id == \"9e029caf-79c2-4d9c-9f38-89e4e12b75d0\"){",
									"            pm.expect(element.status).equal(\"Available\");",
									"        }",
									"    });",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"holding.json\", JSON.parse(pm.variables.get(\"schema_holding_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_holdings_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/{{instanceIdMultipleHoldings}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"{{instanceIdMultipleHoldings}}"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/rtac/ - bad ID - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a638bb8-dbd4-4c76-a67b-a496016ee9df",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error string in response body\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"'id' parameter is incorrect.\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/123456",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"123456"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - valid token, invalid tenant - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea0cb79-8f57-490d-b2a9-c368ac95914a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "fs12345678"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/{{instanceIdSingleHolding}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"{{instanceIdSingleHolding}}"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - valid token, missing tenant - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "63145320-5160-4511-b040-bd72005f8468",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"holdings data returned despite missing tentant, because the token contains the tenant ID\", function () {",
									"        pm.expect(jsonData.holdings).to.have.lengthOf(1);",
									"        pm.expect(jsonData.holdings[0].callNumber).to.equal(\"163d51fd-633f-40d3-aa5d-d5e39951409b\");",
									"        pm.expect(jsonData.holdings[0].status).to.equal(\"Checked out\");",
									"        pm.expect(jsonData.holdings[0].id).to.equal(\"6cd4aa93-72d3-41b8-a0b2-97de03b9798d\");",
									"        pm.expect(jsonData.holdings[0].location).to.equal(\"Annex\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"     tv4.addSchema(\"holding.json\", JSON.parse(pm.variables.get(\"schema_holding_content\")));",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_holdings_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/{{instanceIdSingleHolding}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"{{instanceIdSingleHolding}}"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - invalid token - 401",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96d5aeda-9240-4e46-8403-6b84e3d05214",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/7cac8bf1-8f72-4593-bfdb-075f59d12e60",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"7cac8bf1-8f72-4593-bfdb-075f59d12e60"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - invalid Instance ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c51240b-34ce-4a8b-9db1-a1150320f0fe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error object contains status code and expected error message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.statusCode).to.equal(404);",
									"    pm.expect(jsonData.errorMessage).to.equal(\"Not Found\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"{{$guid}}"
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - empty instance ID - 404",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"empty instance ID returns error message\", function () {",
									"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /rtac/\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								""
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "/rtac- 200 - cleanup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d0c25d5-a2a2-411e-9e04-6e89dc1bf6da",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET /rtac returns 200 status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.unset(\"xokapitoken\");",
									"pm.environment.unset(\"instanceIdSingleHolding\");",
									"pm.environment.unset(\"instanceIdMultipleHoldings\");",
									"",
									"//schema variables",
									"pm.environment.unset(\"schema_error_content\");",
									"pm.environment.unset(\"schema_errors_content\");",
									"pm.environment.unset(\"schema_holding_content\");",
									"pm.environment.unset(\"schema_holdings_content\");"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f393df87-edee-4799-9eca-8cd8722fc7cd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/rtac/{{instanceIdSingleHolding}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"rtac",
								"{{instanceIdSingleHolding}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c5fb7b5c-7672-4ac1-9e38-623cba90d999",
			"key": "mod_name",
			"value": "mod-rtac",
			"type": "string"
		},
		{
			"id": "fb3452b5-a4c8-468a-bd05-ff5a1e910852",
			"key": "schema_holding",
			"value": "holding.json",
			"type": "string"
		},
		{
			"id": "c68aa57b-410d-4aea-a9d2-290e4281f4ff",
			"key": "schema_holdings",
			"value": "holdings.json",
			"type": "string"
		},
		{
			"id": "59896a55-7b6f-4be3-b2f3-a2e07992ff99",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "859f07aa-eb9c-4c7d-96db-296ad8f215f8",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "69e76006-8617-437b-afff-95a5edec5bf0",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		}
	]
}