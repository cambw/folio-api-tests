{
	"id": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
	"name": "mod-inventory-storage",
	"description": null,
	"auth": null,
	"events": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0c7330ca-93e6-4362-aca9-67f141953e8c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b57648c1-84e3-40fe-9757-ac018aea5ca8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variables": [
		{
			"id": "612c16f2-68d1-4e64-a1a2-f44dcafb45c8",
			"key": "mod_name",
			"value": "mod-inventory-storage",
			"type": "string"
		},
		{
			"id": "ae57ba04-fb76-4d1a-9321-5e5ccdf4e31b",
			"key": "mod_version",
			"value": "v12.1.0",
			"type": "string"
		},
		{
			"id": "d9929abf-7458-463d-934f-5c411438a7c9",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "f2efe5b8-1255-4e98-bc30-2b060da4c1b8",
			"key": "errors.schemafile",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "12cf215c-55d6-4c20-b5dc-6e90c8e112f3",
			"key": "error.schemafile",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "b0232496-81ee-42f2-9da9-4fb439cf2d24",
			"key": "parameters.schemafile",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "20c69d1b-210a-4ef3-889f-48149de31202",
			"key": "schema_metadatafile",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "559f3d24-2386-4759-aaa5-1d01e774f2b1",
			"key": "classification-types.schemafile",
			"value": "classificationtypes.json",
			"type": "string"
		},
		{
			"id": "5dd248dd-37b6-4bf1-8c27-9725f25ca377",
			"key": "classification-type.schemafile",
			"value": "classificationtype.json",
			"type": "string"
		},
		{
			"id": "7ba4b682-d6b5-490b-8192-b8e6386b37c2",
			"key": "item.schemafile",
			"value": "item.json",
			"type": "string"
		},
		{
			"id": "0fd938ae-63e0-4658-afaf-08b3656d14f5",
			"key": "items.schemafile",
			"value": "items.json",
			"type": "string"
		},
		{
			"id": "49a921ae-de31-437b-bfc0-e329d9654890",
			"key": "holdingsrecord.schemafile",
			"value": "holdingsrecord.json",
			"type": "string"
		},
		{
			"id": "9f3e7523-237f-4da0-904a-1345f1ad11b7",
			"key": "holdingsrecords.schemafile",
			"value": "holdingsrecords.json",
			"type": "string"
		},
		{
			"id": "0db9207d-98fe-4b54-89a1-454d09f44c42",
			"key": "instance.schemafile",
			"value": "instance.json",
			"type": "string"
		},
		{
			"id": "ba16887b-86ff-4c78-aa99-4d64c32b6c0f",
			"key": "instances.schemafile",
			"value": "instances.json",
			"type": "string"
		},
		{
			"id": "91010ae1-b70c-4f1e-ab73-95d576370e8e",
			"key": "instanceformat.schemafile",
			"value": "instanceformat.json",
			"type": "string"
		},
		{
			"id": "0972d136-dfff-4846-bfbc-7d51a65941b6",
			"key": "instanceformats.schemafile",
			"value": "instanceformats.json",
			"type": "string"
		},
		{
			"id": "3f2f9faf-eadc-47a2-a0d0-1e48ea3c74ca",
			"key": "instancetype.schemafile",
			"value": "instancetype.json",
			"type": "string"
		},
		{
			"id": "0ad93609-4ace-49ea-ad18-f92b4a68d387",
			"key": "instancetypes.schemafile",
			"value": "instancetypes.json",
			"type": "string"
		},
		{
			"id": "688b1fd1-8747-4ffc-a193-d1221dd26476",
			"key": "materialtype.schemafile",
			"value": "materialtype.json",
			"type": "string"
		},
		{
			"id": "dd58d258-b960-461c-a5c5-d74646e6ad96",
			"key": "materialtypes.schemafile",
			"value": "materialtypes.json",
			"type": "string"
		},
		{
			"id": "a45dd28c-f5d5-4c07-a636-33bc0dd940e6",
			"key": "loantype.schemafile",
			"value": "loantype.json",
			"type": "string"
		},
		{
			"id": "3a7d6d95-dfd5-4bcb-8f2f-8522fdcb45f8",
			"key": "loantypes.schemafile",
			"value": "loantypes.json",
			"type": "string"
		}
	],
	"order": [],
	"folders_order": [
		"8697eaf6-2207-450b-a38d-be2edab8fd39",
		"4ad88661-5fdf-4bc8-a45b-9d36d3534126",
		"e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
		"1853ce5d-03ef-483d-841c-e107daca0bfa",
		"da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
		"a6549c73-9b76-4358-a93f-c18e0015f66e",
		"bb8b84e7-782d-482b-acb9-7a6428102711",
		"b03906b2-f589-42f9-826d-0349ddbe73a4",
		"318f3762-e2bd-4c02-9baa-80978c033c80",
		"36ed7f9e-4e54-4858-bc64-9bf95489a9a2",
		"95a3a069-cc47-4da4-ba70-f41b8ab15b3c",
		"e44199c7-2e20-4681-816a-71d6d762cfbb"
	],
	"folders": [
		{
			"id": "4ad88661-5fdf-4bc8-a45b-9d36d3534126",
			"name": "authentication",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"e436c460-f363-4125-80e7-f23e41f49a2f"
			],
			"folders_order": []
		},
		{
			"id": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"name": "classification-types",
			"description": "Tests for the /classification-types end point.",
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"Login error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.environment.set(\"xokapitoken-classification-types\", res.headers.get(\"X-Okapi-Token\"));",
							"        } else {",
							"            console.log(\"Login failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"713060f1-86e6-473d-9669-20bab1ed4386",
				"ddd75fa4-0022-4f06-a6ed-8896f0be5177",
				"aff6205b-551c-4a09-bbfc-fbf29f6429c1",
				"3b8be580-4374-44c2-a3d6-974303146f0c",
				"9d3e874b-c40d-498d-a08b-2b54396d682b",
				"764680b3-42aa-4ba3-96dc-b5a01a096a41",
				"0be50588-a6a4-4cfb-a333-9bd95afd038d",
				"15808dc9-6c9b-4927-91d6-00a2c8b13a9a",
				"5a842d3c-a1dc-45c7-90a0-897a4fac0c15",
				"672b4ca8-e32c-44e0-917a-bf4755d90de0",
				"caf21141-1c50-4a67-a624-a913a9262f5e",
				"e4c4df74-e79f-4038-9c19-64645bc6d9f4",
				"2e2eceaf-3151-4cad-b8c9-ffb39f62f447",
				"8d74c1d9-caab-448e-b03a-d099364ef0f4",
				"c314cb28-1822-4708-87ee-5f969bfff43a",
				"1a340e29-6c1c-40dd-ae02-ab4a2d6b4a75",
				"59885584-e484-4c00-af9f-c3df50fa19fd",
				"63798b19-c28a-474d-be66-12200086d32d",
				"e0604a7d-cbd9-4c3d-b386-65ad1d4e8531",
				"bd1bf4c9-67ef-4134-aa32-dbc618290b1c",
				"59cffc64-74fc-4136-a9b7-8a3ae49510c9",
				"9e2fd92d-8206-4380-ab88-007dea5d74c1",
				"d39251ee-ced8-4d22-a08b-911c91eb12a0",
				"e4a91395-f015-4c4a-a35d-18b0d5adc974",
				"eee40111-39e2-49b8-8d48-5116e0ac0570",
				"5e38a968-a01c-4e24-acee-58b3ca37c08f",
				"530b9f33-0e47-40ad-a5eb-da88ae4942e3",
				"af25b185-65cd-49de-b6b4-16b1d93bb1e1",
				"f20a7d7d-20ee-49af-818f-d2ed299a62d1",
				"a86c0b22-1a62-427c-89ae-172def9d9835",
				"169aab0e-f531-46c4-af8f-faa9087168a5",
				"2cced604-7882-45e3-aa61-ef175761e07f",
				"a385f64e-e5c3-4147-90d9-4c6505ebad67",
				"d5302338-b49b-4955-b63b-1a0af92c074e",
				"d9ef29ca-6d5e-4189-83d6-bcb436e835aa",
				"1c9ca99a-4660-4cd0-97b9-f36736c0aa20",
				"5c41a7c8-ee1e-4f77-802c-07373ab864f9",
				"56249b5c-b2de-4e3f-bda6-32f88e1007b8",
				"aaa7230b-86bf-42c8-ab65-7dcc03fc5344",
				"2b357e9a-7520-40f1-a6d2-d4f578e3ee83",
				"d481f3a6-945e-4e04-9810-ebd3fed21524",
				"bc513154-ce81-4bea-9b61-5621fe48873a",
				"e8f0342e-f593-4a5a-9a5c-55a67b98b9bd"
			],
			"folders_order": []
		},
		{
			"id": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"name": "holdings-storage",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "467a344f-7da8-4611-bf2e-dabc0a958f75",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f09c1a28-4014-4e09-84ae-ac2d9bfe228c",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"9004da69-9383-4d7a-ac13-cbebd4501a9b",
				"90bde655-a211-4b44-8f58-41a58ee8fd49",
				"8e963ff8-01c7-48dc-8339-95b94fe63cd9",
				"7409387f-8b01-4144-9b76-f89fd4d77e2c",
				"cbcb7084-88dc-4642-b5ff-b3b69843bd5f",
				"0af2de87-c9c9-47bf-b752-e927ca2d0c54"
			],
			"folders_order": []
		},
		{
			"id": "95a3a069-cc47-4da4-ba70-f41b8ab15b3c",
			"name": "ingest",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [],
			"folders_order": []
		},
		{
			"id": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"name": "instance-formats",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "12185ede-ab97-4edd-ad84-556a7f7f8ec3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aebca9a3-1798-4e62-adb6-4b6f1b409dc7",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"17e9c355-282e-4f33-9acb-ee32ac6314c2",
				"1ab4468f-16d6-421d-a2ec-1e49bcc6247b",
				"87517428-94d4-4bda-8323-dc1cb5eb98d0",
				"76132d69-1a47-47d6-835f-cc268a6facc1",
				"1a188073-f500-4e3c-8864-23a922df9986",
				"127502d3-2fe6-451a-9bb5-700d021b0a06",
				"c7411794-8cfb-4ee5-9ec5-d5d4ab134903"
			],
			"folders_order": []
		},
		{
			"id": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"name": "instance-storage",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4f0c45ce-cbc6-43a3-a0bb-5f3579f3a804",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3adf17a-339b-49bd-9e3d-dc37014e85b2",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"77745394-f35a-424c-b0e3-86f71963f3ee",
				"3d9fa322-9259-4307-86b3-825bc1e84fec",
				"a45b751a-54a7-4362-baae-ef07dd1bfed5",
				"392bea99-f323-428c-8132-622ae928587f",
				"93ba82e4-ff69-43a9-9f22-ba246ec3ffeb",
				"cb6d8f29-0e6a-43be-8281-13b3303c41b2",
				"b785a137-7b01-4ef0-ba28-9bf2ebeb5843"
			],
			"folders_order": []
		},
		{
			"id": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"name": "instance-types",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "284338b3-7875-435c-bf32-dd18514c3780",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "05ffafe7-0f51-44ab-8cde-fdb0fb0f1238",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"5ed53c40-7058-4228-996d-911e1c90f3f0",
				"81d28542-6181-41a0-9343-94c2c7e3b861",
				"609940a4-9e6b-48f6-82bf-55ddcde769e6",
				"52df1f2b-5dfb-4bda-9286-387fbbee1890",
				"6ed8f73b-90c5-4730-893d-4c4ee2de91b1",
				"1420a09e-f41c-4219-932a-a759c39d7226",
				"80b4d2e3-7e78-4ab5-9f9b-b647ae4c3913",
				"c3db9722-ab0c-4438-80a9-4fabafc0eabd"
			],
			"folders_order": []
		},
		{
			"id": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"name": "item-storage",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a6e69d6d-aba8-4a4e-b49d-63e7406629cd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "47b403a4-6b8c-41d3-afad-c8076ca5ef91",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"78bc205e-8c4c-48f2-9f04-be7264911bbe",
				"9b194165-514d-45e8-91a5-afbd1342641e",
				"cc6f43f9-31d8-4894-8667-1898c3dd320d",
				"23b08661-01b5-400c-8a21-bf12b2434647",
				"02542e61-db00-4520-8320-05fee0b283e4",
				"74b46d5a-efe8-4efa-a63f-56ff9b5b663d"
			],
			"folders_order": []
		},
		{
			"id": "36ed7f9e-4e54-4858-bc64-9bf95489a9a2",
			"name": "loan-type",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a640290b-0753-4880-bea4-ee1faeca050d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "62984544-61b4-478d-af6a-c3d77266ed6c",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"504c85fd-7d01-4a16-83ec-49859dc219b7",
				"df0a99ac-e539-4dbf-b405-778e1929d716"
			],
			"folders_order": []
		},
		{
			"id": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"name": "material-type",
			"description": null,
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b5b7205-80d2-410e-9a58-cc4148750cce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2db96571-79f9-43ed-be18-cf86246924e4",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			],
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"fef1f341-9cfb-4d30-98ba-ec1a679b8821",
				"6390b3bd-821f-4599-859b-3b08afe7c361",
				"3c4823f1-04e4-42be-9ef7-8fa5480e9113",
				"3c9c6e9a-77dd-40e1-af29-133fbaf8994a",
				"4e3b7a66-f0e1-4c6b-be1e-2500d60b4c0e",
				"37a83c6f-c4e9-4e8d-9e52-b594ad413108",
				"a0f453eb-a8aa-431c-a78b-001f1698bfc0"
			],
			"folders_order": []
		},
		{
			"id": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"name": "schemas",
			"description": null,
			"auth": null,
			"events": null,
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"97c4a0db-2642-40b0-a9c0-ac5d89f6acd7",
				"5c134068-66b7-4252-9e20-53e98dff8528",
				"a53ba058-acb5-4a01-b214-f6370a75cfc4",
				"68ee96b9-cca5-4908-b6e1-f897e9bf555b",
				"9e44df5d-dde8-482c-a343-979a6e333d9a",
				"90fa0193-dcea-4434-966a-611441a6a90a",
				"06be74e4-d5bb-48ee-ac06-af680af4088a",
				"98c60341-1fe5-44b2-b9a9-7386cdf8806d",
				"39c1aad3-72be-4827-a7ef-8b011b194997",
				"edeb85be-715c-4e36-ac86-64eef11d7a11",
				"b3a0fe78-3e67-4969-a5f5-77a1dee81e4f",
				"79b6a5c0-e4a4-42fa-b7a7-7d51996c0031",
				"00bd2f6a-7d40-4a0b-a816-dae7f4717aca",
				"71f52fce-af10-4867-a467-eb992ff75508",
				"48f32fa9-7f46-45e4-aa65-cffc3efafd37",
				"1103c89e-2fdf-4ba5-8c42-f3f44740a230",
				"0a5917a8-8618-4d5b-9301-cf5c49d79c28",
				"63ea28c5-ff3f-42c9-bec6-75eb9190021d",
				"777a2d94-53fd-43df-a0c5-ac1e6aee7972",
				"db46992e-bf19-4a7e-beb8-308bfc1e9c6a"
			],
			"folders_order": []
		},
		{
			"id": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"name": "service-point",
			"description": "",
			"auth": null,
			"events": null,
			"collection": "a298b3c9-a25a-48ff-a7d8-4098296a3db8",
			"folder": null,
			"order": [
				"0863bbad-b42b-4584-a781-e1acd674df28",
				"8702999d-cdc1-4029-83e1-0fe5beddbcd1",
				"27216a6f-c721-42e6-b08f-dff47bc9d7b7",
				"b1c95b7b-4325-4a3f-b906-e6daa7202594",
				"5df8f628-da10-46a6-9987-da5b277a2125",
				"d1d83457-77fe-4b17-99ce-3e25c5eea645",
				"44263363-7591-45c5-8581-2826563f10c2",
				"caa12f56-1aad-4192-9928-bc5287e1969f",
				"d2a48944-0b09-4b4a-ba50-a062c7b8a9a4",
				"0f2a7fb4-810d-4e76-a8c6-97b2bcaa21ca",
				"e775aa50-a898-40e8-a234-2ab6951ba8c2",
				"c660a9fa-43cb-42f2-91ae-378464133198",
				"c1b8701f-710b-4506-b358-f422d04f2fa1",
				"3cb8bad8-177e-4151-812a-b6e4361f4e00",
				"a82cdf05-7f1c-40dc-bab8-183564d27202",
				"be5aa4c0-255a-427a-b536-697748eec504",
				"19476371-6264-48dc-8735-9f7dbf21c994",
				"edd8f7da-3f00-4281-a365-7f1ac5a8112c",
				"150e214b-611b-4364-bb9c-69d0e0153440",
				"84e1d608-7cf5-4ad1-880c-2e8bbae64b50",
				"07959e99-dd64-42a1-ab5e-1dda6b727ac2",
				"fe8dce2c-3088-4c7c-ac18-ec81520afee7",
				"6ccba100-2f01-4b41-9378-8d795326fcb2",
				"3cbbd4c9-6059-4906-a1e2-37be60372ff3",
				"877313e1-bf9a-4089-bdd1-b15b8e4dcdb0",
				"3486813d-b34c-4af2-8083-bb1c852c036d",
				"468fd6ff-5448-4301-b33e-78865a929921"
			],
			"folders_order": []
		}
	],
	"requests": [
		{
			"id": "00bd2f6a-7d40-4a0b-a816-dae7f4717aca",
			"name": "materialtypes.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{materialtypes.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "19885be0-6621-45d9-878d-0a10034014ec",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"materialtypes.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "02542e61-db00-4520-8320-05fee0b283e4",
			"name": "/item-storage/items/{{newitemstorage}} - updated",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "11f869d6-399f-47ed-853c-9745efa9a906",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the updated item storage\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newitemstorage\")); ",
							"    pm.expect(response.pieceIdentifiers[0]).to.be.equal(\"here is my identifier\"); ",
							"    pm.expect(response.notes[0]).to.be.equal(\"here are my notes\"); ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"item.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "06be74e4-d5bb-48ee-ac06-af680af4088a",
			"name": "instances.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instances.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "123bc36b-9654-416f-add8-ead90c748fef",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"instances.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "07959e99-dd64-42a1-ab5e-1dda6b727ac2",
			"name": "/service-points - put/{id} - 500",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": ""
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ab3fa3f5-eab0-410e-8420-95b6dc3555be",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 500 - bad Id\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"Response must be valid and have an error message\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(responseBody.toLowerCase().includes(\"internal server error\")).to.be.true; ",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d4e0b33a-517d-4714-8846-9a864bfe67a6",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"{{locationId}}\"\n\t]\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "0863bbad-b42b-4584-a781-e1acd674df28",
			"name": "/service-points - create",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e37d47f6-ed4b-45f6-88e7-f9d5685df82f",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 201 - service-point created\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the service point object created\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
							"    pm.expect(response.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\")); ",
							"});",
							"",
							"pm.test(\"Response must contain a metadata object\", function () {",
							"    pm.expect(response.metadata).to.exist;",
							"    pm.expect(response.metadata.createdByUserId).to.be.equal(pm.environment.get(\"userId\"));",
							"    var todayDate = new Date();",
							"    pm.expect(new Date(response.metadata.createdDate).getDate()).to.be.equal(todayDate.getDate());",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "619dd539-342f-4532-9fab-343647e04a46",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "0a5917a8-8618-4d5b-9301-cf5c49d79c28",
			"name": "error.schema",
			"url": "{{schema_loc}}/raml/master/schemas/{{error.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "45205ec0-6221-4fef-b498-68187c56caa0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"GET schema_error OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"GET schema_error has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"error.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "0af2de87-c9c9-47bf-b752-e927ca2d0c54",
			"name": "/holdings-storage/holdings/{{newholdingstorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "6037b2af-0887-4306-ae76-cad8785b1a63",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "0be50588-a6a4-4cfb-a333-9bd95afd038d",
			"name": "/classification-types?offset=-2147483649",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?offset=-2147483649",
			"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "offset",
					"value": "-2147483649"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1dabb328-cff3-4a56-8ac6-706f16c2d47b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "0f2a7fb4-810d-4e76-a8c6-97b2bcaa21ca",
			"name": "/service-points - get - lang=en",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points?lang=balblabal",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "lang",
					"value": "balblabal",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0d1084c9-21d8-4537-8c17-cf4d016ad16e",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200 - service-points returned\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"/* the lang query string parameter doesn't do anything. See MODINVSTOR-198. Will add assertions once the behavior is defined. */"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c39570d-cc68-4444-b090-4dd21a7ee3a1",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "1103c89e-2fdf-4ba5-8c42-f3f44740a230",
			"name": "loantype.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{loantype.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d3c67472-fb76-4584-8a44-f9ac3b7b36a5",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"loantype.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "127502d3-2fe6-451a-9bb5-700d021b0a06",
			"name": "/instance-formats/{{newinstanceformat}} -updated",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "382ab0ab-9061-41d5-a621-9779e7aab228",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the updated instance format\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
							"    pm.expect(response.name).to.be.equal(\"geological maps\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformat.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "1420a09e-f41c-4219-932a-a759c39d7226",
			"name": "/instance-types/{{newinstancetype}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "464ab70f-0c9d-4486-9e85-c8d87d557b29",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							""
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "{\"id\": \"{{newinstancetype}}\",\r\n  \"name\":\"journal and newspaper article\",\r\n  \"code\":\"jna\",\r\n  \"source\":\"towarzystwo naukowe krakowskie\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "150e214b-611b-4364-bb9c-69d0e0153440",
			"name": "/service-points - put/{id} - 400",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": ""
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "486f48f1-a171-4be3-9bef-0e776545cf9e",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 400 - bad request - malformed JSON\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "96b4f152-85ab-4d33-ac47-4c1f373c1c7a",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"modified-cd6\");",
							"pm.environment.set(\"svptName\", \"modified-Circ desk 28\");",
							"pm.environment.set(\"locationId\", \"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\");",
							"",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : {{svcptCode,\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"{{locationId}}\"\n\t]\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "15808dc9-6c9b-4927-91d6-00a2c8b13a9a",
			"name": "/classification-types?limit=2147483648",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=2147483648",
			"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "2147483648"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "627d92ac-5472-4cf3-91d1-2397e1403143",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - limit greater than Integer.MAX_VALUE\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "169aab0e-f531-46c4-af8f-faa9087168a5",
			"name": "/classification-types/{classificationTypeId}?lang=A1",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}?lang=A1",
			"description": "Update an existing classification type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-68](https://issues.folio.org/browse/MODINVSTOR-68).",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "lang",
					"value": "A1"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "96b65564-f7b2-4318-92a8-cf232790b679",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - lang is not valid\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "17e9c355-282e-4f33-9acb-ee32ac6314c2",
			"name": "/instance-formats",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9bb8a8ea-c3ec-4db5-bca5-a445e3cae759",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"  tv4.addSchema(\"instanceformat.json\", JSON.parse(pm.variables.get(\"instanceformat.schema\")));",
							"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformats.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "19476371-6264-48dc-8735-9f7dbf21c994",
			"name": "/service-points - get/{id} 500",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/i{",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ef53980b-2480-4bbf-81df-dea358ba9e96",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 500 - bad id\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(responseBody.toLowerCase().includes(\"internal server error\")).to.be.true; ",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "43f81c12-b910-4870-94c9-22b8aa97623b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "1a188073-f500-4e3c-8864-23a922df9986",
			"name": "/instance-formats/{{newinstanceformat}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f3dbc8a9-9a62-4302-8040-dd37edbe8768",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "{\"id\": \"{{newinstanceformat}}\",\r\n  \"name\":\"geological maps\",\r\n  \"code\": \"gm\",\r\n  \"source\": \"schneider\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "1a340e29-6c1c-40dd-ae02-ab4a2d6b4a75",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type with an empty body",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1b3f727-1f7e-427d-b053-6fa876285c31",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dd13fdfa-1a62-44b0-8133-2d316e79c1df",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"422 test\", function() {",
							"    pm.response.to.have.status(422);",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"error.schema\")));",
							"    tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"parameters.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"errors.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "1ab4468f-16d6-421d-a2ec-1e49bcc6247b",
			"name": "/instance-formats",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b41276e5-3c92-43dd-9de7-cc419a80189c",
						"type": "text/javascript",
						"exec": [
							"",
							"var response = JSON.parse(responseBody);",
							"pm.environment.set(\"newinstanceformat\", response.id);",
							"",
							"//",
							"pm.test(\"New instance format was created. Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformat.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"",
							"// //verify headers",
							"",
							"pm.test(\"'Location'header is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "{\r\n  \"name\": \"maps\",\r\n  \"code\": \"mp\",\r\n  \"source\": \"schneider\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "1c9ca99a-4660-4cd0-97b9-f36736c0aa20",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Delete an existing classification type using a user that does not have access",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{test_user_token}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "18a21d0d-2ce6-4708-970b-3d4f9d53480d",
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid');",
							"",
							"pm.environment.set('test_user_id', uuid.v4());",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user creation error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential creation error: \" + err);",
							"                } else {",
							"                    if (res.code === 201) {",
							"                        pm.environment.set('test_user_credId', res.json().id);",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
							"                            method: 'POST',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            },",
							"                            body: {",
							"                                mode: 'raw',",
							"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"permissions creation error: \" + err);",
							"                            } else {",
							"                                if (res.code === 201) {",
							"                                    pm.environment.set('test_user_permsId', res.json().id);",
							"                                    pm.sendRequest({",
							"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"                                        method: 'POST',",
							"                                        header: {",
							"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                            'Content-Type': 'application/json'",
							"                                        },",
							"                                        body: {",
							"                                            mode: 'raw',",
							"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
							"                                        }",
							"                                    }, function(err, res) {",
							"                                        if (err !== null) {",
							"                                            console.log(\"Test user login error: \" + err);",
							"                                        } else {",
							"                                            if (res.code === 201) {",
							"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
							"                                            } else {",
							"                                                console.log(\"Test user login failed: \" + res.reason());",
							"                                            }",
							"                                        }",
							"                                    });",
							"                                } else {",
							"                                    console.log(\"permissions creation failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Auth creation failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User creation failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4d9f567c-303c-4237-b2f9-7596b9238cac",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"403 test\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.environment.unset('test_user_token');",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
							"    method: 'DELETE',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user deletion error: \" + err);",
							"    } else {",
							"        if (res.code === 204) {",
							"            pm.environment.unset('test_user_id');",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
							"                method: 'DELETE',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential deletion error: \" + err);",
							"                } else {",
							"                    if (res.code === 204) {",
							"                        pm.environment.unset('test_user_credId');",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
							"                            method: 'DELETE',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"Permissions deletion error: \" + err);",
							"                            } else {",
							"                                if (res.code === 204) {",
							"                                    pm.environment.unset('test_user_permsId');",
							"                                } else {",
							"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Credential deletion failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User deletion failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{test_user_token}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "23b08661-01b5-400c-8a21-bf12b2434647",
			"name": "/items-storage/items/{{newitemstorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "88f9d1e0-1ad7-4207-a39a-86fcf3eb4081",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							""
						]
					}
				}
			],
			"folder": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"rawModeData": "{\n    \"id\": \"{{newitemstorage}}\",\n    \"holdingsRecordId\": \"65cb2bf0-d4c2-4886-8ad0-b76f1ba75d61\",\n    \"pieceIdentifiers\": [\"here is my identifier\"],\n    \"notes\": [\"here are my notes\"],\n    \"materialTypeId\": \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\n    \"permanentLoanTypeId\": \"{{testpermanentloantypeid}}\"\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "27216a6f-c721-42e6-b08f-dff47bc9d7b7",
			"name": "/service-points - create - service point existed",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ab25cec8-07ee-4d44-bafe-2668933892e0",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 422 - service-point existed\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain an error message\", function () {",
							"    pm.expect(response.errors[0].message).to.equal(\"Service Point Exists\");",
							"    response.errors[0].parameters.forEach( element => {",
							"        if (element.key === \"name\"){",
							"            pm.expect(element.value == pm.environment.get(\"svptName\"));",
							"            return false;",
							"        }",
							"    } )",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "387b3760-a40f-4d74-a46d-e8cabc72d0b0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "2b357e9a-7520-40f1-a6d2-d4f578e3ee83",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}?lang=A1",
			"description": "Delete a classification type passing an invalid lang query paramater",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "lang",
					"value": "A1"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "06388416-a482-4293-8df8-bd685b2663b7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - lang is not valid\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "2cced604-7882-45e3-aa61-ef175761e07f",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Return an existing classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e17e68cc-ddd3-499f-b6b9-a1e39854fb19",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-type.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"Validate fields\", function() {",
							"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
							"   pm.response.to.have.jsonBody(\"name\", \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\"));",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "2e2eceaf-3151-4cad-b8c9-ffb39f62f447",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8005bea-2ab4-4ccb-a3a2-695d6a11b6d4",
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid');",
							"pm.environment.set('classificationTypeUUID', uuid.v4());"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21514626-d38e-4800-8c25-a6b8b13a7dd3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-type.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"Validate fields\", function() {",
							"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
							"   pm.response.to.have.jsonBody(\"name\", \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\"));",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "3486813d-b34c-4af2-8083-bb1c852c036d",
			"name": "/service-points - get/{id} - post DELETE verification",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "7f8c8dcc-9143-4826-85d0-7b6407b885b1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 404 - service-point cannot be found because service point ID DNE\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Expect error message from deleting ID not existed\", function(){",
							"    var errorString = \"no service point exists\";",
							"   pm.expect(responseBody.toLowerCase().includes(errorString)).to.be.true;",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "37577fcc-4419-4135-af4b-6710e3cff64e",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "37a83c6f-c4e9-4e8d-9e52-b594ad413108",
			"name": "/material-types/{{newmaterialtype}} - updated",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "4588c8fc-3672-47af-8699-94b7aeb07c9c",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain serial material type\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newmaterialtype\")); ",
							"    pm.expect(response.name).to.be.equal(\"serial -updated\");",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtype.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "392bea99-f323-428c-8132-622ae928587f",
			"name": "/instance-storage/instances - query title",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances?query=title=\"Handbuch deutscher historishen Buchbestände\"",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "title=\"Handbuch deutscher historishen Buchbestände\""
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "fe392234-1ee4-4052-a3d9-dbdf895cd88e",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the new instance storage\", function () {",
							"    pm.expect(response.instances[0].id).to.be.equal(pm.environment.get(\"newinstancestorage\")); ",
							"    pm.expect(response.instances[0].title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"  tv4.addSchema(\"instance.json\", JSON.parse(pm.variables.get(\"instance.schema\")));",
							"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instances.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "39c1aad3-72be-4827-a7ef-8b011b194997",
			"name": "instancefromats.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instanceformats.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "83edc361-dd78-4805-8a4e-f0f090f1bb9e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"instanceformats.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "3b8be580-4374-44c2-a3d6-974303146f0c",
			"name": "/classification-types?limit=-1",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=-1",
			"description": "400 test for negative limit",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "-1"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95363aa7-4c73-4cc8-a75e-f034de8f4f98",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - negative limit\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "3c4823f1-04e4-42be-9ef7-8fa5480e9113",
			"name": "/material-types -duplicate entry - expect error",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "f0caa17d-9054-4a2e-83d5-8c4a5f4fa482",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"New inventory item was created. Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must contain correct error message\", function () {",
							"    pm.expect(response.errors[0].message).to.be.equal(\"Material Type exists\");",
							"    pm.expect(response.errors[0].parameters[0].key).to.be.equal(\"name\");",
							"    pm.expect(response.errors[0].parameters[0].value).to.be.equal(\"serial\");",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"error.schema\")));",
							"    tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"parameters.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"errors.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "380bb799-8760-4b99-a8fc-dca301d987a6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "{ \r\n\t\"name\": \"serial\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "3c9c6e9a-77dd-40e1-af29-133fbaf8994a",
			"name": "/material-types/{{newmaterialtype}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "86e4a0cb-41ec-4dee-9d00-bd429edefa39",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain serial material type\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newmaterialtype\")); ",
							"    pm.expect(response.name).to.be.equal(\"serial\");",
							"});",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtype.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "3cb8bad8-177e-4151-812a-b6e4361f4e00",
			"name": "/service-points - 500",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points?query=",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b48affbd-47af-4790-b796-36da3cbeba1d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"/* JIRA: MODINVSTOR-197 */",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(responseBody.toLowerCase().includes(\"cqlparseexception\")).to.be.true;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "edf46ac3-90fb-46cd-86f5-5cf9d6df7dd0",
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "3cbbd4c9-6059-4906-a1e2-37be60372ff3",
			"name": "/service-points - delete/{id} - 404 - post DELETE verification",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9e74091f-a553-46ed-89b9-73b96b608b7c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 404 - service-point cannot deleted because service point ID not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Expect error message from deleting ID not existed\", function(){",
							"   pm.expect(responseBody.toLowerCase()).to.equal(\"not found\") ;",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4b4e9728-9886-4c30-abba-b62f27255348",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "3d9fa322-9259-4307-86b3-825bc1e84fec",
			"name": "/instance-storage/instances",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "555a84ed-e66f-4717-8fa0-5a198fb9ee47",
						"type": "text/javascript",
						"exec": [
							"",
							"var response = JSON.parse(responseBody);",
							"pm.environment.set(\"newinstancestorage\", response.id);",
							"",
							"//",
							"pm.test(\"New instance storage was created. Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instance.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"",
							"pm.test(\"'Location'header is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "{\r\n  \"source\": \"MARC\",\r\n  \"title\": \"Handbuch deutscher historishen Buchbestände\",\r\n  \"instanceTypeId\": \"2b94c631-fca9-a892-c730-03ee529ffe2c\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "44263363-7591-45c5-8581-2826563f10c2",
			"name": "/service-points - create - 422 - unknown property",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d04512aa-a967-44a7-b67a-63af2006440d",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 422 - fictitious property\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain an error message\", function () {",
							"    pm.expect(response.errors[0].message.toLowerCase().includes(\"unrecognized field\")).to.be.true;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "387b3760-a40f-4d74-a46d-e8cabc72d0b0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"fictiousProperty\" : \"blabla\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "468fd6ff-5448-4301-b33e-78865a929921",
			"name": "/service-points - get -- unset environment variables",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9a98232f-8c27-4eef-bc85-641b4f45b658",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0527cdbb-e2fc-4a29-ba5e-e6d8f2bd6715",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset(\"svcptId\");",
							"pm.environment.unset(\"discoveryDisplayName\");",
							"pm.environment.unset(\"userId\");",
							"pm.environment.unset(\"svcptCode\");",
							"pm.environment.unset(\"svptName\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "48f32fa9-7f46-45e4-aa65-cffc3efafd37",
			"name": "loantypes.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{loantypes.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ef401ea6-77c3-41b0-bd6b-7793279ddd87",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"loantypes.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "4e3b7a66-f0e1-4c6b-be1e-2500d60b4c0e",
			"name": "/material-types/{{newmaterialtype}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "a5c4765e-37fe-4ea3-bb38-4d6ac3b9904b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							""
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "{ \r\n\t\"name\": \"serial -updated\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "504c85fd-7d01-4a16-83ec-49859dc219b7",
			"name": "/loan-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "a4319759-62b1-437f-9511-608803fd2232",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    tv4.addSchema(\"loantype.json\", JSON.parse(pm.variables.get(\"loantype.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"loantypes.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "36ed7f9e-4e54-4858-bc64-9bf95489a9a2",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "52df1f2b-5dfb-4bda-9286-387fbbee1890",
			"name": "/instance-types/{{newinstancetype}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ed595df6-faa7-4d12-baf4-d33d3f1e3d67",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the new instance type\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
							"    pm.expect(response.name).to.be.equal(\"journal article\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetype.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "530b9f33-0e47-40ad-a5eb-da88ae4942e3",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Update an existing classification type using an invalid token",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "015fbdf5-c700-4a29-a050-eb4eb65d5c56",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset('xokapitoken-classification-types');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9cc6cbee-df33-4110-b371-bfd1b1591be1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"401 test\", function() {",
							"    pm.response.to.have.status(401);",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "56249b5c-b2de-4e3f-bda6-32f88e1007b8",
			"name": "/classification-types/12345",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
			"description": "Delete a classification type using an invalid UUID",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3effed9c-428e-460e-885a-69cd51515229",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - invalid UUID on URL\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "59885584-e484-4c00-af9f-c3df50fa19fd",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type with a bad JSON body",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "69886924-2ba1-40d2-99a9-25878557c868",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "accb4c86-5b9e-4d08-9be2-4f6c50cb02c8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - bad JSON\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "59cffc64-74fc-4136-a9b7-8a3ae49510c9",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Return an existing classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "98087a59-484b-4b8d-b85e-70522edfd5f3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-type.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"Validate fields\", function() {",
							"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
							"   pm.response.to.have.jsonBody(\"name\", \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\"));",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "5a842d3c-a1dc-45c7-90a0-897a4fac0c15",
			"name": "/classification-types?offset=2147483648",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?offset=2147483648",
			"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "offset",
					"value": "2147483648"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2ce75e96-36a7-4e71-9bb0-5c52d7253abb",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - offset greater than Integer.MAX_VALUE\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "5c134068-66b7-4252-9e20-53e98dff8528",
			"name": "classification-type.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{classification-type.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "49886a49-0f8a-445a-b6c6-2a0a589830a7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"classification-type.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "5c41a7c8-ee1e-4f77-802c-07373ab864f9",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Delete a classification type using an already deleted classification type ID",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c172ea20-479d-4aea-b1ee-5ac8e6b02c90",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"404 test\", function() {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.have.body();",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "5df8f628-da10-46a6-9987-da5b277a2125",
			"name": "/service-points - create - 403",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}",
					"enabled": true
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}",
					"enabled": false
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "6756ecdc-d478-4e98-a647-b53a3c52432d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 403 - no x-okapi-token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(responseBody.includes(\"Access requires permission\")).to.be.true; ",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "387b3760-a40f-4d74-a46d-e8cabc72d0b0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\n//x-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "5e38a968-a01c-4e24-acee-58b3ca37c08f",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Update an existing classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.not.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "5ed53c40-7058-4228-996d-911e1c90f3f0",
			"name": "/instance-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "942eccf3-abfd-49e1-a503-c656fed689c9",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"  tv4.addSchema(\"instancetype.json\", JSON.parse(pm.variables.get(\"instancetype.schema\")));",
							"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetypes.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "609940a4-9e6b-48f6-82bf-55ddcde769e6",
			"name": "/instance-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "68852aef-eaa1-4ad5-983d-1701f27384f7",
						"type": "text/javascript",
						"exec": [
							"",
							"var response = JSON.parse(responseBody);",
							"pm.environment.set(\"newinstancetype\", response.id);",
							"",
							"//",
							"pm.test(\"New instance type was created. Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetype.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"// //verify headers",
							"",
							"pm.test(\"'Location'header is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "{\r\n  \"name\": \"journal article\",\r\n  \"code\": \"ja\",\r\n  \"source\": \"towarzystwo naukowe\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "63798b19-c28a-474d-be66-12200086d32d",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?lang=A1",
			"description": "Create a new classification type with a bad lang query argument",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "lang",
					"value": "A1"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a5d4a0bf-220b-4c47-a46b-56586901f94d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - bad lang\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "6390b3bd-821f-4599-859b-3b08afe7c361",
			"name": "/material-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d193af17-7fde-482e-9a50-06c44533e20f",
						"type": "text/javascript",
						"exec": [
							"",
							"var response = JSON.parse(responseBody);",
							"pm.environment.set(\"newmaterialtype\", response.id);",
							"",
							"//",
							"pm.test(\"New inventory item was created. Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtype.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"// //verify headers",
							"",
							"pm.test(\"'Location'header is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "{ \r\n\t\"name\": \"serial\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "63ea28c5-ff3f-42c9-bec6-75eb9190021d",
			"name": "parameters.schema",
			"url": "{{schema_loc}}/raml/master/schemas/{{parameters.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "891279fe-08c5-4eba-9a0e-2a78470f6ca7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"GET schema_parameters OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"GET schema_parameters has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"parameters.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "672b4ca8-e32c-44e0-917a-bf4755d90de0",
			"name": "/classification-types?query=",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?query=",
			"description": "400 test for some weird query. Note: this test will fail until [MODINVSTOR-67](https://issues.folio.org/projects/MODINVSTOR/issues/MODINVSTOR-67) is fixed.",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": ""
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8a110c8d-d863-417a-a859-ec88dbb5d782",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - bad CQL\", function() {",
							"    pm.response.to.have.status(400); ",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "68ee96b9-cca5-4908-b6e1-f897e9bf555b",
			"name": "items.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{items.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3c0d45ab-955d-498f-a87f-91b1befcbebb",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"items.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "6ccba100-2f01-4b41-9378-8d795326fcb2",
			"name": "/service-points - delete/{id}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "66979349-33e8-4e2c-b814-c3552b9b3e32",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204 - service-point deleted\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1679810a-3f77-4980-9125-1537b484f0f6",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "6ed8f73b-90c5-4730-893d-4c4ee2de91b1",
			"name": "/instance-types - query name",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types?query=name=\"journal article\"",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "name=\"journal article\""
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "2cffc8aa-c24f-4754-9a58-649327bd5338",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the new instance type\", function () {",
							"    pm.expect(response.instanceTypes[0].id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
							"    pm.expect(response.instanceTypes[0].name).to.be.equal(\"journal article\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   tv4.addSchema(\"instancetype.json\", JSON.parse(pm.variables.get(\"instancetype.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetypes.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "713060f1-86e6-473d-9669-20bab1ed4386",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Test listing classification types",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5528883a-93fc-48db-a357-8bcadc5af8f9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "71f52fce-af10-4867-a467-eb992ff75508",
			"name": "materialtype.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{materialtype.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c6a1ae5a-4676-4c6d-aa69-85e70c0c790b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"materialtype.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "7409387f-8b01-4144-9b76-f89fd4d77e2c",
			"name": "/holdings-storage/holdings/{{newholdingstorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "6eb6244f-5e56-423e-8264-8e8f5d4d515f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"rawModeData": "{\r\n  \"id\" : \"{{newholdingstorage}}\",\r\n  \"instanceId\" : \"cd28da0f-a3e4-465c-82f1-acade4e8e170\",\r\n  \"holdingsStatements\" :  [ \"my first line of the holdings statement\", \"another line\" ]\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "74b46d5a-efe8-4efa-a63f-56ff9b5b663d",
			"name": "/instance-storage/instances/{{newinstancestorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b557d1d5-55e3-4e4c-8d49-599e91774f9f",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							""
						]
					}
				}
			],
			"folder": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "76132d69-1a47-47d6-835f-cc268a6facc1",
			"name": "/instance-formats - query name",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats?query=name=maps",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "name=maps"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0185c3ea-cd92-4557-a9ca-abbf1e63bc1e",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the new instance format\", function () {",
							"    pm.expect(response.instanceFormats[0].id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
							"    pm.expect(response.instanceFormats[0].name).to.be.equal(\"maps\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   tv4.addSchema(\"instanceformat.json\", JSON.parse(pm.variables.get(\"instanceformat.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformats.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "764680b3-42aa-4ba3-96dc-b5a01a096a41",
			"name": "/classification-types?limit=-2147483649",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=-2147483649",
			"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "-2147483649"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a8655569-ed51-4a38-9cdb-ef4ac0400bc5",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "77745394-f35a-424c-b0e3-86f71963f3ee",
			"name": "/instance-storage",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "2bba9a08-8cc6-437d-bd80-4e734aa96f4a",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"  tv4.addSchema(\"instance.json\", JSON.parse(pm.variables.get(\"instance.schema\")));",
							"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instances.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});"
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "777a2d94-53fd-43df-a0c5-ac1e6aee7972",
			"name": "errors.schema",
			"url": "{{schema_loc}}/raml/master/schemas/{{errors.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d355d5cc-6da9-4d25-8114-dcdc01472cad",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"errors.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "78bc205e-8c4c-48f2-9f04-be7264911bbe",
			"name": "/item-storage/items",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "42489c7d-e03d-461d-bbf1-5d4931ed6b28",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if(response.items.length>0){",
							"    pm.environment.set(\"testpermanentloantypeid\", response.items[0].permanentLoanTypeId);",
							"}",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    tv4.addSchema(\"item.json\", JSON.parse(pm.variables.get(\"item.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"items.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "79b6a5c0-e4a4-42fa-b7a7-7d51996c0031",
			"name": "instancetype.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instancetype.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e3f7cf86-5803-486f-a1f4-9cae80254065",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"instancetype.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "80b4d2e3-7e78-4ab5-9f9b-b647ae4c3913",
			"name": "/instance-types/{{newinstancetype}} - updated",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d9273208-88d7-4c46-bf28-31984168b078",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the updated instance type\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
							"    pm.expect(response.name).to.be.equal(\"journal and newspaper article\"); ",
							"    pm.expect(response.code).to.be.equal(\"jna\"); ",
							"    pm.expect(response.source).to.be.equal(\"towarzystwo naukowe krakowskie\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetype.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "81d28542-6181-41a0-9343-94c2c7e3b861",
			"name": "/instance-types - 'Books'",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types?query=(name=Books)",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "(name=Books)"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b8a6753d-0748-40af-bb9b-8d3c84084d1b",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"///US403931  - dbpopulate need to include missing source, code and metadata",
							"// pm.test(\"Validate schema\", function () {",
							"//   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"//   tv4.addSchema(\"instancetype.json\", JSON.parse(pm.variables.get(\"instancetype.schema\")));",
							"//   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetypes.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"//   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"// });",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "84e1d608-7cf5-4ad1-880c-2e8bbae64b50",
			"name": "/service-points - put/{id} - 404",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": ""
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3b563296-1f7f-43c5-9d67-ca8be24e1014",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 404 - Id not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"pm.test(\"Response must contain an error message\", function () {",
							"    pm.expect(responseBody.toLowerCase().includes(\"not found\")).to.be.true;",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "acf58a4c-1b56-4e8e-89ce-dd96a1626765",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259s692\")",
							"",
							"",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"{{locationId}}\"\n\t]\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "8702999d-cdc1-4029-83e1-0fe5beddbcd1",
			"name": "/service-points - get - verify setup",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "3edf520f-c70e-4dfc-a395-89bbbbe76ae9",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200 - service-points returned\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must contain the service point object created\", function () {",
							"    //pm.expect(response.servicepoints.length).to.have.lengthOf.above(0);",
							"    ",
							"    var matchingSvcptFound = false;",
							"    ",
							"    response.servicepoints.forEach( el => {",
							"        if (el.id == pm.environment.get(\"svcptId\")){",
							"            pm.expect(el.id).to.be.equal(pm.environment.get(\"svcptId\"));",
							"            pm.expect(el.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
							"            pm.expect(el.name).to.be.equal(pm.environment.get(\"svptName\"));",
							"            pm.expect(el.code).to.be.equal(pm.environment.get(\"svcptCode\"));",
							"            pm.expect(el.metadata.createdByUserId).to.be.equal(pm.environment.get(\"userId\"));",
							"            ",
							"            matchingSvcptFound = true;",
							"        }",
							"    })",
							"    ",
							"    if (!matchingSvcptFound){",
							"        pm.expect.fail(matchingSvptFound, true, \"could not find expected service point in list\");",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "630590d1-9f83-49d1-a0a1-9ee202b674db",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "87517428-94d4-4bda-8323-dc1cb5eb98d0",
			"name": "/instance-formats/{{newinstanceformat}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8b9ebedc-6966-479d-b67d-1215d14d7871",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the new instance format\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
							"    pm.expect(response.name).to.be.equal(\"maps\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformat.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "877313e1-bf9a-4089-bdd1-b15b8e4dcdb0",
			"name": "/service-points - delete/{id} - 500",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c7d8193f-3faa-420c-ba3e-fa41b82a9e7e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 500 - bad id\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(responseBody.toLowerCase().includes(\"internal server error\")).to.be.true; ",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1baeb271-0448-493a-bc67-8aa2e514a031",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "8d74c1d9-caab-448e-b03a-d099364ef0f4",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type with an invalid token",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c5f1e2d3-f9a8-49cb-87d0-91569e9fa80a",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset('xokapitoken-classification-types');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0789b8d7-9eef-4408-bd72-9f560d40a02d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"401 test\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "8e963ff8-01c7-48dc-8339-95b94fe63cd9",
			"name": "/holdings-storage/holdings/{{newholdingstorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "886fdb89-72e3-4a86-a99a-3d1b5782315e",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain instanceId of the new holding storage\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newholdingstorage\")); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecord.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "9004da69-9383-4d7a-ac13-cbebd4501a9b",
			"name": "holdings-storage",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "657aca74-1a23-41a2-bfc5-4d93a45aba88",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   tv4.addSchema(\"holdingsrecord.json\", JSON.parse(pm.variables.get(\"holdingsrecord.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecords.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "90bde655-a211-4b44-8f58-41a58ee8fd49",
			"name": "holdings-storage/holdings",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "775e3669-b55e-4c30-9bdd-409415c3a312",
						"type": "text/javascript",
						"exec": [
							"",
							"var response = JSON.parse(responseBody);",
							"pm.environment.set(\"newholdingstorage\", response.id);",
							"",
							"//",
							"pm.test(\"New holding storage was created. Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecord.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"pm.test(\"'Location'header is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"rawModeData": "{\r\n  \r\n  \"instanceId\": \"cd28da0f-a3e4-465c-82f1-acade4e8e170\"\r\n  \r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "90fa0193-dcea-4434-966a-611441a6a90a",
			"name": "holdingsrecords.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{holdingsrecords.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "aeb94048-606c-486e-9436-f88ba2ccc106",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"holdingsrecords.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "93ba82e4-ff69-43a9-9f22-ba246ec3ffeb",
			"name": "/instance-storage/instances/{{newinstancestorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "e9cd582c-c336-44ed-b54d-199394490038",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "{\"id\": \"{{newinstancestorage}}\",\r\n  \"source\": \"Local: MARC\",\r\n  \"title\": \"Handbuch deutscher historishen Buchbestände\",\r\n  \"instanceTypeId\": \"2b94c631-fca9-a892-c730-03ee529ffe2c\", \r\n  \"alternativeTitles\":[\"Handbuch der historishen Buchbestände\"]\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "97c4a0db-2642-40b0-a9c0-ac5d89f6acd7",
			"name": "classification-types.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{classification-types.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b690c993-26ff-41e5-aad7-7c6fb82e705a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"classification-types.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "98c60341-1fe5-44b2-b9a9-7386cdf8806d",
			"name": "instance.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instance.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8cc5c237-cf3b-4a88-a574-dc5455064133",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"instance.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "9b194165-514d-45e8-91a5-afbd1342641e",
			"name": "/item-storage/items",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "bedea3bb-d28f-4916-8032-306a796000c3",
						"type": "text/javascript",
						"exec": [
							"",
							"var response = JSON.parse(responseBody);",
							"pm.environment.set(\"newitemstorage\", response.id);",
							"",
							"//",
							"pm.test(\"New item storage was created. Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"item.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							" //verify headers",
							"pm.test(\"'Location'header is present\", function () {",
							"    pm.response.to.have.header(\"Location\");",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"folder": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"rawModeData": "{\r\n  \"holdingsRecordId\": \"myholdingsRecordId\",\r\n  \"materialTypeId\": \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\r\n  \"permanentLoanTypeId\": \"{{testpermanentloantypeid}}\"\r\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "9d3e874b-c40d-498d-a08b-2b54396d682b",
			"name": "/classification-types?offset=-1",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?offset=-1",
			"description": "400 test for negative limit",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "offset",
					"value": "-1"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "03492b68-4c19-42a0-ac92-4d6c112b6a58",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - negative offset\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "9e2fd92d-8206-4380-ab88-007dea5d74c1",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Return an existing classification type using an invalid token",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "951da1ac-e479-4d56-9048-2103010d39ca",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset('xokapitoken-classification-types');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "879c0e66-09fc-4e02-8108-011004498ac1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"401 test\", function() {",
							"    pm.response.to.have.status(401);",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "9e44df5d-dde8-482c-a343-979a6e333d9a",
			"name": "holdingsrecord.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{holdingsrecord.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "bd336c34-f4c6-45ef-af25-7e7c369608f0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"holdingsrecord.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "a0f453eb-a8aa-431c-a78b-001f1698bfc0",
			"name": "/material-types/{{newmaterialtype}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "c995536c-0892-4d30-bca9-b6ac5a3c6ba4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "a385f64e-e5c3-4147-90d9-4c6505ebad67",
			"name": "/classification-types?limit=100",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=100",
			"description": "Test listing classification types to ensure modified item is in the list. Need a higher limit than 10 in case there are more than 10 classification types already. Ideally, use Integer.MAX_VALUE when it is supported by the API.",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "100"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a107b8a-1bcc-4bdb-9fc4-6074526c81b6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"Test list for deleted classification type\", function() {",
							"   pm.expect(pm.response.json().classificationTypes).to.be.an('array').to.include.deep.members([{id: pm.environment.get(\"classificationTypeUUID\"), name: \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\")}]);",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "a45b751a-54a7-4362-baae-ef07dd1bfed5",
			"name": "/instance-storage/instances/{{newinstancestorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5f436bc8-e774-4b0f-93f6-e8f879357d1e",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the new instance storage\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancestorage\")); ",
							"    pm.expect(response.title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instance.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "a53ba058-acb5-4a01-b214-f6370a75cfc4",
			"name": "item.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{item.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "918d7f46-a975-4239-a47b-79d31fc5420b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"item.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "a82cdf05-7f1c-40dc-bab8-183564d27202",
			"name": "/service-points - get/{id}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "aab2dce2-caf7-4406-be13-9f1e5eaff01f",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200 - service-point found\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the service point object being looked up\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
							"    pm.expect(response.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
							"    pm.expect(response.name).to.be.equal(pm.environment.get(\"svptName\"));",
							"    pm.expect(response.code).to.be.equal(pm.environment.get(\"svcptCode\"));",
							"    pm.expect(response.metadata.createdByUserId).to.be.equal(pm.environment.get(\"userId\"));",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ea259fc5-8dd6-490c-a559-92c50536ffce",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "a86c0b22-1a62-427c-89ae-172def9d9835",
			"name": "/classification-types/12345",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
			"description": "Update an existing classification type with an invalid UUID",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58b51bb7-9d03-42cf-a598-a9f0fa8558a7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - invalid UUID on URL\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "aaa7230b-86bf-42c8-ab65-7dcc03fc5344",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
			"description": "Delete a classification type using a non-uuid classification type ID",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3d3d292b-333b-4b50-8142-d0d2535d6b47",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - id is not a uuid\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "af25b185-65cd-49de-b6b4-16b1d93bb1e1",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Update an existing classification type using a user that does not have access",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{test_user_token}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fa220898-e45b-414c-b28b-483014ea9722",
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid');",
							"",
							"pm.environment.set('test_user_id', uuid.v4());",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user creation error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential creation error: \" + err);",
							"                } else {",
							"                    if (res.code === 201) {",
							"                        pm.environment.set('test_user_credId', res.json().id);",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
							"                            method: 'POST',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            },",
							"                            body: {",
							"                                mode: 'raw',",
							"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"permissions creation error: \" + err);",
							"                            } else {",
							"                                if (res.code === 201) {",
							"                                    pm.environment.set('test_user_permsId', res.json().id);",
							"                                    pm.sendRequest({",
							"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"                                        method: 'POST',",
							"                                        header: {",
							"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                            'Content-Type': 'application/json'",
							"                                        },",
							"                                        body: {",
							"                                            mode: 'raw',",
							"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
							"                                        }",
							"                                    }, function(err, res) {",
							"                                        if (err !== null) {",
							"                                            console.log(\"Test user login error: \" + err);",
							"                                        } else {",
							"                                            if (res.code === 201) {",
							"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
							"                                            } else {",
							"                                                console.log(\"Test user login failed: \" + res.reason());",
							"                                            }",
							"                                        }",
							"                                    });",
							"                                } else {",
							"                                    console.log(\"permissions creation failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Auth creation failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User creation failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3c50b1d0-0f7c-4879-94fe-d6b2022b76c4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"403 test\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.environment.unset('test_user_token');",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
							"    method: 'DELETE',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user deletion error: \" + err);",
							"    } else {",
							"        if (res.code === 204) {",
							"            pm.environment.unset('test_user_id');",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
							"                method: 'DELETE',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential deletion error: \" + err);",
							"                } else {",
							"                    if (res.code === 204) {",
							"                        pm.environment.unset('test_user_credId');",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
							"                            method: 'DELETE',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"Permissions deletion error: \" + err);",
							"                            } else {",
							"                                if (res.code === 204) {",
							"                                    pm.environment.unset('test_user_permsId');",
							"                                } else {",
							"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Credential deletion failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User deletion failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{test_user_token}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "aff6205b-551c-4a09-bbfc-fbf29f6429c1",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "List classification types with a user that does not have access",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{test_user_token}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cc5542cb-7aad-4058-8c2e-a2d39e9e4eff",
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid');",
							"",
							"pm.environment.set('test_user_id', uuid.v4());",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user creation error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential creation error: \" + err);",
							"                } else {",
							"                    if (res.code === 201) {",
							"                        pm.environment.set('test_user_credId', res.json().id);",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
							"                            method: 'POST',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            },",
							"                            body: {",
							"                                mode: 'raw',",
							"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"permissions creation error: \" + err);",
							"                            } else {",
							"                                if (res.code === 201) {",
							"                                    pm.environment.set('test_user_permsId', res.json().id);",
							"                                    pm.sendRequest({",
							"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"                                        method: 'POST',",
							"                                        header: {",
							"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                            'Content-Type': 'application/json'",
							"                                        },",
							"                                        body: {",
							"                                            mode: 'raw',",
							"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
							"                                        }",
							"                                    }, function(err, res) {",
							"                                        if (err !== null) {",
							"                                            console.log(\"Test user login error: \" + err);",
							"                                        } else {",
							"                                            if (res.code === 201) {",
							"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
							"                                            } else {",
							"                                                console.log(\"Test user login failed: \" + res.reason());",
							"                                            }",
							"                                        }",
							"                                    });",
							"                                } else {",
							"                                    console.log(\"permissions creation failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Auth creation failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User creation failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "830f505f-dd4f-405e-8a1b-537c545d2215",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"403 test\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.environment.unset('test_user_token');",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
							"    method: 'DELETE',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user deletion error: \" + err);",
							"    } else {",
							"        if (res.code === 204) {",
							"            pm.environment.unset('test_user_id');",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
							"                method: 'DELETE',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential deletion error: \" + err);",
							"                } else {",
							"                    if (res.code === 204) {",
							"                        pm.environment.unset('test_user_credId');",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
							"                            method: 'DELETE',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"Permissions deletion error: \" + err);",
							"                            } else {",
							"                                if (res.code === 204) {",
							"                                    pm.environment.unset('test_user_permsId');",
							"                                } else {",
							"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Credential deletion failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User deletion failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{test_user_token}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "b1c95b7b-4325-4a3f-b906-e6daa7202594",
			"name": "/service-points - create - 400",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8fb58109-3a31-4cf4-9c83-3d3040e86d8d",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 400 - malformed request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "387b3760-a40f-4d74-a46d-e8cabc72d0b0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "b3a0fe78-3e67-4969-a5f5-77a1dee81e4f",
			"name": "instancetypes.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instancetypes.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "08ab660d-3aab-46da-a372-dc564cb2586c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"instancetypes.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "b785a137-7b01-4ef0-ba28-9bf2ebeb5843",
			"name": "/instance-storage/instances/{{newinstancestorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ba70b394-6962-470a-84db-0b408ceeb652",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "bc513154-ce81-4bea-9b61-5621fe48873a",
			"name": "/classification-types?limit=100",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=100",
			"description": "Test listing classification types to ensure deleted item is not in the list. Need a higher limit than 10 in case there are more than 10 classification types already. Ideally, use Integer.MAX_VALUE when it is supported by the API.",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "100"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b5946a3-f009-4022-8210-555718d31cde",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"Test list for deleted classification type\", function() {",
							"   pm.expect(pm.response.json().classificationTypes).to.be.an('array').to.not.include.deep.members([{id: pm.environment.get(\"classificationTypeUUID\"), name: \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\")}]);",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "bd1bf4c9-67ef-4134-aa32-dbc618290b1c",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type with an invalid ID",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7fe3af58-ac52-476c-81b9-ef17f2c43ccf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - ID in not valid\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"12345\",\n\t\"name\": \"Test classification type: 12345\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "be5aa4c0-255a-427a-b536-697748eec504",
			"name": "/service-points - get/{id} 404",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9eecf77c-9191-4b3f-b0bc-d89c2ee5c8ca",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 404 - Id not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"pm.test(\"Response must contain an error message\", function () {",
							"    pm.expect(responseBody.toLowerCase().includes(\"no service point exists\")).to.be.true;",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7b2cfe26-1fe1-4e06-9c08-0f5b9d0862b8",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf14ba442c78b2a?566b259eeee\")"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "c1b8701f-710b-4506-b358-f422d04f2fa1",
			"name": "/service-points - 403",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}",
					"enabled": true
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}",
					"enabled": false
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "1098479b-225c-43a6-8f95-e8e32602d830",
						"type": "text/javascript",
						"exec": [
							"var response = responseBody;",
							"",
							"pm.test(\"Status is 403 - no x-okapi-token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(response.includes(\"Access requires permission\")).to.be.true;",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6b8e3b3c-a52f-4bf3-bb2f-4a5172e02e9b",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\n//x-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "c314cb28-1822-4708-87ee-5f969bfff43a",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type with a user that does not have access",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{test_user_token}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "413418be-3cf5-45df-baf4-e7847901d570",
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid');",
							"",
							"pm.environment.set('test_user_id', uuid.v4());",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user creation error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential creation error: \" + err);",
							"                } else {",
							"                    if (res.code === 201) {",
							"                        pm.environment.set('test_user_credId', res.json().id);",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
							"                            method: 'POST',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            },",
							"                            body: {",
							"                                mode: 'raw',",
							"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"permissions creation error: \" + err);",
							"                            } else {",
							"                                if (res.code === 201) {",
							"                                    pm.environment.set('test_user_permsId', res.json().id);",
							"                                    pm.sendRequest({",
							"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"                                        method: 'POST',",
							"                                        header: {",
							"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                            'Content-Type': 'application/json'",
							"                                        },",
							"                                        body: {",
							"                                            mode: 'raw',",
							"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
							"                                        }",
							"                                    }, function(err, res) {",
							"                                        if (err !== null) {",
							"                                            console.log(\"Test user login error: \" + err);",
							"                                        } else {",
							"                                            if (res.code === 201) {",
							"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
							"                                            } else {",
							"                                                console.log(\"Test user login failed: \" + res.reason());",
							"                                            }",
							"                                        }",
							"                                    });",
							"                                } else {",
							"                                    console.log(\"permissions creation failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Auth creation failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User creation failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1b5c32aa-5f40-43ae-aa84-1803fad08ae8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"403 test\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.environment.unset('test_user_token');",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
							"    method: 'DELETE',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user deletion error: \" + err);",
							"    } else {",
							"        if (res.code === 204) {",
							"            pm.environment.unset('test_user_id');",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
							"                method: 'DELETE',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential deletion error: \" + err);",
							"                } else {",
							"                    if (res.code === 204) {",
							"                        pm.environment.unset('test_user_credId');",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
							"                            method: 'DELETE',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"Permissions deletion error: \" + err);",
							"                            } else {",
							"                                if (res.code === 204) {",
							"                                    pm.environment.unset('test_user_permsId');",
							"                                } else {",
							"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Credential deletion failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User deletion failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{test_user_token}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "c3db9722-ab0c-4438-80a9-4fabafc0eabd",
			"name": "/instance-types/{{newinstancetype}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "726cdf1c-d8dd-4463-9879-8559c68f207a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							""
						]
					}
				}
			],
			"folder": "a6549c73-9b76-4358-a93f-c18e0015f66e",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "c660a9fa-43cb-42f2-91ae-378464133198",
			"name": "/service-points - 400 - offset=-1",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points?offset=-1",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "offset",
					"value": "-1",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9b9034d5-2622-4492-867c-53c122581a9f",
						"type": "text/javascript",
						"exec": [
							"/* JIRA: MODINVSTOR-199*/",
							"",
							"//var response = JSON.parse(responseBody);",
							"pm.test(\"Status is 500 - offset = -1\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c39570d-cc68-4444-b090-4dd21a7ee3a1",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "c7411794-8cfb-4ee5-9ec5-d5d4ab134903",
			"name": "/instance-formats/{{newinstanceformat}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5358bb95-dfda-4608-8c4d-e46b68fa746b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "da8bf1ab-26d4-4348-a6ef-80503cc0c78d",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "caa12f56-1aad-4192-9928-bc5287e1969f",
			"name": "/service-points - create - 500",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}",
					"enabled": true
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}",
					"enabled": true
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "9bcbe36b-f0d4-449d-8235-0a47b5e1cda3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 500 - bad id\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							"",
							"/* JIRA: MODINVSTOR-197 */",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.expect(responseBody.toLowerCase().includes(\"errormessage\")).to.be.true; ",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "387b3760-a40f-4d74-a46d-e8cabc72d0b0",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"abacdefakfaskhsdfiaksf asdfkadfka;d jad adajksdasdf sd; jadk faksf asdfj a;sdfk ajsdfkl jasd; fja;sdfjka\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "caf21141-1c50-4a67-a624-a913a9262f5e",
			"name": "/classification-types?lang=",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?lang=",
			"description": "400 test for no lang",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "lang",
					"value": ""
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3f71cf43-1400-41f5-b08c-25fa010e4143",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - empty lang\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "cb6d8f29-0e6a-43be-8281-13b3303c41b2",
			"name": "/instance-storage/instances/{{newinstancestorage}} - updated",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "005c6723-b361-4d7b-ac3e-0a893ad007e3",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the updated instance storage\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancestorage\")); ",
							"    pm.expect(response.title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
							"    pm.expect(response.alternativeTitles[0]).to.be.equal(\"Handbuch der historishen Buchbestände\"); ",
							"});",
							"",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instance.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "1853ce5d-03ef-483d-841c-e107daca0bfa",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "cbcb7084-88dc-4642-b5ff-b3b69843bd5f",
			"name": "/holdings-storage/holdings/{{newholdingstorage}} - updated",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ce4263b4-3217-41de-9b85-ade1faf38abc",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must instanceId of the new holding storage\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newholdingstorage\")); ",
							"    pm.expect(response.holdingsStatements[0]).to.be.equal(\"my first line of the holdings statement\");",
							"});",
							"",
							"pm.test(\"Validate schema\", function () {",
							"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecord.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
							"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
							"});",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"",
							""
						]
					}
				}
			],
			"folder": "e3ea8738-6d2b-4a59-ad16-a1e38560c28c",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "cc6f43f9-31d8-4894-8667-1898c3dd320d",
			"name": "/item-storage/items/{{newitemstorage}}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "d1330b14-58ab-412e-8c8f-4e6be901a04f",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain  the new item storage\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newitemstorage\")); ",
							"   });",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"item.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "bb8b84e7-782d-482b-acb9-7a6428102711",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "d1d83457-77fe-4b17-99ce-3e25c5eea645",
			"name": "/service-points - create - 422",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}",
					"enabled": true
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}",
					"enabled": true
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b3f0d64f-dd75-4c0a-9cc2-af554b65063a",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 422 - missing code, id\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must have error message\", function () {",
							"    pm.expect(response.errors).to.have.lengthOf(1);",
							"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"code\");",
							"    pm.expect(response.errors[0].message).to.equal(\"may not be null\");",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d827514b-39a6-4548-9bff-f5bed0f91721",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4644\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways4\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17874\");",
							"pm.environment.set(\"svptName\", \"Circ desk 24\");",
							"pm.environment.set(\"svcptCode\", \"cd4\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"name\" : \"{{svptName}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "d2a48944-0b09-4b4a-ba50-a062c7b8a9a4",
			"name": "/service-points - get - Query string",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points?query=name=={{svptName}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "name=={{svptName}}",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "fcfb9e2d-3f8f-4050-a6b6-8f63f90feae4",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200 - service-points returned\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must contain the service point object created\", function () {",
							"    ",
							"    var matchingSvcptFound = false;",
							"    ",
							"    response.servicepoints.forEach( el => {",
							"        if (el.id == pm.environment.get(\"svcptId\")){",
							"            pm.expect(el.id).to.be.equal(pm.environment.get(\"svcptId\"));",
							"            pm.expect(el.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
							"            pm.expect(el.name).to.be.equal(pm.environment.get(\"svptName\"));",
							"            pm.expect(el.code).to.be.equal(pm.environment.get(\"svcptCode\"));",
							"            pm.expect(el.metadata.createdByUserId).to.be.equal(pm.environment.get(\"userId\"));",
							"            ",
							"            matchingSvcptFound = true;",
							"        }",
							"    })",
							"    ",
							"    if (!matchingSvcptFound){",
							"        pm.expect.fail(matchingSvptFound, true, \"could not find expected service point in list\");",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c39570d-cc68-4444-b090-4dd21a7ee3a1",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "d39251ee-ced8-4d22-a08b-911c91eb12a0",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Return an existing classification type using a user that does not have access",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{test_user_token}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b380a4fd-896b-4b02-96fd-bc2be5c228d2",
						"type": "text/javascript",
						"exec": [
							"var uuid = require('uuid');",
							"",
							"pm.environment.set('test_user_id', uuid.v4());",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user creation error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
							"                method: 'POST',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential creation error: \" + err);",
							"                } else {",
							"                    if (res.code === 201) {",
							"                        pm.environment.set('test_user_credId', res.json().id);",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
							"                            method: 'POST',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            },",
							"                            body: {",
							"                                mode: 'raw',",
							"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"permissions creation error: \" + err);",
							"                            } else {",
							"                                if (res.code === 201) {",
							"                                    pm.environment.set('test_user_permsId', res.json().id);",
							"                                    pm.sendRequest({",
							"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"                                        method: 'POST',",
							"                                        header: {",
							"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                            'Content-Type': 'application/json'",
							"                                        },",
							"                                        body: {",
							"                                            mode: 'raw',",
							"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
							"                                        }",
							"                                    }, function(err, res) {",
							"                                        if (err !== null) {",
							"                                            console.log(\"Test user login error: \" + err);",
							"                                        } else {",
							"                                            if (res.code === 201) {",
							"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
							"                                            } else {",
							"                                                console.log(\"Test user login failed: \" + res.reason());",
							"                                            }",
							"                                        }",
							"                                    });",
							"                                } else {",
							"                                    console.log(\"permissions creation failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Auth creation failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User creation failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cc0a7073-1888-4d5d-b4c1-0939a5060ce7",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"403 test\", function() {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"let token = pm.environment.get(\"xokapitoken\");",
							"",
							"pm.environment.unset('test_user_token');",
							"",
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
							"    method: 'DELETE',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'X-Okapi-Token': token,",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"user deletion error: \" + err);",
							"    } else {",
							"        if (res.code === 204) {",
							"            pm.environment.unset('test_user_id');",
							"            pm.sendRequest({",
							"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
							"                method: 'DELETE',",
							"                header: {",
							"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                    'X-Okapi-Token': token,",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                if (err !== null) {",
							"                    console.log(\"Credential deletion error: \" + err);",
							"                } else {",
							"                    if (res.code === 204) {",
							"                        pm.environment.unset('test_user_credId');",
							"                        pm.sendRequest({",
							"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
							"                            method: 'DELETE',",
							"                            header: {",
							"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"                                'X-Okapi-Token': token,",
							"                                'Content-Type': 'application/json'",
							"                            }",
							"                        }, function(err, res) {",
							"                            if (err !== null) {",
							"                                console.log(\"Permissions deletion error: \" + err);",
							"                            } else {",
							"                                if (res.code === 204) {",
							"                                    pm.environment.unset('test_user_permsId');",
							"                                } else {",
							"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
							"                                }",
							"                            }",
							"                        });",
							"                    } else {",
							"                        console.log(\"Credential deletion failed: \" + res.reason());",
							"                    }",
							"                }",
							"            });",
							"        } else {",
							"            console.log(\"User deletion failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{test_user_token}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "d481f3a6-945e-4e04-9810-ebd3fed21524",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Return a deleted classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2e7305f2-4a6f-41fc-9b79-f06be199e868",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"404 test\", function() {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "d5302338-b49b-4955-b63b-1a0af92c074e",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Delete an existing classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9de69792-028e-4c29-a837-e32af804f7de",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.not.have.body();",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "d9ef29ca-6d5e-4189-83d6-bcb436e835aa",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Delete an existing classification type using an invalid token",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "DELETE",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "49915d8b-d64d-4dbb-a70d-1160fdb15a9f",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset('xokapitoken-classification-types');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6bab3d4c-891f-457d-999f-a5cc7205a1cf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"401 test\", function() {",
							"    pm.response.to.have.status(401);",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "db46992e-bf19-4a7e-beb8-308bfc1e9c6a",
			"name": "metadata.schema",
			"url": "{{schema_loc}}/raml/master/schemas/{{schema_metadatafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "05891d96-1ee4-487e-a6b9-83f8c1f2ab1c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"GET schema_metadata OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"GET schema_metadata has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"metadata.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "ddd75fa4-0022-4f06-a6ed-8896f0be5177",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Check for auth token not set",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bbeea6bb-1b38-4707-aeed-50cdd8d4113b",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset('xokapitoken-classification-types');"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f3bf31cf-c9d7-4bdc-a82b-5f9417a46c3c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"401 test\", function() {",
							"    pm.response.to.have.status(401);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "df0a99ac-e539-4dbf-b405-778e1929d716",
			"name": "/loan-types - 'can circulate'",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(name=can circulate)",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "query",
					"value": "(name=can circulate)"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "5fa375b2-9458-4bce-ab40-aa26bd4ee0a3",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    tv4.addSchema(\"loantype.json\", JSON.parse(pm.variables.get(\"loantype.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"loantypes.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							" });",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "36ed7f9e-4e54-4858-bc64-9bf95489a9a2",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		},
		{
			"id": "e0604a7d-cbd9-4c3d-b386-65ad1d4e8531",
			"name": "/classification-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
			"description": "Create a new classification type with an ID that already exists",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "06ad118b-553f-498a-bffe-8f2b1e9de596",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - ID already exists\", function() {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "e436c460-f363-4125-80e7-f23e41f49a2f",
			"name": "authn/login",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json"
				},
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "POST",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "dc368b0e-c77a-443f-898a-662ba1a3366f",
						"type": "text/javascript",
						"exec": [
							"var token = postman.getResponseHeader(\"x-okapi-token\");",
							"pm.environment.set(\"xokapitoken\", token);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
							"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"//     pm.response.to.have.header(\"x-okapi-user-id\");",
							"// });",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				}
			],
			"folder": "4ad88661-5fdf-4bc8-a45b-9d36d3534126",
			"rawModeData": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}",
			"headers": "Content-Type: application/json\nx-okapi-tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "e4a91395-f015-4c4a-a35d-18b0d5adc974",
			"name": "/classification-types/12345",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
			"description": "Return an existing classification type using an invalid UUID on the URL. I posit that the response status code should be consistent with PUT and DELETE, returning 400. Currently, this returns 404. See [MODINVSTOR-69](https://issues.folio.org/browse/MODINVSTOR-69).",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d1eacfb-14e4-4fcf-9e4a-9448448716c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d73eae7b-75aa-4fe0-bbe6-2ad2212dc3d6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - invalid UUID on URL\", function() {",
							"    pm.response.to.have.status(404); // Should be 400!",
							"    pm.response.to.have.body();",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "e4c4df74-e79f-4038-9c19-64645bc6d9f4",
			"name": "/classification-types?lang=A1",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?lang=A1",
			"description": "400 test for lang regex",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "lang",
					"value": "A1"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "64184f81-0134-4c68-954d-fd24207f80ca",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - lang regex\", function() {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "e775aa50-a898-40e8-a234-2ab6951ba8c2",
			"name": "/service-points - 400 - limit=-1",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points?limit=-1",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "-1",
					"equals": true,
					"description": "",
					"enabled": true
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "0e6f0e29-2d64-4834-8898-c70f05ea56fb",
						"type": "text/javascript",
						"exec": [
							"/* JIRA: MODINVSTOR-199*/",
							"//var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 500 - limit =-1\", function () {",
							"    pm.response.to.have.status(500);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c39570d-cc68-4444-b090-4dd21a7ee3a1",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"cd9\");",
							"pm.environment.set(\"svptName\", \"Circ desk 28\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"Circ desk 28\",\n\t\"code\" : \"cd6\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\"]\n\t\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "e8f0342e-f593-4a5a-9a5c-55a67b98b9bd",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Update a deleted classification type",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e46b7f39-f6bf-4e8c-b3fc-500c28eb8b0b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"404 test\", function() {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.have.body();",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "edd8f7da-3f00-4281-a365-7f1ac5a8112c",
			"name": "/service-points - put/{id} - modify",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": ""
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "ca270fbc-5802-4a20-bd1f-ee910020770f",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 204 - service-point updated\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2cc4aad3-00b1-466c-a2d0-a9f03df5125d",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"modified-cd6\");",
							"pm.environment.set(\"svptName\", \"modified-Circ desk 28\");",
							"pm.environment.set(\"locationId\", \"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\");"
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\",\n\t\"locationIds\" : [\n\t\t\"{{locationId}}\"\n\t]\n}",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "edeb85be-715c-4e36-ac86-64eef11d7a11",
			"name": "instancefromat.schema",
			"url": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instanceformat.schemafile}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "b811a694-db3e-46c4-8f95-06f7e47525f3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"instanceformat.schema\", responseBody);"
						]
					}
				}
			],
			"folder": "8697eaf6-2207-450b-a38d-be2edab8fd39",
			"rawModeData": "",
			"headers": "",
			"pathVariables": {}
		},
		{
			"id": "eee40111-39e2-49b8-8d48-5116e0ac0570",
			"name": "/classification-types?limit=100",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=100",
			"description": "Test listing classification types to ensure added item is in the list. Need a higher limit than 10 in case there are more than 10 classification types already. Ideally, use Integer.MAX_VALUE when it is supported by the API.",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [
				{
					"key": "limit",
					"value": "100"
				}
			],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c569ad59-27fe-4d3f-aa2e-0229bd7db5c8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"success test\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
							"",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"pm.test(\"Test list for added classification type\", function() {",
							"   pm.expect(pm.response.json().classificationTypes).to.be.an('array').to.include.deep.members([{id: pm.environment.get(\"classificationTypeUUID\"), name: \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\")}]);",
							"});"
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\n",
			"pathVariables": {}
		},
		{
			"id": "f20a7d7d-20ee-49af-818f-d2ed299a62d1",
			"name": "/classification-types/{classificationTypeId}",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
			"description": "Update an existing classification type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-68](https://issues.folio.org/browse/MODINVSTOR-68).",
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "X-Okapi-Token",
					"value": "{{xokapitoken-classification-types}}"
				},
				{
					"key": "X-Okapi-Tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json"
				}
			],
			"method": "PUT",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fca7874a-6688-427f-9fcb-05a87a42266a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"400 test - IDs don't match\", function() {",
							"    pm.response.to.have.status(204); // Should be 400!",
							"    //pm.response.to.have.body(); // no body with a 204 :(",
							"});",
							""
						]
					}
				}
			],
			"folder": "318f3762-e2bd-4c02-9baa-80978c033c80",
			"rawModeData": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}",
			"headers": "X-Okapi-Token: {{xokapitoken-classification-types}}\nX-Okapi-Tenant: {{xokapitenant}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "fe8dce2c-3088-4c7c-ac18-ec81520afee7",
			"name": "/service-points - get/{id} - post PUT verification",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				},
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "8c70e422-a936-4102-849c-67e28789691d",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200 - service-point found\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"Response must contain the service point object being looked up\", function () {",
							"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
							"    pm.expect(response.discoveryDisplayName.includes(\"modified\")).to.be.true;",
							"    pm.expect(response.name.includes(\"modified\")).to.be.true;",
							"    pm.expect(response.code.includes(\"modified\")).to.be.true;",
							"    pm.expect(response.metadata.createdByUserId).to.be.equal(pm.environment.get(\"userId\"));",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "51fc26d0-60f8-4016-9b26-31a88d86a20b",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
							"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
							"pm.environment.set(\"userId\", \"ef676db9-d231-479a-aa91-f65eb4b17872\");",
							"pm.environment.set(\"svcptCode\", \"modified-cd6\");",
							"pm.environment.set(\"svptName\", \"modified-Circ desk 28\");",
							"pm.environment.set(\"locationId\", \"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\");",
							""
						]
					}
				}
			],
			"folder": "e44199c7-2e20-4681-816a-71d6d762cfbb",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\nContent-Type: application/json\n",
			"pathVariables": {}
		},
		{
			"id": "fef1f341-9cfb-4d30-98ba-ec1a679b8821",
			"name": "/material-types",
			"url": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
			"description": null,
			"data": [],
			"dataMode": "raw",
			"headerData": [
				{
					"key": "x-okapi-tenant",
					"value": "{{xokapitenant}}"
				},
				{
					"key": "x-okapi-token",
					"value": "{{xokapitoken}}"
				}
			],
			"method": "GET",
			"pathVariableData": [],
			"queryParams": [],
			"auth": null,
			"events": [
				{
					"listen": "test",
					"script": {
						"id": "7791fe74-0b3b-4c98-9e7e-4d4ee96431bc",
						"type": "text/javascript",
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
							"    tv4.addSchema(\"materialtype.json\", JSON.parse(pm.variables.get(\"materialtype.schema\")));",
							"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtypes.schema\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});"
						]
					}
				}
			],
			"folder": "b03906b2-f589-42f9-826d-0349ddbe73a4",
			"rawModeData": "",
			"headers": "x-okapi-tenant: {{xokapitenant}}\nx-okapi-token: {{xokapitoken}}\n",
			"pathVariables": {}
		}
	]
}