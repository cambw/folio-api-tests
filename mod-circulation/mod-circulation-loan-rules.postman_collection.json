{
	"info": {
		"_postman_id": "f3210e63-c687-41ce-b344-dcce7fd196d1",
		"name": "mod-circulation-loan-rules",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan-rules.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "236e989e-480f-4c76-9222-31f562c5e928",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-rules_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-rules}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-rules}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan-rule-matches.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf5d1ce9-0e20-4429-a66b-3cbc5d9374f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-rule-matches_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-rule-matches}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-rule-matches}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan-rule-match.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6882098-61ac-4758-882b-90e0a1793d3c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-rule-match_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-rule-match}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-rule-match}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan-policy-id.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35694807-fd46-4fbb-8249-fd0acb02b38b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-policy-id_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-policy-id}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-policy-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c7d7898-4217-46d0-867d-d66f57fb4072",
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-permissions-required' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-permissions-required\");",
									"// });",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-user-id\");",
									"// });",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setting test data",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3f61cdb-c523-4615-adcf-62b6eb2a6f6e",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let len = response.users.length;",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_userid\", response.users[len-1].id);",
									"}   ",
									"else {",
									"       console.log('NO USERS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users?=limit=10",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "",
									"value": "limit=10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57c498f4-d33b-4abe-9033-b32ed0e6b134",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.items.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_itemid\", response.items[len-1].id);",
									"}",
									"else {",
									"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?limit=10&query=(status.name=Available*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "(status.name=Available*)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/loan-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad1226f1-4fb5-4161-bcd3-f9159aa481e5",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.loantypes.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"loan_type_id\", response.loantypes[len-1].id);",
									"}",
									"else {",
									"      console.log('NO LOAN TYPEs FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "list of patron groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fcba284-79da-4a18-b27b-03742dca82ef",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.usergroups.length;",
									"",
									"if(len > 2){",
									"    pm.environment.set(\"patron_grp_1\", response.usergroups[len-1].id);",
									"    pm.environment.set(\"patron_grp_2\", response.usergroups[len-2].id);",
									"}",
									"else {",
									"      console.log('NOT SUFFICIENT patron groups found - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=cql.allRecords=1 sortby group&limit=500",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "query",
									"value": "cql.allRecords=1 sortby group"
								},
								{
									"key": "limit",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "list of material types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e26cd5ec-cbfe-407c-bac0-7a200087e00f",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.mtypes.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"mtypes\", response.mtypes[len-1].id);",
									"}",
									"else {",
									"      console.log('NO material types found - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-A",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "165c3842-ff82-4a86-b631-aadec7e3f3b5",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"if(response){",
									"    pm.environment.set(\"policyidA\", response.id);",
									"}",
									"else {",
									"      console.log('Invalid loan policy response body');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"name\": \"Test Policy-A\",\n            \"description\": \"An example test loan policy A\",\n            \"loanable\": true,\n            \"loansPolicy\": {\n                \"profileId\": \"Rolling\",\n                \"period\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Months\"\n                },\n                \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\n                \"existingRequestsPeriod\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Weeks\"\n                },\n                \"gracePeriod\": {\n                    \"duration\": 7,\n                    \"intervalId\": \"Days\"\n                }\n            },\n            \"renewable\": true,\n            \"renewalsPolicy\": {\n                \"unlimited\": true,\n                \"renewFromId\": \"CURRENT_DUE_DATE\",\n                \"differentPeriod\": true,\n                \"period\": {\n                    \"duration\": 30,\n                    \"intervalId\": \"Days\"\n                }\n            }\n        }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-B",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "948ac1fa-75b8-423f-85e8-65153bf43b99",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"if(response){",
									"    pm.environment.set(\"policyidB\", response.id);",
									"}",
									"else {",
									"      console.log('Invalid loan policy response body');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"name\": \"Test Policy-B\",\n            \"description\": \"An example test loan policy B\",\n            \"loanable\": true,\n            \"loansPolicy\": {\n                \"profileId\": \"Rolling\",\n                \"period\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Months\"\n                },\n                \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\n                \"existingRequestsPeriod\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Weeks\"\n                },\n                \"gracePeriod\": {\n                    \"duration\": 7,\n                    \"intervalId\": \"Days\"\n                }\n            },\n            \"renewable\": true,\n            \"renewalsPolicy\": {\n                \"unlimited\": true,\n                \"renewFromId\": \"CURRENT_DUE_DATE\",\n                \"differentPeriod\": true,\n                \"period\": {\n                    \"duration\": 30,\n                    \"intervalId\": \"Days\"\n                }\n            }\n        }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-C",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a30755e7-0d82-43b7-be55-54fd18ea179f",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"if(response){",
									"    pm.environment.set(\"policyidC\", response.id);",
									"}",
									"else {",
									"      console.log('Invalid loan policy response body');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"name\": \"Test Policy-C\",\n            \"description\": \"An example test loan policy C\",\n            \"loanable\": true,\n            \"loansPolicy\": {\n                \"profileId\": \"Rolling\",\n                \"period\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Months\"\n                },\n                \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\n                \"existingRequestsPeriod\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Weeks\"\n                },\n                \"gracePeriod\": {\n                    \"duration\": 7,\n                    \"intervalId\": \"Days\"\n                }\n            },\n            \"renewable\": true,\n            \"renewalsPolicy\": {\n                \"unlimited\": true,\n                \"renewFromId\": \"CURRENT_DUE_DATE\",\n                \"differentPeriod\": true,\n                \"period\": {\n                    \"duration\": 30,\n                    \"intervalId\": \"Days\"\n                }\n            }\n        }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-D",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "211ae559-f3e7-4537-bbab-0cb169be5887",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"if(response){",
									"    pm.environment.set(\"policyidD\", response.id);",
									"}",
									"else {",
									"      console.log('Invalid loan policy response body');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"name\": \"Test Policy-D\",\n            \"description\": \"An example test loan policy D\",\n            \"loanable\": true,\n            \"loansPolicy\": {\n                \"profileId\": \"Rolling\",\n                \"period\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Months\"\n                },\n                \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\n                \"existingRequestsPeriod\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Weeks\"\n                },\n                \"gracePeriod\": {\n                    \"duration\": 7,\n                    \"intervalId\": \"Days\"\n                }\n            },\n            \"renewable\": true,\n            \"renewalsPolicy\": {\n                \"unlimited\": true,\n                \"renewFromId\": \"CURRENT_DUE_DATE\",\n                \"differentPeriod\": true,\n                \"period\": {\n                    \"duration\": 30,\n                    \"intervalId\": \"Days\"\n                }\n            }\n        }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-Fallback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "690809ba-88fa-4621-85cf-8fc2fd41dbcb",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"if(response){",
									"    pm.environment.set(\"policyidFallback\", response.id);",
									"}",
									"else {",
									"      console.log('Invalid loan policy response body');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n            \"name\": \"Test Fallback\",\n            \"description\": \"An example test loan policy for fall back\",\n            \"loanable\": true,\n            \"loansPolicy\": {\n                \"profileId\": \"Rolling\",\n                \"period\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Months\"\n                },\n                \"closedLibraryDueDateManagementId\": \"KEEP_CURRENT_DATE\",\n                \"existingRequestsPeriod\": {\n                    \"duration\": 1,\n                    \"intervalId\": \"Weeks\"\n                },\n                \"gracePeriod\": {\n                    \"duration\": 7,\n                    \"intervalId\": \"Days\"\n                }\n            },\n            \"renewable\": true,\n            \"renewalsPolicy\": {\n                \"unlimited\": true,\n                \"renewFromId\": \"CURRENT_DUE_DATE\",\n                \"differentPeriod\": true,\n                \"period\": {\n                    \"duration\": 30,\n                    \"intervalId\": \"Days\"\n                }\n            }\n        }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "circulation/loan-rules patron groups",
			"item": [
				{
					"name": "/circulation/loan-rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6757a0c-ee6a-48f3-a80f-ce2ace1a317c",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"originalRulesAsTextFile\", JSON.stringify(response.loanRulesAsTextFile));",
									"console.log(`original set of rules in this environment is--> ${response.loanRulesAsTextFile}`);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-rules_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6191ff1b-574d-4ed4-857d-1527e5069217",
								"type": "text/javascript",
								"exec": [
									"// If none of the rules match policy id should match the fall back policy id",
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{$guid}}&loan_type_id={{$guid}}&patron_type_id={{$guid}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules two level hierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ab6810-3e52-4c51-bba6-be0f38c1a264",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2e3bc3e7-2453-47e6-a57e-c44f5b75446a",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority: g, m, c, b, a, s, t\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\nm ${pm.environment.get(\"mtypes\")}: ${pm.environment.get(\"policyidA\")}\\ng ${pm.environment.get(\"patron_grp_1\")} :${pm.environment.get(\"policyidB\")} \\n    m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidC\")}`",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						},
						"description": "Test for nested or two level policy rules"
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply two level hierarchy Verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98a4c006-c930-4291-b480-15b5168ffc73",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"The resulting policy id should match with policy C id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidC\")).to.be.equal(response.loanPolicyId);",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_1}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_1}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules Criterium type priority ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ab6810-3e52-4c51-bba6-be0f38c1a264",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8898fb0f-a466-4040-99e0-9b7a80a29e4c",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority:g, m, c, b, a, s, t\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\nm ${pm.environment.get(\"mtypes\")}: ${pm.environment.get(\"policyidA\")}\\ng ${pm.environment.get(\"patron_grp_1\")} :${pm.environment.get(\"policyidB\")}\\nt ${pm.environment.get(\"loan_type_id\")}:${pm.environment.get(\"policyidC\")}`",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						},
						"description": "Test for priority order with patron groups as highest so order will be priority:g, m, c, b, a, s, t"
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply Criterium type priority Verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74d3fca5-8de6-4e91-9388-7c180b1a5fba",
								"type": "text/javascript",
								"exec": [
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"The resulting policy id should match with policy B id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidB\")).to.be.equal(response.loanPolicyId);",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_1}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_1}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules Rule Specific Priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f132140-b4b2-41e6-b870-d4290b4e7bf5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b1cc784b-6fa4-4e3f-bbbf-9858143bda4e",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority: g, m, c, b, a, s, t\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\ng ${pm.environment.get(\"patron_grp_2\")}: ${pm.environment.get(\"policyidA\")}\\ng ${pm.environment.get(\"patron_grp_2\")} :${pm.environment.get(\"policyidB\")} \\n    m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidC\")}\\nt ${pm.environment.get(\"loan_type_id\")}+m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidD\")}`",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply Rule Specific Priority Verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7fde62b-21f4-4c67-bc63-acd32ae2db83",
								"type": "text/javascript",
								"exec": [
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"The resulting policy id should match with policy B id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidC\")).to.be.equal(response.loanPolicyId);",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_2}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_2}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply Rule Specific Priority Verify fallBack",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e86a943e-ce5d-45e4-8823-d41e1482e52a",
								"type": "text/javascript",
								"exec": [
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"The resulting policy id should match with policy D id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidD\")).to.be.equal(response.loanPolicyId);",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_1}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_1}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						},
						"description": "If the rule doesnt match need to fall under fallback"
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules Rule Specific Priority All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5164c3a7-f90c-4a1a-a0b5-4b55d1e5c090",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cce84a77-4bcc-49c6-821a-059de73d0640",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority: g, m, c, b, a, s, t\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\ng all+m all+t all: ${pm.environment.get(\"policyidA\")}\\ng ${pm.environment.get(\"patron_grp_2\")} :${pm.environment.get(\"policyidB\")} \\n    m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidC\")}\\nt ${pm.environment.get(\"loan_type_id\")}+m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidD\")}`",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply Rule Specific Priority Verify All",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78c00cef-ead7-4bda-b00e-d586e93a7e6e",
								"type": "text/javascript",
								"exec": [
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"The resulting policy id should match with policy A id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidA\")).to.be.equal(response.loanPolicyId);",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_1}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_1}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules Line number priority",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ab6810-3e52-4c51-bba6-be0f38c1a264",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aca55e77-4adb-441a-81c9-2c31e9c4f22a",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority: g, m, c, b, a, s, t\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\ng all: ${pm.environment.get(\"policyidA\")}\\ng all:${pm.environment.get(\"policyidB\")} \\ng all:${pm.environment.get(\"policyidD\")}`",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply Line number Priority Verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4155a601-4a51-4814-b139-20c0eb9a1d9d",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"The resulting policy id should match with policy D id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidD\")).to.be.equal(response.loanPolicyId);",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_1}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_1}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules  Modifier (! or not)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ab6810-3e52-4c51-bba6-be0f38c1a264",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb0348fd-04ca-4356-99a4-bedb45432e9a",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority: g, m, c, b, a, s, t\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\nm ${pm.environment.get(\"mtypes\")}: ${pm.environment.get(\"policyidA\")}\\ng !${pm.environment.get(\"patron_grp_1\")} :${pm.environment.get(\"policyidB\")} \\n    m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidC\")}`",
									"",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						},
						"description": "All patraon groups except patron group1 can get the policy C priority"
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply Modifier (! or not)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f49aa051-ef8f-4577-b6c9-544c3664b036",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"The resulting policy id should match with policy C id with the current rule\", function () {",
									"    pm.expect(pm.environment.get(\"policyidC\")).to.be.equal(response.loanPolicyId);",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{mtypes}}&loan_type_id={{loan_type_id}}&patron_type_id={{patron_grp_2}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{mtypes}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{loan_type_id}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{patron_grp_2}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules 422 Error invalid entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "554ae196-f85c-4859-b6f7-59c85a74973a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0e411381-f402-434c-9367-0a0cb232e695",
								"type": "text/javascript",
								"exec": [
									"const payload = `priority: g, m, c, b, a, s, t,\\nfallback-policy: ${pm.environment.get(\"policyidFallback\")}\\ng ${pm.environment.get(\"patron_grp_2\")}: ${pm.environment.get(\"policyidA\")}\\ng ${pm.environment.get(\"patron_grp_2\")} :${pm.environment.get(\"policyidB\")} \\n  m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidC\")}\\nt ${pm.environment.get(\"loan_type_id\")}+m ${pm.environment.get(\"mtypes\")}:${pm.environment.get(\"policyidD\")}`",
									"",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(payload));"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules reset the rules to original",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ab6810-3e52-4c51-bba6-be0f38c1a264",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{originalRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loan-rules/apply-all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbba5dcf-9527-4792-8639-f7e734f0a885",
								"type": "text/javascript",
								"exec": [
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"loan-rule-match.json\", JSON.parse(pm.environment.get(\"schema_loan-rule-match_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-rule-matches_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply-all?item_type_id={{$guid}}&loan_type_id={{$guid}}&patron_type_id={{$guid}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply-all"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "645ed490-686a-47f3-9f3a-dededdd9b5b9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "50fe7813-3ff4-4e84-b7c9-9e855ef5ccd2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "cleanup",
			"item": [
				{
					"name": "loan polices policy-A",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidA}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "policy A by ID -verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9367c6d-c95a-454f-adef-ce2d4f133d12",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.environment.unset(\"policyidA\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidA}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidA}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-B",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidB}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidB}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "policy B by ID -verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d09071d-f88c-4fca-9c3c-1c8cafb28ddd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.environment.unset(\"policyidB\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidB}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidB}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-C",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidC}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidC}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "policy C by ID -verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47e0a6b2-7b92-43c4-9b1e-c13cf2c6d930",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.environment.unset(\"policyidC\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidC}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidC}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-D",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidD}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "policy D by ID -verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2297866e-94a2-4908-8eb7-c9a4350dc8f8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.environment.unset(\"policyidD\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidD}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidD}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loan polices policy-Fallback",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidFallback}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidFallback}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "policy fallback by ID -verify Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccdda5e9-aa63-4d2f-8715-0df55346c376",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"pm.environment.unset(\"policyidFallback\");",
									"",
									"",
									"pm.environment.unset(\"loanRulesAsTextFile\");",
									"pm.environment.unset(\"originalRulesAsTextFile\");",
									"pm.environment.unset(\"loan_type_id\");",
									"pm.environment.unset(\"mtypes\");",
									"pm.environment.unset(\"patron_grp_1\");",
									"pm.environment.unset(\"patron_grp_2\");",
									"",
									"",
									"//schema variables",
									"pm.environment.unset(\"schema_parameters_content\");",
									"pm.environment.unset(\"schema_error_content\");",
									"pm.environment.unset(\"schema_errors_content\");",
									"pm.environment.unset(\"schema_loan-rules_content\");",
									"pm.environment.unset(\"schema_loan-rule_content\");",
									"pm.environment.unset(\"schema_loan-rule-matches_content\");",
									"pm.environment.unset(\"schema_loan-rule-match_content\");",
									"",
									"pm.environment.unset(\"schema_loan-policy-id_content\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-policy-storage/loan-policies/{{policyidFallback}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-policy-storage",
								"loan-policies",
								"{{policyidFallback}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bd336eec-9214-4ee9-8979-19fda6d938b2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "42c60b31-caea-44d3-89f5-260cf60efc3f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "396439d5-6938-4abb-970c-acc0b99e8088",
			"key": "mod_name",
			"value": "mod-circulation",
			"type": "string"
		},
		{
			"id": "adf7a772-b423-4c4f-8a48-d7d9633a9703",
			"key": "mod_version",
			"value": "v10.1.2",
			"type": "string"
		},
		{
			"id": "8a9bf1ce-7500-4987-89ea-97c9471e32e6",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "36fb7045-3679-4e41-b213-c0d93180be9f",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "f25c0c3f-00ee-419e-82ac-01ea255aea67",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "5c89b5b0-cb44-4b65-b680-a452e67dffe9",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "6928f9de-84a4-49dd-89a2-a4b630b5d3f6",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "29265172-842c-4941-9f64-203339c2626b",
			"key": "schema_loans",
			"value": "loans.json",
			"type": "string"
		},
		{
			"id": "09a7760a-05b5-4693-9768-24c49d74cd72",
			"key": "schema_loan",
			"value": "loan.json",
			"type": "string"
		},
		{
			"id": "098db76a-9789-4ad5-b495-4f8e7637509a",
			"key": "schema_loan-rules",
			"value": "loan-rules.json",
			"type": "string"
		},
		{
			"id": "4720c477-ae17-47db-a721-9b02fe5968b1",
			"key": "schema_loan-rule-matches",
			"value": "loan-rule-matches.json",
			"type": "string"
		},
		{
			"id": "f9ff849b-ca72-48d8-94f9-540866d435ad",
			"key": "schema_loan-rule-match",
			"value": "loan-rule-match.json",
			"type": "string"
		},
		{
			"id": "389f338d-e601-44b8-b209-b696fe29ae4e",
			"key": "schema_loan-policy-id",
			"value": "loan-policy-id.json",
			"type": "string"
		},
		{
			"id": "bff69b89-b5f6-49cd-b421-5ce54ca1c5ad",
			"key": "schema_requests",
			"value": "requests.json",
			"type": "string"
		},
		{
			"id": "fed7d862-737a-4cfa-be71-6e8e0a127698",
			"key": "schema_request",
			"value": "request.json",
			"type": "string"
		},
		{
			"id": "f299ffa3-4378-4b76-b970-6dfd23ffa665",
			"key": "schema_commit",
			"value": "20d6bc5c61c8509e203ea4fe0ce94ddb067200ba",
			"type": "string"
		}
	]
}