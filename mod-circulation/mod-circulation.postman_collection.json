{
	"info": {
		"_postman_id": "d0a729ff-aed2-4f00-9f92-ad8a4aabb06f",
		"name": "mod-circulation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"_postman_id": "5c04c2db-27be-411f-aa3b-92e24c1666e3",
			"name": "schemas",
			"item": [
				{
					"_postman_id": "26216bfa-b2e6-46d5-9203-57a2d876db31",
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f8b3a7f7-5f66-4423-a662-085645ed887c",
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "7085567b-f7be-453c-acf4-a31ebded549e",
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5b66d07d-d029-4c7b-9a0a-e1594baeb673",
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_parameters_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/master/schemas/{{schema_parameters}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"master",
								"schemas",
								"{{schema_parameters}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "46a8ef52-1cd5-45bd-8164-0943e4d43bf6",
					"name": "loans.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "568864fa-8195-4f4d-b493-e89d1000cd02",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loans_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_loans}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_loans}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c71e23c8-9151-4363-adfd-67a92354035f",
					"name": "loan.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d61b853-1f82-44a4-844a-3734a758a26b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_loan}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_loan}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "d61f4480-553d-4542-ad5c-621ccf7f49bb",
					"name": "loan-rules.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "236e989e-480f-4c76-9222-31f562c5e928",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-rules_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-rules}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-rules}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5ace9ea6-bcd6-4bed-82c8-fd8b33a3a69b",
					"name": "loan-rule-matches.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf5d1ce9-0e20-4429-a66b-3cbc5d9374f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-rule-matches_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-rule-matches}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-rule-matches}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "16ebc255-a7d1-41ca-8f4e-9742effe951b",
					"name": "loan-rule-match.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6882098-61ac-4758-882b-90e0a1793d3c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-rule-match_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-rule-match}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-rule-match}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "abf147fd-20c2-4006-8d99-cfd94230fbe7",
					"name": "loan-policy-id.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35694807-fd46-4fbb-8249-fd0acb02b38b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_loan-policy-id_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/schema/{{schema_loan-policy-id}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"schema",
								"{{schema_loan-policy-id}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "73fdf170-ba11-4bee-bfa4-35de3971de67",
					"name": "requests.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee262032-8630-4ed3-918f-447e91da1e92",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_requests_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_requests}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_requests}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f4fe1a0d-f5a0-4842-99c4-37b49af142c9",
					"name": "request.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51ae954e-38b7-4f42-a992-3b30a6016460",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_request_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}//ramls/{{schema_request}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"",
								"ramls",
								"{{schema_request}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "6062c7fc-aa33-46af-90fc-053cd327879e",
			"name": "authentication",
			"item": [
				{
					"_postman_id": "7969e8c7-6dac-4283-ad03-286cf0ff395a",
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c7d7898-4217-46d0-867d-d66f57fb4072",
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-permissions-required' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-permissions-required\");",
									"// });",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-user-id\");",
									"// });",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "189f0891-5331-46f0-89b6-9fe642572b8f",
			"name": "setting test data",
			"item": [
				{
					"_postman_id": "89e7f8fe-5f23-4c5e-8e44-7343bfa26849",
					"name": "/users -active",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49d30306-1952-4c72-a37b-99e44888d5b8",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let len = response.users.length;",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_userid\", response.users[len-1].id);",
									"     pm.environment.set(\"circ_test_userbarcode\", response.users[len-1].barcode);",
									"}   ",
									"else {",
									"       console.log('NO USERS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users?limit=10&query=active=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "active=true"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "3551821e-deee-4d08-af20-8348fa2775a3",
					"name": "/users - inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bdf3b21-6686-459e-914d-14694f749c63",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let len = response.users.length;",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_inactive_userid\", response.users[len-1].id);",
									"     pm.environment.set(\"circ_test_inactive_userbarcode\", response.users[len-1].barcode);",
									"}   ",
									"else {",
									"       console.log('NO USERS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users?limit=10&query=active=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "active=false"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f51c68a7-9a9b-462d-9e6c-b5541cab1dbc",
					"name": "/users -proxy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef59ae39-8576-46d1-80fb-8a6013692568",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"if(response.totalRecords > 0){",
									"    pm.environment.set(\"circ_test_useridproxyfor\", response.users[len-1].id);",
									"    pm.environment.set(\"circ_test_userbarcodeproxyfor\", response.users[len-1].barcode);",
									"}   ",
									"else {",
									"       console.log('NO PROXY FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN TESTS');",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "276890f8-0db4-4df2-b20e-6b2bf718690b",
					"name": "/users -test user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18ff6ffb-488d-4912-bf15-615f0a666abd",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    console.log(pm.response.json());",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{circ_test_userid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{circ_test_userid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "31b105e2-2c8b-4196-a76b-0bfd35cbe096",
					"name": "/inventory/items - available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbe131d7-7106-45d2-9cf8-c264a50ffd12",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.items.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_itemid\", response.items[len-1].id);",
									"    pm.environment.set(\"circ_test_itembarcode\", response.items[len-1].barcode);",
									"}",
									"else {",
									"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?limit=10&query=(status.name=Available*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "(status.name=Available*)"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1bf66723-6baa-442d-aedd-b36b29ed1d0d",
					"name": "/inventory/items - test item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d10c5f84-7646-43f5-bcf2-85b1d333a7b9",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    console.log(pm.response.json());",
									"});",
									"",
									"",
									"let len = response.items.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_itemid\", response.items[len-1].id);",
									"    pm.environment.set(\"circ_test_itembarcode\", response.items[len-1].barcode);",
									"}",
									"else {",
									"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?limit=10&query=(barcode={{circ_test_itembarcode}})",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "(barcode={{circ_test_itembarcode}})"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "ac27aa18-8665-476f-b524-3f993bdc16b1",
					"name": "/inventory/items - checked out",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91a0b3ac-3342-46a6-9517-e4f5a5b13e4e",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"let len = response.items.length;",
									"",
									"if(len > 0){",
									"    pm.environment.set(\"circ_test_checkeditemid\", response.items[len-1].id);",
									"     pm.environment.set(\"circ_test_checkedbarcode\", response.items[len-1].id);",
									"}",
									"else {",
									"      console.log('NO ITEMS FOUND - ENVIRONMENT NOT SET PROPERLY TO RUN THE TESTS');",
									"",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items?limit=10&query=(status.name=Checked out)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"inventory",
								"items"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "query",
									"value": "(status.name=Checked out)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "0d1a2049-013b-4b61-8666-927b80241f2a",
			"name": "circulation/check-out-by-barcode",
			"item": [
				{
					"_postman_id": "e953c1e8-071b-4a71-9981-fcfaab0876ab",
					"name": "positive",
					"item": [
						{
							"_postman_id": "3bb97255-95d0-4514-9fc5-44f83d8587fb",
							"name": "check-out-by-barcode - required fields only",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9ebed85-4fd9-4c62-a0f3-359cf2e5e837",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "6c6ddeea-0f6b-46d1-99ba-9206265c4708",
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "27b99bbb-38f0-4370-a94e-042b3f3cc1d4",
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "ad3a590f-a418-4661-988a-d9a1a100d576",
							"name": "/circulation/loans{id} - verify delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afdfa2c8-33de-4103-82ad-784b64a041dc",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status is 404\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"// pm.environment.unset(\"circ_test_userid\");",
											"// pm.environment.unset(\"circ_test_itemid\");",
											"// pm.environment.unset(\"test_recipientId\");",
											"// pm.environment.unset(\"generic_loanid\");",
											"// pm.environment.unset(\"loanRulesAsTextFile\");",
											"// pm.environment.unset(\"newrequestid\");",
											"",
											"",
											"// //schema variables",
											"// pm.environment.unset(\"schema_parameters_content\");",
											"// pm.environment.unset(\"schema_error_content\");",
											"// pm.environment.unset(\"schema_errors_content\");",
											"// pm.environment.unset(\"schema_metadata_content\");",
											"// pm.environment.unset(\"schema_loans_content\");",
											"// pm.environment.unset(\"schema_loan_content\");",
											"// pm.environment.unset(\"schema_loan-rules_content\");",
											"// pm.environment.unset(\"schema_loan-rule_content\");",
											"// pm.environment.unset(\"schema_loan-rule-matches_content\");",
											"// pm.environment.unset(\"schema_loan-rule-match_content\");",
											"// pm.environment.unset(\"schema_requests_content\");",
											"// pm.environment.unset(\"schema_request_content\");",
											"// pm.environment.unset(\"schema_loan-policy-id_content\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "1eb8742e-dbba-41fe-bae7-758760a87f94",
							"name": "check-out-by-barcode -- required fields only and loanDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9ebed85-4fd9-4c62-a0f3-359cf2e5e837",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\",\n\"loanDate\": \"{{today}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "6260e0dd-8927-4720-96c7-93d278ba7124",
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "b5dcd189-204a-4518-a810-800530388ba5",
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e1740a0a-91a4-4a9e-8e44-c3b2321cb20d",
							"name": "check-out-by-barcode - additional property",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c7bc7889-724c-4f7f-8d87-686900aa35d0",
										"type": "text/javascript",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\",\n\"additionalProperty\": \"is allowed\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "75334cc7-9aeb-44c8-8039-52c9492d25aa",
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "6b9bb7b0-eedd-47e8-a35b-003ad1a8d466",
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "5c024ff6-129c-472c-af41-66b763a2d15c",
					"name": "negative",
					"item": [
						{
							"_postman_id": "b5393c99-b17f-45af-b6ed-f4531c983a99",
							"name": "check-out-by-barcode - non-existent user barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87a60eff-5c7b-4394-9d2d-b55a37efdd59",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Could not find user with matching barcode\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{$guid}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "76682ee3-66a4-43c9-bac5-9b547252595c",
							"name": "check-out-by-barcode - barcode of inactive user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a995906-77ba-4f23-a06c-7543a50dc506",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Cannot check out to inactive user\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_inactive_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "8dc59852-8b39-49b4-bcea-7b1da181e255",
							"name": "check-out-by-barcode - incorrect proxy barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91bb4166-8b67-4c62-a106-2001edfc74c1",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Could not find user with matching barcode\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"proxyUserBarcode\": \"{{$guid}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "e4eb5c7b-47ac-408f-b0f5-729dc57aad20",
							"name": "check-out-by-barcode - proxy via inactive user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75fc3db9-21b9-4567-886a-8bba55c3b392",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Cannot check out via inactive proxying user\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"proxyUserBarcode\": \"{{circ_test_inactive_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "00b2d7b6-8a5c-45f1-bdf5-d1fdd2d533ef",
							"name": "check-out-by-barcode - proxy via active user to inactive user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c86c124-6b15-4599-b7e1-fc872cc09e1f",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Cannot check out to inactive user\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_inactive_userbarcode}}\",\n\"proxyUserBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "892fcc65-8d99-4f1f-ab58-7faa811e0f12",
							"name": "check-out-by-barcode - invalid item barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "980cbfa1-8416-4ef7-bbc0-e102b7222803",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"No item with barcode invalid_barcode could be found\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"invalid_barcode\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "21fd8d73-fe77-4272-bdbe-36266116314f",
							"name": "check-out-by-barcode - required fields only - should succeed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9ebed85-4fd9-4c62-a0f3-359cf2e5e837",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "2206015c-daf3-4a2a-be3c-e089b3110e9f",
							"name": "check-out-by-barcode - duplicate entry",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e5325d0-5572-4a0b-8d41-1d48225a4a09",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Item is already checked out\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "f3455f38-c669-4b5f-86ce-a306216dd6b0",
					"name": "cleanup",
					"item": [
						{
							"_postman_id": "13bd8d5f-ec2e-4311-b53c-defb6ef8f0fb",
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "4f9caf78-3d9f-405d-9076-fade84960418",
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "51a73ed2-e236-4938-9f80-ff998784941f",
							"name": "/circulation/loans{id} - verify delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afdfa2c8-33de-4103-82ad-784b64a041dc",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status is 404\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"// pm.environment.unset(\"circ_test_userid\");",
											"// pm.environment.unset(\"circ_test_itemid\");",
											"// pm.environment.unset(\"test_recipientId\");",
											"// pm.environment.unset(\"generic_loanid\");",
											"// pm.environment.unset(\"loanRulesAsTextFile\");",
											"// pm.environment.unset(\"newrequestid\");",
											"",
											"",
											"// //schema variables",
											"// pm.environment.unset(\"schema_parameters_content\");",
											"// pm.environment.unset(\"schema_error_content\");",
											"// pm.environment.unset(\"schema_errors_content\");",
											"// pm.environment.unset(\"schema_metadata_content\");",
											"// pm.environment.unset(\"schema_loans_content\");",
											"// pm.environment.unset(\"schema_loan_content\");",
											"// pm.environment.unset(\"schema_loan-rules_content\");",
											"// pm.environment.unset(\"schema_loan-rule_content\");",
											"// pm.environment.unset(\"schema_loan-rule-matches_content\");",
											"// pm.environment.unset(\"schema_loan-rule-match_content\");",
											"// pm.environment.unset(\"schema_requests_content\");",
											"// pm.environment.unset(\"schema_request_content\");",
											"// pm.environment.unset(\"schema_loan-policy-id_content\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"_postman_id": "f511eb47-6bea-4ad0-be03-ce6c5a90b54d",
			"name": "circulation/renew-by-barcode",
			"item": [
				{
					"_postman_id": "6f0756fd-7872-4d20-a636-0ab80c4287cc",
					"name": "positive",
					"item": [
						{
							"_postman_id": "143d28a6-fa42-41d4-8bcb-7d41cda569f2",
							"name": "check-out-by-barcode - setting up the loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9ebed85-4fd9-4c62-a0f3-359cf2e5e837",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "c0176f7d-cc48-4506-8fe0-ffeb1b22f3ed",
							"name": "renew-by-barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b798403-befd-4000-b193-3dfb3d56b071",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"    pm.expect(response.action).to.equal(\"renewed\");",
											"    pm.expect(response.renewalCount).to.equal(1);",
											"     ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "941b64b3-51ce-492c-adcd-4c567dc48629",
							"name": "renew-by-barcode - another renew",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c5c03c3-2d54-44e8-a3f7-485855ac0a83",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"    pm.expect(response.action).to.equal(\"renewed\");",
											"    pm.expect(response.renewalCount).to.equal(2);",
											"     ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-barcode"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "c54566e3-1f59-4708-8956-6dfbaff865d7",
					"name": "negative",
					"item": [
						{
							"_postman_id": "ed13ee26-5d85-4299-b71e-1731d867ff5f",
							"name": "renew-by-barcode - non-existent user barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e95de1-0b37-41ca-93e0-bef531c93061",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Cannot renew item checked out to different user\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{$guid}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "da4b9658-5e31-42ad-b650-8d8bcc721628",
							"name": "renew-by-barcode - additional properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01144367-90a1-437d-8164-9b72a4e3e72a",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"//should not allow",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"additionalProperties\": \"should not be allowed\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "52df3264-baaf-4859-a5b0-9a602278a56f",
							"name": "renew-by-barcode - invalid item barcode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9d710b0-2c5e-44a4-b054-acc6d6a2adbe",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"No item with barcode invalid-barcode exists\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"invalid-barcode\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-barcode"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "4c28a834-84f4-4334-ac1b-b5a6c0571c39",
					"name": "cleanup",
					"item": [
						{
							"_postman_id": "051444dc-ecad-4749-8e11-66f4886eb7f4",
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "bc511d56-12c8-4873-b021-16bf98d10922",
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "d5ca059c-7f06-43b6-a535-f2a3b9220f54",
							"name": "/circulation/loans{id} - verify delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afdfa2c8-33de-4103-82ad-784b64a041dc",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status is 404\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"// pm.environment.unset(\"circ_test_userid\");",
											"// pm.environment.unset(\"circ_test_itemid\");",
											"// pm.environment.unset(\"test_recipientId\");",
											"// pm.environment.unset(\"generic_loanid\");",
											"// pm.environment.unset(\"loanRulesAsTextFile\");",
											"// pm.environment.unset(\"newrequestid\");",
											"",
											"",
											"// //schema variables",
											"// pm.environment.unset(\"schema_parameters_content\");",
											"// pm.environment.unset(\"schema_error_content\");",
											"// pm.environment.unset(\"schema_errors_content\");",
											"// pm.environment.unset(\"schema_metadata_content\");",
											"// pm.environment.unset(\"schema_loans_content\");",
											"// pm.environment.unset(\"schema_loan_content\");",
											"// pm.environment.unset(\"schema_loan-rules_content\");",
											"// pm.environment.unset(\"schema_loan-rule_content\");",
											"// pm.environment.unset(\"schema_loan-rule-matches_content\");",
											"// pm.environment.unset(\"schema_loan-rule-match_content\");",
											"// pm.environment.unset(\"schema_requests_content\");",
											"// pm.environment.unset(\"schema_request_content\");",
											"// pm.environment.unset(\"schema_loan-policy-id_content\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "157bef13-e6c4-455d-9c31-9d276215ee39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6de4d878-f472-4bc3-98da-fca0ca9f2065",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"_postman_id": "32c997fd-4b63-4fc3-8f27-468f256dc149",
			"name": "circulation/renew-by-id",
			"item": [
				{
					"_postman_id": "d7251a7b-3071-4ecc-be01-455f05d0a983",
					"name": "positive",
					"item": [
						{
							"_postman_id": "145f04ee-6e4a-4fb2-baeb-8ecd20d08cab",
							"name": "check-out-by-barcode - setting up the loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9ebed85-4fd9-4c62-a0f3-359cf2e5e837",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userBarcode\": \"{{circ_test_userbarcode}}\",\n\"itemBarcode\":\"{{circ_test_itembarcode}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/check-out-by-barcode",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"check-out-by-barcode"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "98fb31a3-a655-4594-99f6-03fa1561f517",
							"name": "renew-by-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b626a238-5ea5-45df-a425-f30cd6b0f499",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"    pm.expect(response.action).to.equal(\"renewed\");",
											"    pm.expect(response.renewalCount).to.equal(1);",
											"     ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-id"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "402e4b6f-7583-4ca5-9f7a-ed6e83bdda1d",
							"name": "renew-by-barcode - another renew",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ff66278-7625-4ba1-ae23-88eb67facd9d",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"pm.environment.set(\"barcode_checkout_id\", response.id);",
											"",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
											"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
											"    pm.expect(response.action).to.equal(\"renewed\");",
											"    pm.expect(response.renewalCount).to.equal(2);",
											"     ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-id"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "12b4de65-41b2-4be2-bd93-ba8d76d5ccb4",
					"name": "negative",
					"item": [
						{
							"_postman_id": "c90b6452-4687-4a0f-811a-d78e08a5adfc",
							"name": "renew-by-id- non-existent user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67e95de1-0b37-41ca-93e0-bef531c93061",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"Cannot renew item checked out to different user\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{$guid}}\",\n\"itemId\":\"{{circ_test_itemid}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-id"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "12c29b46-239c-400f-bb00-43894464a02b",
							"name": "renew-by-id - additional properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01144367-90a1-437d-8164-9b72a4e3e72a",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"//should not allow",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"additionalProperties\": \"should not be allowed\",\n\"itemId\":\"{{circ_test_itemid}}\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-id"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "1db2a395-f85e-4a75-94bd-677dfe97f5e0",
							"name": "renew-by-id - invalid item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77308b73-dda6-4eca-848d-4b35664b9702",
										"type": "text/javascript",
										"exec": [
											"",
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"Status is 422\", function () {",
											"    pm.response.to.have.status(\"Unprocessable Entity\");",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Response contains correct data\", function () {",
											"    pm.expect(pm.response.json().errors[0].message).to.equal(\"No item with ID invalid-id exists\"); ",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"  tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
											"   tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d031aed3-8994-49a7-a0e8-569a03ce46e0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"invalid-id\"\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/renew-by-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"renew-by-id"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"_postman_id": "7f3f1178-4bf1-4352-9bf8-3f7113b4a1a3",
					"name": "cleanup",
					"item": [
						{
							"_postman_id": "3da294d6-a738-4d37-b164-a14dd13b6f1c",
							"name": "/circulation/loans/{id} - returning item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f328235f-0e2f-476e-be7d-52a5f59f2cb8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
										"type": "text/javascript",
										"exec": [
											"let today = new Date();",
											"let day = today.getDate();",
											"let month = today.getMonth() + 1; //January is 0!",
											"let year = today.getFullYear();",
											"",
											"if(day < 10) {",
											"    day = '0' + day;",
											"} ",
											"",
											"if(month < 10) {",
											"    month = '0'+ month;",
											"} ",
											"",
											"today = year + \"-\" + month + \"-\" + day;",
											"",
											"console.log(today);",
											"pm.variables.set(\"today\", today);"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "9f6e3b1a-81d3-4868-80f3-6bb9b1729d7f",
							"name": "/circulation/loans/{id}  - delete loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						},
						{
							"_postman_id": "65d93d08-0793-473e-8991-f4f8a12a4e02",
							"name": "/circulation/loans{id} - verify delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "afdfa2c8-33de-4103-82ad-784b64a041dc",
										"type": "text/javascript",
										"exec": [
											"",
											"pm.test(\"Status is 404\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"",
											"// pm.environment.unset(\"circ_test_userid\");",
											"// pm.environment.unset(\"circ_test_itemid\");",
											"// pm.environment.unset(\"test_recipientId\");",
											"// pm.environment.unset(\"generic_loanid\");",
											"// pm.environment.unset(\"loanRulesAsTextFile\");",
											"// pm.environment.unset(\"newrequestid\");",
											"",
											"",
											"// //schema variables",
											"// pm.environment.unset(\"schema_parameters_content\");",
											"// pm.environment.unset(\"schema_error_content\");",
											"// pm.environment.unset(\"schema_errors_content\");",
											"// pm.environment.unset(\"schema_metadata_content\");",
											"// pm.environment.unset(\"schema_loans_content\");",
											"// pm.environment.unset(\"schema_loan_content\");",
											"// pm.environment.unset(\"schema_loan-rules_content\");",
											"// pm.environment.unset(\"schema_loan-rule_content\");",
											"// pm.environment.unset(\"schema_loan-rule-matches_content\");",
											"// pm.environment.unset(\"schema_loan-rule-match_content\");",
											"// pm.environment.unset(\"schema_requests_content\");",
											"// pm.environment.unset(\"schema_request_content\");",
											"// pm.environment.unset(\"schema_loan-policy-id_content\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{barcode_checkout_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"circulation",
										"loans",
										"{{barcode_checkout_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "157bef13-e6c4-455d-9c31-9d276215ee39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6de4d878-f472-4bc3-98da-fca0ca9f2065",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"_postman_id": "ba467470-cada-4fae-ae16-fd3d19a485f3",
			"name": "circulation/loans - positive scenarios",
			"item": [
				{
					"_postman_id": "66add1f0-f893-4344-9280-ed206599e067",
					"name": "/circulation/loans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c41c8c61-a3e6-48a8-94bc-bf968706761c",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "531fb774-242a-443f-8685-0bb7bdd02de3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "110bfb64-fd07-496e-bd36-7bd400a74abf",
					"name": "/circulation/loans - required fields only + status Closed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29110c83-af18-4690-8465-b645b164a4cc",
								"type": "text/javascript",
								"exec": [
									"//the scenario should not be possible.  If the user checks in the item, the status should not be closed because as a result the user will have item listed as checked out when in fact the item is checked in.",
									"",
									"",
									"let response = JSON.parse(responseBody);",
									"pm.environment.set(\"generic_loanid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(\"Created\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct data\", function () {",
									"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\")); ",
									"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\")); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a0c38d04-ccaa-4139-b01d-ad429906b8a3",
								"type": "text/javascript",
								"exec": [
									"let today = new Date();",
									"let day = today.getDate();",
									"let month = today.getMonth() + 1; //January is 0!",
									"let year = today.getFullYear();",
									"",
									"if(day < 10) {",
									"    day = '0' + day;",
									"} ",
									"",
									"if(month < 10) {",
									"    month = '0'+ month;",
									"} ",
									"",
									"today = year + \"-\" + month + \"-\" + day;",
									"",
									"console.log(today);",
									"pm.variables.set(\"today\", today);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkedin\",\n\"status\": {\n        \"name\": \"Closed\"\n    }\n\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c399084c-eb54-40af-8f7e-aa938f48e81f",
					"name": "/circulation/loans - closed loans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75c42833-1e8e-42c3-9898-028a006bdd51",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contain correct data\", function(){",
									"    pm.expect(JSON.stringify(response)).to.contain(pm.environment.get(\"generic_loanid\"));",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans?query=status =\"Closed\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							],
							"query": [
								{
									"key": "query",
									"value": "status =\"Closed\""
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "757496db-d575-4a10-a18a-2a2765630b7f",
					"name": "/circulation/loans - by userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "644e590e-2770-4b5f-a84f-bdcea3fce4b7",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contain correct data\", function(){",
									"    pm.expect(JSON.stringify(response)).to.contain(pm.environment.get(\"circ_test_userid\"));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans?query=userId={{circ_test_userid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							],
							"query": [
								{
									"key": "query",
									"value": "userId={{circ_test_userid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1fe952b6-9d1d-4d69-804e-acc163a874a9",
					"name": "/circulation/loans - by itemId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f2832a3-7999-49e6-ab69-9825ff1b8b9a",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"loan.json\", JSON.parse(pm.environment.get(\"schema_loan_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loans_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contain correct data\", function(){",
									"    pm.expect(JSON.stringify(response)).to.contain(pm.environment.get(\"generic_loanid\"));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans?query=itemId={{circ_test_itemid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							],
							"query": [
								{
									"key": "query",
									"value": "itemId={{circ_test_itemid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "cd354b57-5256-40ae-b0de-4d97756a1e30",
					"name": "/circulation/loans/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ead51600-9a11-438b-97f9-28435179666e",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contain correct data\", function(){",
									"    pm.expect(response.id).to.equal(pm.environment.get(\"generic_loanid\"));",
									"    pm.expect(response.userId).to.equal(pm.environment.get(\"circ_test_userid\"));",
									"    pm.expect(response.itemId).to.equal(pm.environment.get(\"circ_test_itemid\"));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{generic_loanid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans",
								"{{generic_loanid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "71ba1e60-d6a4-4117-ab2e-947dac6c63b8",
					"name": "/circulation/loans/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70528975-c42c-4768-8ee6-4dcb868a333d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "834355ba-7b25-43ea-90a7-352cf885e629",
								"type": "text/javascript",
								"exec": [
									"let today = new Date();",
									"let day = today.getDate();",
									"let month = today.getMonth() + 1; //January is 0!",
									"let year = today.getFullYear();",
									"",
									"if(day < 10) {",
									"    day = '0' + day;",
									"} ",
									"",
									"if(month < 10) {",
									"    month = '0'+ month;",
									"} ",
									"",
									"today = year + \"-\" + month + \"-\" + day;",
									"",
									"console.log(today);",
									"pm.variables.set(\"today\", today);"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userId\": \"{{circ_test_userid}}\",\n\"itemId\":\"{{circ_test_itemid}}\",\n\"loanDate\": \"{{today}}\",\n\"action\": \"checkout\",\n\"status\": {\n        \"name\": \"Open\"\n    }\n\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{generic_loanid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans",
								"{{generic_loanid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "b5acb817-f85c-486f-9c1d-9d8ff9adb003",
					"name": "/circulation/loans{id} - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf9bf359-955f-43e3-8bb1-361d78a45878",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Response contain correct data\", function(){",
									"    pm.expect(response.id).to.equal(pm.environment.get(\"generic_loanid\"));",
									"    pm.expect(response.status.name).to.equal(\"Open\");",
									"    pm.expect(response.action).to.equal(\"checkout\")",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{generic_loanid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans",
								"{{generic_loanid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "dd8cbcb0-959b-43c8-8e65-eb0b48694c33",
			"name": "circulation/loans - negative scenarios",
			"item": [
				{
					"_postman_id": "371cd885-3f5f-4722-8362-1a4d61e8e85f",
					"name": "circulation/loans - invalid user and item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a306f41-43a3-4714-bf27-f472e210c21d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"New loan was not created. Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(response.errors[0].parameters[0].key).to.be.equal(\"itemId\");",
									"    pm.expect(response.errors[0].parameters[0].value).to.be.equal(\"itemfoo\");",
									"  ",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"userfoo\",\r\n  \"itemId\": \"itemfoo\",\r\n  \"loanDate\": \"2018-01-12T13:12:16Z\",\r\n  \"action\": \"checkedout\",\r\n  \"status\": {\r\n    \"name\": \"Open\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "f17cc3aa-b887-44bf-9b1f-8d874cc2606e",
					"name": "circulation/loans - invalid user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2b0abeb-36cb-4b61-98b5-c5914aaed39b",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"New loan was not created. Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(response.errors[0].parameters[0].key).to.be.equal(\"itemId\");",
									"    pm.expect(response.errors[0].parameters[0].value).to.be.equal(\"459afaba-5b39-468d-9072-eb1685e0ddf4\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"userfoo\",\r\n  \"itemId\": \"459afaba-5b39-468d-9072-eb1685e0ddf4\",\r\n  \"loanDate\": \"2018-01-12T13:12:16Z\",\r\n  \"action\": \"checkedout\",\r\n  \"status\": {\r\n    \"name\": \"Open\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "6df1e7c5-96f0-4659-92d3-37e3271f5a4a",
					"name": "/circulation/loans/nonexistentloan",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87fa7dc8-962b-47c7-9f4e-00bda306a023",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{url}}:9130/circulation/loans/foo",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "9130",
							"path": [
								"circulation",
								"loans",
								"foo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "762d48be-b0f0-4b76-b0e5-7f00bef33c29",
			"name": "circulation/loan-rules",
			"item": [
				{
					"_postman_id": "97fdab71-f75d-4a06-b7ce-75693f69287d",
					"name": "/circulation/loan-rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50d6a575-ed84-4a8e-9f33-4419885ff44d",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"//pm.environment.set(\"loanrulesid\", response.id);",
									"pm.environment.set(\"loanRulesAsTextFile\", JSON.stringify(response.loanRulesAsTextFile));",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-rules_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "9c3d3113-a18a-4702-a1d7-532675ea5db7",
					"name": "/circulation/loan-rules - invalid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8f214a1-88b9-43ef-a0e5-71d7be34505b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": \"invalid\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "571d6db1-9127-4dce-9cd2-77bb646ca80a",
					"name": "/circulation/loan-rules - invalid json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e234e065-0a80-40f4-946b-59a39a282f27",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": \"invalid\",\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "13f85588-aadb-452e-a224-31b01a14609d",
					"name": "/circulation/loan-rules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69ab6810-3e52-4c51-bba6-be0f38c1a264",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"loanRulesAsTextFile\": {{loanRulesAsTextFile}}\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "2e563544-4247-4674-bc3d-7c860b7e766e",
					"name": "/circulation/loan-rules/apply - missing query parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b652757f-803b-4dc1-bef9-93d031ba38d0",
								"type": "text/javascript",
								"exec": [
									"//query parameter is required now",
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "048300fd-a0fe-4953-a6f9-ede2aa9e15b3",
					"name": "/circulation/loan-rules/apply",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1c250a5-18b6-4bea-932c-d5c444d778da",
								"type": "text/javascript",
								"exec": [
									"//This is really strange behavior  -it always return the same record - event though the provided parameters are invalid",
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-policy-id_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply?item_type_id={{$guid}}&loan_type_id={{$guid}}&patron_type_id={{$guid}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "c7c8eb19-e418-452a-9e72-72ae7a8c3a2c",
					"name": "/circulation/loan-rules/apply-all - missing query parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fea31e63-91cd-41d1-9dd1-4a6b386f8ca6",
								"type": "text/javascript",
								"exec": [
									"//query parameter is required now",
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply-all",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply-all"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "af0bb40c-501f-4318-9289-1a1d56e3bea0",
					"name": "/circulation/loan-rules/apply-all",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "098acf15-d61f-4afe-91b9-e9e5738876ad",
								"type": "text/javascript",
								"exec": [
									"//This is really strange behavior  -it always return the same record - event though the provided parameters are invalid",
									"",
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"loan-rule-match.json\", JSON.parse(pm.environment.get(\"schema_loan-rule-match_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_loan-rule-matches_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loan-rules/apply-all?item_type_id={{$guid}}&loan_type_id={{$guid}}&patron_type_id={{$guid}}&shelving_location_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loan-rules",
								"apply-all"
							],
							"query": [
								{
									"key": "item_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "loan_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "patron_type_id",
									"value": "{{$guid}}"
								},
								{
									"key": "shelving_location_id",
									"value": "{{$guid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "31aa4530-1a6f-4458-b185-4c0577346d13",
			"name": "circulation/requests",
			"item": [
				{
					"_postman_id": "624396a4-5630-4752-a827-ced7fca20062",
					"name": "/circulation/requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecd81156-5dcf-4f9d-be1c-87eb5d2e6bda",
								"type": "text/javascript",
								"exec": [
									"// ///Set test data",
									"var response = JSON.parse(responseBody);",
									"// if(response.requests.length >0){",
									"// pm.environment.set(\"existingrequestid\", response.requests[0].id)",
									"// }",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"request.json\", JSON.parse(pm.environment.get(\"schema_request_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_requests_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "e1ef3a1b-fee7-46f4-8c02-5d11aa7cf266",
					"name": "/circulation/requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab4e89dc-0af6-48b4-a23e-6ce3e903dd45",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newrequestid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_request_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f8dfafc-387e-4388-be01-b4b8a76325a4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestType\": \"Hold\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_test_userid}}\",\r\n  \"itemId\": \"{{circ_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2018-07-25\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "2e13729e-d1df-49a8-af3a-8d319a494779",
					"name": "/circulation/requests{{loanuserid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3603091-8a78-4be4-bc69-4d8a10dedcab",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"request.json\", JSON.parse(pm.environment.get(\"schema_request_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_requests_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"// pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"// });",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"// pm.test(\"'accept' header is present and has correct value\", function () {",
									"//     pm.response.to.have.header(\"accept\");",
									"//     pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"// });",
									"",
									"// pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"//     pm.response.to.have.header(\"accept-encoding\");",
									"//     pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"// });",
									"",
									"",
									"// pm.test(\"'connection' header is present and has correct value\", function () {",
									"//     pm.response.to.have.header(\"connection\");",
									"//     pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"// });",
									"",
									"// pm.test(\"'host' header is present\", function () {",
									"//     pm.response.to.have.header(\"host\");",
									"//   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"//   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"// });",
									"",
									"// pm.test(\"'x-okapi-module-permissions' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-module-permissions\");",
									"// });",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-permissions-required' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-permissions-required\");",
									"// });",
									"",
									"// pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-permissions\");",
									"// });",
									"",
									"// pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-request-id\");",
									"// });",
									"",
									"// pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-tenant\");",
									"//     pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"// });",
									"",
									"// pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-token\");",
									"//     pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"// });",
									"",
									"// pm.test(\"'x-okapi-url' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-url\");",
									"// });",
									"",
									"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-user-id\");",
									"// });",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests?query=requesterId={{circ_test_userid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests"
							],
							"query": [
								{
									"key": "query",
									"value": "requesterId={{circ_test_userid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0a34f61d-8200-4a87-b5fe-6c049efc6438",
					"name": "/circulation/requests - item does not exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bd6ef13-fe8f-49f8-96a3-bad492e6987d",
								"type": "text/javascript",
								"exec": [
									"let jsonData = pm.response.json();",
									"    ",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
									"    if (schema_parameters.id) {",
									"        tv4.addSchema(schema_parameters.id, schema_parameters);",
									"    }",
									"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
									"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
									"    if (schema_error.id) {",
									"        tv4.addSchema(schema_error.id, schema_error);",
									"    }",
									"    ",
									"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test('Response contains correct error message', function() {",
									"  pm.expect(response.errors[0].parameters[0].value).to.eql(\"invaliditemid\");",
									"  pm.expect(response.errors[0].parameters[0].key).to.eql(\"itemId\");",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"requestType\": \"Recall\",\r\n  \"requestDate\": \"2018-07-29\",\r\n  \"requesterId\": \"{{circ_test_userid}}\",\r\n  \"itemId\": \"invaliditemid\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "8f2535d7-9faf-45c5-aaca-568a7edf86d1",
					"name": "/circulation/requests/{{newrequestid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96f08fe9-3bd5-4da1-8c44-69b39f5de474",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_request_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests/{{newrequestid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests",
								"{{newrequestid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "1b1623cb-861b-496a-958b-65c8e8fcfdc1",
					"name": "/circulation/requests{{newrequestid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bcc5b59-a76a-462b-b524-e81237ddc002",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{newrequestid}}\",\r\n  \"requestType\": \"Page\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{circ_test_userid}}\",\r\n  \"itemId\": \"{{circ_test_itemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests/{{newrequestid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests",
								"{{newrequestid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "5e34937d-8c4a-4109-ac37-dca564c83f2e",
					"name": "/circulation/requests/{{newrequestid}} - verify update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25f063ef-525c-4045-b4c3-98a50879684c",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Correct data is returned\", function () {",
									"    pm.expect(response.requestType).to.equal(\"Page\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_request_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests/{{newrequestid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests",
								"{{newrequestid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"_postman_id": "a183e0b5-f6b1-4ac2-8add-5e010786abb3",
			"name": "cleanup",
			"item": [
				{
					"_postman_id": "97bec379-fae2-4881-b966-d7916de33495",
					"name": "/circulation/requests/{{newrequestid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8dd3316-4c1b-49fc-a305-3e869d93f99e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{existingrequestid}}\",\r\n  \"requestType\": \"Page\",\r\n  \"requestDate\": \"2018-07-29T22:25:37Z\",\r\n  \"requesterId\": \"{{loanuserid}}\",\r\n  \"itemId\": \"{{loanitemid}}\",\r\n  \"fulfilmentPreference\": \"Hold Shelf\",\r\n  \"requestExpirationDate\": \"2017-07-25\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests/{{newrequestid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests",
								"{{newrequestid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "0adac774-7f0e-4525-879d-9a17b69e88f9",
					"name": "/circulation/requests/{{newrequestid}} - verfiy delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4214cebe-7027-41d6-9b12-ca3ac7728422",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/requests/{{newrequestid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"requests",
								"{{newrequestid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "190cb630-c09d-438b-8323-6b1607b42858",
					"name": "/circulation/loans/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90b9aea6-80f5-46b6-878a-a3f7d3477e70",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(\"No Content\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{generic_loanid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans",
								"{{generic_loanid}}"
							]
						}
					},
					"response": []
				},
				{
					"_postman_id": "572cfc0e-1739-458c-8a92-4779448ea9ac",
					"name": "/circulation/loans{id} - verify delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d78b5edf-e76d-48aa-bd02-297c58f975c7",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"pm.environment.unset(\"circ_test_userid\");",
									"pm.environment.unset(\"circ_test_itemid\");",
									"pm.environment.unset(\"test_recipientId\");",
									"pm.environment.unset(\"generic_loanid\");",
									"pm.environment.unset(\"loanRulesAsTextFile\");",
									"pm.environment.unset(\"newrequestid\");",
									"",
									"",
									"//schema variables",
									"pm.environment.unset(\"schema_parameters_content\");",
									"pm.environment.unset(\"schema_error_content\");",
									"pm.environment.unset(\"schema_errors_content\");",
									"pm.environment.unset(\"schema_metadata_content\");",
									"pm.environment.unset(\"schema_loans_content\");",
									"pm.environment.unset(\"schema_loan_content\");",
									"pm.environment.unset(\"schema_loan-rules_content\");",
									"pm.environment.unset(\"schema_loan-rule_content\");",
									"pm.environment.unset(\"schema_loan-rule-matches_content\");",
									"pm.environment.unset(\"schema_loan-rule-match_content\");",
									"pm.environment.unset(\"schema_requests_content\");",
									"pm.environment.unset(\"schema_request_content\");",
									"pm.environment.unset(\"schema_loan-policy-id_content\");",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{generic_loanid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans",
								"{{generic_loanid}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "bd336eec-9214-4ee9-8979-19fda6d938b2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "42c60b31-caea-44d3-89f5-260cf60efc3f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ffe58535-3060-415c-a3a5-d9374092a87a",
			"key": "mod_name",
			"value": "mod-circulation",
			"type": "string"
		},
		{
			"id": "635e4c77-fdd9-49d6-9f89-2eb48a563d54",
			"key": "mod_version",
			"value": "v10.7.0",
			"type": "string"
		},
		{
			"id": "9f867984-7797-4a42-a076-ba28608582f2",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "c25a4f98-57cf-4581-ac80-ca4385539bc8",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "eda58011-a9f1-43ac-89b6-f378367d5189",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "d5579f68-45be-402c-8d79-bfa1a0d44688",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "85dcdf13-d895-4f7e-906b-dc56ee6def57",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "e4dc915a-9cc6-440f-a568-8f137537b763",
			"key": "schema_loans",
			"value": "loans.json",
			"type": "string"
		},
		{
			"id": "a951cc94-d045-4709-a189-cf2dbbb360f0",
			"key": "schema_loan",
			"value": "loan.json",
			"type": "string"
		},
		{
			"id": "1b729a1c-cf6d-495d-b921-462e8c864da5",
			"key": "schema_loan-rules",
			"value": "loan-rules.json",
			"type": "string"
		},
		{
			"id": "442bc78e-7342-42a0-8ef9-0e3f9b80471f",
			"key": "schema_loan-rule-matches",
			"value": "loan-rule-matches.json",
			"type": "string"
		},
		{
			"id": "29372c52-8c3e-4fd6-9844-21aa4c4d7b51",
			"key": "schema_loan-rule-match",
			"value": "loan-rule-match.json",
			"type": "string"
		},
		{
			"id": "bcea7593-5ce4-4651-a373-d453f0096b51",
			"key": "schema_loan-policy-id",
			"value": "loan-policy-id.json",
			"type": "string"
		},
		{
			"id": "0cf6ef17-b962-48b2-96a2-88d0b84352ce",
			"key": "schema_requests",
			"value": "requests.json",
			"type": "string"
		},
		{
			"id": "e7b5e1b5-9a5c-42df-bd9d-68956f2d1df0",
			"key": "schema_request",
			"value": "request.json",
			"type": "string"
		}
	]
}