{
	"info": {
		"_postman_id": "912545e1-42e7-438c-8b0e-6963f450572b",
		"name": "mod-data-export",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dbb3c52-f905-4820-8f64-fa1c5edfa27c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "49e6dc43-cf25-4e79-9ada-3803449c5085",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82c3c2db-bbb6-4545-964c-c6f1d7bf2ae6",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06b76919-24bc-4b9f-9bb2-f1a5947f2150",
										"exec": [
											"// In case the tenant was not created no sense to run further requests\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {\r",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);\r",
											"    if (pm.response.code === 400) {\r",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");\r",
											"        purgeModulesData();\r",
											"    } else {\r",
											"        // All is okay, running further requests\r",
											"        postman.setNextRequest();\r",
											"    }\r",
											"});\r",
											"\r",
											"function purgeModulesData() {\r",
											"    let utils = eval(globals.loadUtils);\r",
											"    let tenantBaseUrl = utils.buildOkapiURL(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));\r",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {\r",
											"        let modulesToDisable = null;\r",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {\r",
											"            pm.expect(err).to.equal(null);\r",
											"            pm.expect(res.code).to.equal(200);\r",
											"\r",
											"            modulesToDisable = res.json();\r",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");\r",
											"            console.log(modulesToDisable);\r",
											"        });\r",
											"\r",
											"        if (modulesToDisable !== null) {\r",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first\r",
											"            if (modulesToDisable.length > 0) {\r",
											"                pm.sendRequest({\r",
											"                    url: tenantBaseUrl + \"/install\",\r",
											"                    method: \"POST\",\r",
											"                    header: {\r",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),\r",
											"                        \"Content-type\": \"application/json\"\r",
											"                    },\r",
											"                    body: JSON.stringify(modulesToDisable)\r",
											"                }, (error, response) => {\r",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {\r",
											"                        pm.expect(error).to.equal(null);\r",
											"                        pm.expect(response).to.be.ok;\r",
											"                        // All the data have been purged. Now wait for a minute and run next request\r",
											"                        setTimeout(() => postman.setNextRequest(), 61000);\r",
											"                        postman.setNextRequest();\r",
											"                    });\r",
											"                });\r",
											"            } else {\r",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {\r",
											"                    // Run next request\r",
											"                    postman.setNextRequest();\r",
											"                });\r",
											"            }\r",
											"        }\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dd09b6c0-f3fe-4047-ad5a-7cda15cd5c9c",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"utils.getModuleId(\"mod-data-export\", bodyHandler);\r",
											"utils.getModuleId(\"mod-login\", bodyHandler);\r",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);\r",
											"utils.getModuleId(\"mod-inventory-storage\", bodyHandler);\r",
											"\r",
											"var modulesToEnable = [];\r",
											"\r",
											"function bodyHandler(moduleId) {\r",
											"    modulesToEnable.push({\r",
											"        \"id\": moduleId,\r",
											"        \"action\": \"enable\"\r",
											"    });\r",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5bae1929-f0e4-4e72-86b6-58114d7ca67a",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"postman.setNextRequest(null);\r",
											"pm.test(\"Enabled required modules\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    postman.setNextRequest();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa27e695-8ff9-40e7-8e70-8c3606dfa0de",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e8df4eac-ef1c-4959-bf1c-541a6ec72f45",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3da0635-79b7-4c32-b3a3-232ddbe06394",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "481a7ce8-c5f1-47f2-b94c-e8cef7431535",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1572f12-e0b3-4d78-b116-a1da65084452",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7add604e-44a3-4d5b-b338-1ff550345b6b",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"let pmRq = {\r",
											"    url: utils.buildOkapiURL('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),\r",
											"    method: \"GET\",\r",
											"    header: {\r",
											"        \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")\r",
											"    }\r",
											"};\r",
											"pm.sendRequest(pmRq, (err, res) => {\r",
											"    let userPermissions = globals.testData.users.admin.permissions;\r",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);\r",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2b0a30e-af15-4bc2-b4f0-649374c402d4",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);\r",
											"\r",
											"var modulesToEnable = [];\r",
											"\r",
											"function bodyHandler(moduleId) {\r",
											"    modulesToEnable.push({\r",
											"        \"id\": moduleId,\r",
											"        \"action\": \"enable\"\r",
											"    });\r",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "01a94a7c-6476-4670-abfd-c5559ad45051",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b4a6b7c-1ac9-4a7b-9463-286942337ac0",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14e6ff05-d190-4f75-b484-bd6c0507f098",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36bf2194-e24f-4bce-9621-9ccbc4e18fd0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5055ebd4-d39f-4edf-afe5-320b948d95bb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3013af80-18ae-4017-9629-43b8f3308149",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5e919660-f70c-4131-8053-efbec973c904",
										"exec": [
											"// In case the user was not created no sense to run further requests\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(\"User created - Expected Created (201)\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    // All is okay so running further requests\r",
											"    postman.setNextRequest();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34db8a16-40ba-409d-8e32-ed5d01743b79",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65b16118-7f2b-43bb-8be3-b529e0e188f0",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add data-export.all permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac09ff45-800d-4223-8ab9-e8e94a8aa6d0",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.environment.set(\"limitedPrivPermId\", pm.response.json().id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45f01748-88eb-4985-a17e-40d6a0d36f8a",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b72acca8-a3c8-4134-836e-1ab19a4162cb",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(\"Status code is 201\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    // All is okay so running further requests\r",
											"    postman.setNextRequest();\r",
											"});\r",
											"\r",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0373e3e-0c2f-48a7-9b72-edd6f0780f38",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f05c3dd8-37ca-4a01-8c1a-25f8961c0f9c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "18ef92ca-b807-43ea-a0af-a95e092ca79a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post instance to inventory storage",
					"item": [
						{
							"name": "Create instance type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b8cee6a1-2464-464d-b708-60b6c5b4711b",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_instance_type_to_post.json\", function(err, res) {\r",
											"    let instance_type_to_put = JSON.stringify(res.json());\r",
											"    pm.variables.set(\"instanceTypeToPut\", instance_type_to_put);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5349c2c3-d704-4a7c-9fe6-6f2f6b22b613",
										"exec": [
											"pm.test(\"Instance type created - Expected Created (201)\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    // All is okay so running further requests\r",
											"    if (pm.response.code === 201) {\r",
											"    pm.variables.set(\"instanceTypeId\", pm.response.json().id);\r",
											"        postman.setNextRequest();\r",
											"    } else {\r",
											"       // Failed to create instance type;\r",
											"        postman.setNextRequest(null);\r",
											"    }\r});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{instanceTypeToPut}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create instance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bee44439-df5a-4e73-8f56-9026e99c3968",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_instance_to_post.json\", function(err, res) {\r",
											"    let instance_to_put = JSON.stringify(res.json());\r",
											"    pm.variables.set(\"instanceToPut\", instance_to_put);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54430cae-aaf2-4a23-8ab1-94b22beda49b",
										"exec": [
											"pm.test(\"Instance created - Expected Created (201)\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{instanceToPut}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75f1e59d-6aa3-4126-ab79-471c52f03e09",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25f6d56b-9aaa-4156-9592-6024f66ed177",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "df457072-3f96-4e98-bec3-0b4c72c1683f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7993e041-9997-428a-b116-262956269fee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Main tests",
			"item": [
				{
					"name": "Profiles",
					"item": [
						{
							"name": "Post mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9234bce3-5167-466e-8d42-bc78199f250c",
										"exec": [
											"",
											"pm.test(\"Mapping profile has been created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"",
											"let mappingProfile = pm.response.json();",
											"",
											"pm.test(\"With id\", () => {",
											"    pm.expect(mappingProfile.id).not.equal(null);",
											"});",
											"",
											"pm.test(\"With name\", () => {",
											"    pm.expect(mappingProfile.name).not.equal(null);",
											"});",
											"",
											"pm.test(\"With recordTypes and it equal to instance\", () => {",
											"    pm.expect(mappingProfile.recordTypes[0]).equal(\"INSTANCE\");",
											"});",
											"",
											"pm.test(\"With transformations\", () => {",
											"    pm.expect(mappingProfile.transformations).not.equal(null);",
											"});",
											"",
											"pm.variables.set(\"mappingProfile\", mappingProfile);",
											"pm.environment.set(\"mappingProfileId\", mappingProfile.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5ae955e-c54f-49b6-b22b-29c389072e76",
										"exec": [
											"try{\r",
											"    pm.variables.set(\"mappingProfile\", JSON.stringify(globals.testData.mappingProfile));\r",
											"} catch (e) {\r",
											"    throw new Error(e.message);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mappingProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mappingProfiles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mappingProfiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "379b6c19-a5a2-4310-ab0f-9a5c32f4fa5f",
										"exec": [
											"",
											"pm.test(\"Mapping profile has been updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71bb3d1a-0ce2-42dd-b9c6-f3e334167c12",
										"exec": [
											"let mappingProfile = pm.variables.get(\"mappingProfile\");",
											"mappingProfile.recordTypes[0] = \"HOLDINGS\";",
											"pm.variables.set(\"updatedMappingProfile\",  JSON.stringify(mappingProfile));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedMappingProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mappingProfiles/{{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mappingProfiles",
										"{{mappingProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mapping profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cb7a107-ea4a-4df0-9e04-da613f658333",
										"exec": [
											"pm.test(\"The mapping profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let mappingProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"With updated recordTypes and it equals to HOLDINGS\", () => {\r",
											"    pm.expect(mappingProfile.recordTypes[0]).equal(\"HOLDINGS\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a2a5830-79bc-4788-ad06-d2e1a9693445",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mappingProfiles/{{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mappingProfiles",
										"{{mappingProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get default mapping profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cb7a107-ea4a-4df0-9e04-da613f658333",
										"exec": [
											"pm.test(\"The default mapping profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let mappingProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"With default record type\", () => {\r",
											"    pm.expect(mappingProfile.recordTypes[0]).equal(\"INSTANCE\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default name\", () => {\r",
											"    pm.expect(mappingProfile.name).equal(\"Default instance mapping profile\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default description\", () => {\r",
											"    pm.expect(mappingProfile.description).equal(\"Default mapping profile for the inventory instance record\");\r",
											"});\r",
											"\r",
											"pm.test(\"With default output format\", () => {\r",
											"    pm.expect(mappingProfile.outputFormat).equal(\"MARC\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a2a5830-79bc-4788-ad06-d2e1a9693445",
										"exec": [
											"pm.environment.set(\"defaultMappingProfile\", globals.testData.defaultMappingProfileId);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mappingProfiles/{{defaultMappingProfile}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mappingProfiles",
										"{{defaultMappingProfile}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mapping profile by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76031a44-903f-48fb-b917-5ee082c3fafb",
										"exec": [
											"pm.test(\"The Mapping profiles by query has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let mappingProfileId = pm.variables.get(\"mappingProfileId\");\r",
											"let mappingProfile = pm.response.json().mappingProfiles.find(profile => profile.id === mappingProfileId);\r",
											"let totalRecords = pm.response.json().totalRecords;\r",
											"\r",
											"pm.test(\"With total records equals to  1\", () => {\r",
											"    pm.expect(totalRecords).equal(1);\r",
											"});\r",
											"\r",
											"pm.test(\"With correct id\", () => {\r",
											"    pm.expect(mappingProfile.id).equal(mappingProfileId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "150014f4-a684-479c-ae7f-db2d48efd35f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mappingProfiles?query=id=={{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mappingProfiles"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{mappingProfileId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Post jobProfiles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c2eec7d-38d0-4d01-9bb4-4c5ef6706645",
										"exec": [
											"",
											"pm.test(\"Job profile has been created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"let jobProfile = pm.response.json();",
											"",
											"pm.test(\"Verify id exists\", () => {",
											"    pm.expect(jobProfile.id).not.equal(null);",
											"});",
											"",
											"pm.test(\"Verify name exists\", () => {",
											"    pm.expect(jobProfile.name).not.equal(null);",
											"});",
											"",
											"",
											"pm.variables.set(\"jobProfile\", jobProfile);",
											"pm.environment.set(\"jobProfileId\", jobProfile.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ec9f977-e8f6-498d-b0fe-bd55dff23840",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var mappingProfileId = pm.variables.get(\"mappingProfile\").id;",
											"pm.variables.set(\"jobProfile\", JSON.stringify(utils.buildJobProfile(mappingProfileId)));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{jobProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/jobProfiles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"jobProfiles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update jobProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43139c62-4ca4-4e49-8e78-4bb72ab80fa0",
										"exec": [
											"pm.test(\"Job profile has been updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d961fc3d-0308-4a8c-b20f-478ff39687c9",
										"exec": [
											"let jobProfile = pm.variables.get(\"jobProfile\");",
											"jobProfile.description = \"updated API Test job Profile Description\";",
											"pm.variables.set(\"jobProfile\",  JSON.stringify(jobProfile));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{jobProfile}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/jobProfiles/{{jobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"jobProfiles",
										"{{jobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get job profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2b8b1e8-9ff3-45f9-8f4c-6da7436704a3",
										"exec": [
											"pm.test(\"The job profile by id has been retrieved successfully\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});\r",
											"\r",
											"let jobProfile = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify Description has been updated\", () => {\r",
											"    pm.expect(jobProfile.description).equal(\"updated API Test job Profile Description\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e306d141-718d-44eb-af4f-5f357af3a8dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/jobProfiles/{{jobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"jobProfiles",
										"{{jobProfileId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Post file definition with invalid filename extension",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eafa501-4b75-4961-8c92-7f2490ca9274",
								"type": "text/javascript",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.invalidFileDefinition.fileName);",
									"pm.test(\"File difinition with fileName \\\"\"+fileName+\"\\\" has been created\", () => {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.be.withBody;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0a196e9c-30b2-4484-8a7a-698dd5307a91",
								"type": "text/javascript",
								"exec": [
									"pm.variables.set(\"fileDefinition\", JSON.stringify(globals.testData.fileDefinitions.invalidFileDefinition));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileDefinition}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/fileDefinitions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"fileDefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post file definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ee2ffc7-5462-4a8b-b61e-489c854d95fc",
								"type": "text/javascript",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.validFileDefinition.fileName);",
									"pm.test(\"File difinition with fileName \\\"\"+fileName+\"\\\" has been created\", () => {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"let fileDefinition = pm.response.json();",
									"pm.globals.set(\"fileDefinitionId\", fileDefinition.id);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bc498318-b515-4640-a61a-a1c4464f56c8",
								"type": "text/javascript",
								"exec": [
									"pm.variables.set(\"fileDefinition\", JSON.stringify(globals.testData.fileDefinitions.validFileDefinition));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileDefinition}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/fileDefinitions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"fileDefinitions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get file definition by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "855e3b61-39f8-4304-a7fc-99246ffae012",
								"type": "text/javascript",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.validFileDefinition.fileName);",
									"pm.test(\"File definition with fileName \"+fileName+ \" has been retrieved successfully\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1e516139-62c3-4d9a-a1b7-889282a55b80",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/fileDefinitions/{{fileDefinitionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"fileDefinitions",
								"{{fileDefinitionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post uploading a file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90b4bac4-39df-4e02-8fc7-b1ebbc9b036d",
								"type": "text/javascript",
								"exec": [
									"let fileName = JSON.stringify(globals.testData.fileDefinitions.validFileDefinition.fileName);",
									"pm.test(\"File has been uplouaded sucessfully\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"let fileDefinition = pm.response.json();",
									"",
									"pm.test(\"Directory for uploaded file has been created & source path not empty\", () => {",
									"    pm.expect(fileDefinition.sourcePath).not.equal(null);",
									"})",
									"",
									"pm.test(\"Status has completed value\", () => {",
									"    pm.expect(fileDefinition.status).equal(\"COMPLETED\");",
									"})",
									"",
									"pm.test(\"With metadata\", () => {",
									"    pm.expect(fileDefinition.metadata).not.equal(null);",
									"})",
									"",
									"pm.variables.set(\"jobExecutionId\", fileDefinition.jobExecutionId);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "abd8c327-6004-42b7-8dec-4079fdecb620",
								"type": "text/javascript",
								"exec": [
									"let utils = eval(globals.loadUtils);\r",
									"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_file_to_upload.csv\", function(err, res) {\r",
									"    let arr = new Uint8Array(res.stream);\r",
									"    let test_file_to_upload = String.fromCharCode.apply(String, arr);\n\r",
									"    pm.variables.set(\"fileToUpload\", test_file_to_upload);\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileToUpload}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/fileDefinitions/{{fileDefinitionId}}/upload",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"fileDefinitions",
								"{{fileDefinitionId}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post uploading a file - Idempotent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65c3218a-7d02-4805-aa3e-4318582ad433",
								"exec": [
									"pm.test(\"File is already uploaded\", () => {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d039c896-db6b-42bb-b45f-410029bce468",
								"exec": [
									"let utils = eval(globals.loadUtils);\r",
									"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockData/test_file_to_upload.csv\", function(err, res) {\r",
									"    let test_file_to_upload = res.body;\r",
									"    pm.variables.set(\"fileToUpload\", test_file_to_upload);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{fileToUpload}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/fileDefinitions/{{fileDefinitionId}}/upload",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"fileDefinitions",
								"{{fileDefinitionId}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export uploaded file",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c38d4af4-a082-47c4-a6e9-31fe079fe407",
								"exec": [
									"pm.test(\"Export of uploaded file completed successfully\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"    // The export process has begun. Wait 10 seconds for it to complete.\r",
									"    setTimeout(() => postman.setNextRequest(), 10000);\r",
									"});\r"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45e450a4-f682-4839-b075-3a7cfb2b3d52",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fileDefinitionId\": \"{{fileDefinitionId}}\",\n  \"jobProfileId\": \"da0ccaa8-6f59-11ea-bc55-0242ac130003\",\n  \"metadata\": {\n    \"createdDate\": \"2020-03-21T07:48:51.974+0000\",\n    \"createdByUserId\": \"ee82f536-0498-5c6e-88a2-0e546eea8ad6\",\n    \"updatedDate\": \"2020-03-21T07:48:51.974+0000\",\n    \"updatedByUserId\": \"ee82f536-0498-5c6e-88a2-0e546eea8ad6\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/export",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"export"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get job execution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae10e91e-ad86-446d-85e6-e8b949817805",
								"exec": [
									"pm.test(\"Job execution has been retrieved successfully\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;",
									"});\r",
									"",
									"let jobExecution = pm.response.json().jobExecutions.find(job => job.id === pm.variables.get(\"jobExecutionId\"));",
									"",
									"pm.test(\"The status is success\", () => {",
									"    pm.expect(jobExecution.status).equal(\"SUCCESS\");",
									"});\r",
									"",
									"pm.test(\"File name contains hrId\", () => {",
									"pm.expect(jobExecution.exportedFiles[0].fileName).include(jobExecution.hrId);",
									"});\r",
									"",
									"pm.test(\"With runBy object\", () => {",
									"pm.expect(jobExecution.runBy).not.equal(null);",
									"});\r",
									"",
									"pm.test(\"With progress\", () => {",
									"pm.expect(jobExecution.progress).not.equal(null);",
									"});\r"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45b3a029-5fe5-40b8-a5d3-b1e37573eb02",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/jobExecutions?query=id={{jobExecutionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"data-export",
								"jobExecutions"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{jobExecutionId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2bb73e17-a171-426f-b8b6-8a6a49eb784c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cb5fea37-c8c0-47a0-9c84-12faa5ae0a37",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Profiles",
					"item": [
						{
							"name": "Delete jobProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5b1af32-d1aa-4e2f-ac15-bb5bfe2b04e4",
										"exec": [
											"pm.test(\"Job profile has been deleted\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "059b05d1-fdf1-4b5e-8cd6-f87758c7e0a0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/jobProfiles/{{jobProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"jobProfiles",
										"{{jobProfileId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete mappingProfile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9f8d514-6c4a-4683-9439-36e5112867aa",
										"exec": [
											"",
											"pm.test(\"Mapping profile has been deleted\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12aaf096-c238-4df1-8453-708078ffe3f4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/data-export/mappingProfiles/{{mappingProfileId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"data-export",
										"mappingProfiles",
										"{{mappingProfileId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "clean tenant and modules data",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "33d28101-1cd2-4e65-9af5-d7086e553358",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(utils.buildOkapiURL(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {\r",
											"    pm.test(\"Preparing request to disable modules\", () => {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(res.code).to.equal(200);\r",
											"        let modulesToDisable = res.json();\r",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");\r",
											"\r",
											"        console.log(modulesToDisable);\r",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9081431d-540e-48a1-aa76-ae954537257f",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Disable all modules for test tenant\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1c0fde15-c00a-45c8-ae22-6ff80bb0e099",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53a07f14-efab-45a2-a951-30d0aa7106d2",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"// Remove all created variables\r",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3a258fee-2189-4d64-a149-e2fea41477f4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7ef5e045-74df-43f7-9ea5-4cfdb9ec6de9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a687437d-7c02-43eb-a020-a42bb68b7ab6",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mdexp-admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Test\",",
					"                    \"lastName\": \"Api\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mdexp-admin-user\",",
					"                \"password\": \"mdexp-admin-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mdexp-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mdexp-user\",",
					"                \"password\": \"mdexp-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"data-export.export.post\",",
					"                    \"data-export.file-definitions.item.get\",",
					"                    \"data-export.file-definitions.item.post\",",
					"                    \"data-export.file-definitions.upload.post\",",
					"                    \"data-export.job-executions.items.get\",",
					"                    \"data-export.mapping-profiles.item.post\",",
					"                    \"data-export.mapping-profiles.collection.get\",",
					"                    \"data-export.mapping-profiles.item.get\",",
					"                    \"data-export.mapping-profiles.item.put\",",
					"                    \"data-export.mapping-profiles.item.delete\",",
					"                    \"data-export.job-profiles.item.post\",",
					"                    \"data-export.job-profiles.collection.get\",",
					"                    \"data-export.job-profiles.item.get\",",
					"                    \"data-export.job-profiles.item.put\",",
					"                    \"data-export.job-profiles.item.delete\"",
					"                ]",
					"            }",
					"        },",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test mod-data-export tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    fileDefinitions: {",
					"        validFileDefinition: {",
					"            \"fileName\": \"test_file.csv\"",
					"        },",
					"        invalidFileDefinition: {",
					"            \"fileName\": \"test_file.txt\"",
					"        }",
					"    },",
					"    mappingProfile: {",
					"        \"id\": \"3798f546-7afb-11ea-bc55-0242ac130003\",",
					"        \"name\": \"Mapping profile\",",
					"        \"description\": \"Mapping profile description\",",
					"        \"recordTypes\": [",
					"            \"INSTANCE\"",
					"        ],",
					"        \"outputFormat\": \"MARC\",",
					"        \"transformations\": [",
					"            {",
					"                \"fieldId\": \"electronicAccess.linkText\",",
					"                \"path\": \"$.electronicAccess[*].linkText\",",
					"                \"transformation\": \"001\",",
					"                \"enabled\": \"true\",",
					"                \"recordType\": \"INSTANCE\"",
					"            }",
					"        ],",
					"        \"userInfo\": {",
					"            \"firstName\": \"User\",",
					"            \"lastName\": \"User\",",
					"            \"userName\": \"@username\"",
					"        },",
					"        \"metadata\": {",
					"            \"createdDate\": \"2019-07-22T11:22:07Z\",",
					"            \"createdByUserId\": \"dee12548-9cee-45fa-bbae-675c1cc0ce3b\",",
					"            \"createdByUsername\": \"janedoeuser\",",
					"            \"updatedDate\": \"2019-07-27T13:28:54Z\",",
					"            \"updatedByUserId\": \"dee12548-9cee-45fa-bbae-675c1cc0ce3b\",",
					"            \"updatedByUsername\": \"\"",
					"        }",
					"    },",
					"    defaultMappingProfileId: \"25d81cbe-9686-11ea-bb37-0242ac130002\"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.buildOkapiURL = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiURL(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"    * Build Job Profile with mappingProfileId.",
					"    */",
					"    utils.buildJobProfile = function (mappingProfileId) {",
					"        return {",
					"            \"name\": \"APITest-JobProfile\",",
					"            \"destination\": \"fileSystem\",",
					"            \"description\": \"Job profile for API tests\",",
					"            \"mappingProfileId\": mappingProfileId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"fileDefinitionId\");",
					"        pm.environment.unset(\"jobProfileId\");",
					"        pm.environment.unset(\"mappingProfileId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"    };",
					"    return utils;",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "760ede32-7ad6-4223-8171-c9fa07c2d16d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "efd15801-329d-492f-a82c-922ca944b5bc",
			"key": "testTenant",
			"value": "mdexp_test_tenant",
			"type": "string"
		},
		{
			"id": "da0a44b2-b6f5-4eba-914c-96ac718866cf",
			"key": "xokapitenant",
			"value": "diku",
			"type": "string"
		},
		{
			"id": "f8f29e95-58d6-41ed-a0f5-5b2b57437455",
			"key": "protocol",
			"value": "http",
			"type": "string"
		},
		{
			"id": "cf9123f1-075e-493f-83be-84cbcbb42448",
			"key": "url",
			"value": "localhost",
			"type": "string"
		},
		{
			"id": "e118d370-3ee5-4414-a844-938ab6628508",
			"key": "okapiport",
			"value": "9130",
			"type": "string"
		},
		{
			"id": "8b827720-cc45-446f-8c28-d40a7be83db2",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-data-export/master/src/test/resources",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
