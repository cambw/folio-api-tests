{
	"info": {
		"_postman_id": "dd536a0e-2815-4c90-bc1d-f689bf19a341",
		"name": "mod-kb-ebsco-java",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "schemas",
					"item": [
						{
							"name": "setup environment variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6cd065c-091f-4513-9d61-58eeb7cf33b4",
										"exec": [
											"const moduleName = 'mod-kb-ebsco-java';",
											"pm.test(\"GET json schemas response OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"GET json schemas has JSON body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"pm.test(\"GET contains ebsco-java module\", function () {",
											"    pm.expect(pm.response.text()).to.include(moduleName);",
											"});",
											"",
											"let json = JSON.parse(responseBody);",
											"json.forEach((element) => {",
											"\tvar moduleId = element.id;",
											"\tif(moduleId.includes(moduleName)){",
											"\t\tpm.environment.set('kb-ebsco-java-module-id', moduleId);",
											"\t}",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{xokapitenant}}",
										"interfaces",
										"_jsonSchemas"
									]
								}
							},
							"response": []
						},
						{
							"name": "get schemas",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01825dff-2436-4239-ab84-fe566ba0cd75",
										"exec": [
											"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
											"",
											"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
											"",
											"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
											"",
											"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
											"",
											"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
											"",
											"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
											"",
											"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
											"        pm.variables.get(\"url\") + \":\" + ",
											"        pm.variables.get(\"okapiport\") + ",
											"        \"/_/jsonSchemas?path=\" + path;",
											"}",
											"        ",
											"function getRequest(url){",
											"  const echoGetRequest = {",
											"    url: url,",
											"    method: 'GET',",
											"    header: {",
											"      'X-Okapi-Module-Id' : pm.variables.get(\"kb-ebsco-java-module-id\"),",
											"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
											"    }",
											"  }",
											"    return echoGetRequest;",
											"}        ",
											"",
											"function fetchSchema(echoGetRequest, delay){",
											"",
											"return new Promise((resolve, reject) => {",
											"     setTimeout(function(){",
											"       pm.sendRequest(echoGetRequest, (err, response) => {",
											"       if (!err) {",
											"        resolve(response.text());",
											"       }else{",
											"        reject(err, echoGetRequest);",
											"       }",
											"      });",
											"     }, delay);",
											"  });",
											"}",
											"",
											"function addAdditionalSchemas(data){",
											"    data.push(\"raml-util/schemas/tags.schema\");",
											"    data.push(\"raml-util/schemas/errors.schema\");",
											"    data.push(\"raml-util/schemas/error.schema\");",
											"    data.push(\"raml-util/schemas/parameters.schema\");",
											"    data.push(\"raml-util/schemas/metadata.schema\");",
											"    data.push(\"raml-util/schemas/uuid.schema\");",
											"}",
											"",
											"var interval = setTimeout(() => {}, 30000);",
											"function traverse(data){",
											"    addAdditionalSchemas(data);",
											"     var promises = Object.entries(data).map(([key, value]) => {",
											"         ",
											"        var url = getURL(value);",
											"        var request = getRequest(url);",
											"        ",
											"        return fetchSchema(request, 200 * key)",
											"        .then(function(response) {",
											"            response = replaceResponseRefWithName(response.toString());",
											"            var name = extractName(value);",
											"            if(!checkVariableExist(name)){",
											"                setEnvironmentVariable(name, response);",
											"            }",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"        });",
											"    });",
											"    ",
											"    Promise.all(promises)",
											"        .then(() => {",
											"            clearTimeout(interval)",
											"        })",
											"        .catch((err, req) => {",
											"            console.log(err);",
											"            console.log(req);",
											"            clearTimeout(interval);",
											"        });",
											"}",
											"",
											"traverse(JSON.parse(responseBody));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"value": "{{kb-ebsco-java-module-id}}",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authentication",
					"item": [
						{
							"name": "/authn/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"xokapitoken\", token);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"id": "e0d2d0ca-cf2c-4bde-b0f7-0bbe2583faa4"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup permission",
					"item": [
						{
							"name": "Get user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "678a4e34-8636-4fa7-8555-21616fc73af0",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"userId\", jsonData.user.id);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80de1270-eca2-4b52-9242-21d123cba5ca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"bl-users",
										"by-username",
										"{{username}}"
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "Add permission if it doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b0c67e0-320f-4a63-b22e-9c6d7b77af52",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var permissionExists = jsonData!==null && jsonData.permissions.filter(permission => (permission === \"kb-ebsco.all\")).length > 0;",
											"pm.environment.set(\"permissionExists\", permissionExists);",
											"",
											"if(!permissionExists) {",
											"    jsonData.permissions.push(\"kb-ebsco.all\")",
											"    ",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"    ",
											"    postman.setNextRequest(\"/authn/login\");",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32010fbc-7b99-44e9-9ec5-e0c073966514",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for kb-credentials",
					"item": [
						{
							"name": "POST credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842cfb13-0048-4b47-8cc2-64f621f4525f",
										"exec": [
											"//Check that status is 200",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-credentials-id1\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Massachusettss\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for assignment users",
					"item": [
						{
							"name": "POST assign user1 to KB Credentials1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d729adc-e032-41d4-b387-578fb2286ccc",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"assigned-user-id1\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51469fda-beee-4cbd-96b7-1110e71e100a",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for user credentials",
					"item": [
						{
							"name": "staff user group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e1ff255-b69c-403e-831f-70453c2c2685",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"staff-user-group-id\", jsonData.usergroups[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0916125-c4e7-434c-8978-b69f1fef4bf5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group==staff)",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "(group==staff)"
										}
									]
								},
								"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
							},
							"response": []
						},
						{
							"name": "create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a0cda71-110a-48ee-81bb-7b3570268195",
										"exec": [
											"pm.environment.set(\"cred-user-name\", \"emilia_briggs\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ce11526-d667-49ee-869c-96248499cfbc",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"cred-user-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"{{cred-user-name}}\",\r\n  \"patronGroup\": \"{{staff-user-group-id}}\",\r\n  \"active\": true,\r\n  \"personal\": {\r\n    \"preferredContactTypeId\": \"002\",\r\n    \"lastName\": \"Briggs\",\r\n    \"firstName\": \"Emilia\",\r\n    \"middleName\": \"Gemma\",\r\n    \"email\": \"emilia_briggs@example.com\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dea064e3-e714-4ebd-93f6-ef7fa5c2bf1f",
										"exec": [
											"pm.environment.set(\"cred-user-pass\", \"eb_pass\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55191e81-88cd-45d9-874b-08055e138e87",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"cred-user-auth-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{cred-user-id}}\",\r\n  \"username\": \"{{cred-user-name}}\",\r\n  \"password\": \"{{cred-user-pass}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user credentials permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f7850be-656a-4f70-b7b3-a7d834caff54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef84250a-2960-49de-ba6e-c7b0aa5cbc6a",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-cred-perm-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"permissionName\": \"kb-ebsco.user-kb-credential.get\",\r\n\t\"displayName\": \"get user KB credentials\",\r\n\t\"description\": \"Get user KB credentials\",\r\n\t\"tags\": [],\r\n\t\"subPermissions\": [],\r\n\t\"mutable\": false,\r\n\t\"visible\": false\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign permission to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07cec898-deea-4ba1-b29b-b7bba077e6de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c4fc148b-433b-4bcc-9682-77da707d2ece",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"kb-cred-perm-assigned-id\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{cred-user-id}}\",\r\n  \"permissions\": [\"kb-ebsco.user-kb-credential.get\"]\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "assign user to KB Credentials1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d7b7e0d2-8237-4b0e-85df-f9b7eff2f5ec",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"cred-user-assigned-id\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb42a3e8-d9fd-4b26-bdf6-28fa62877c98",
										"exec": [
											"//Check that status is 201",
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"id\": \"{{cred-user-assigned-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Emilia\",\n      \"middleName\": \"Gemma\",\n      \"lastName\": \"Briggs\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"{{cred-user-name}}\"\n    }\n  }\n}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "/authn/login user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "232f418a-5157-4fca-83d2-29c5102df15b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var token = postman.getResponseHeader(\"x-okapi-token\")",
											"pm.environment.set(\"cred-user-xokapitoken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{cred-user-name}}\",\"password\":\"{{cred-user-pass}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for tags",
					"item": [
						{
							"name": "Create custom package for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e1f153e-4491-4ed1-89a7-07f71c036c9d",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-created-for-tags-id\", response.data.id);",
											"        pm.environment.set(\"custom-package-created-for-tags-name\", response.data.attributes.name);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"  ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.variables.get(\"custom-package-tags-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7100645b-bca2-4704-b46b-cb3a728c9a4b",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-tags-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package with multiple tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9461068-6c52-4451-84f4-ec5d9bdc24e5",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    pm.environment.set(\"tag-name-for-multiple-adding-a\", response.data.attributes.tags.tagList[0]);",
											"    pm.environment.set(\"tag-name-for-multiple-adding-b\", response.data.attributes.tags.tagList[1]);",
											"    ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('TagList is not empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tag in tagList matches with value",
											"    pm.test('Creating tagList', function(){",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"a-test\");",
											"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"b-test\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-created-for-tags-name}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"a-test\",\n    \t\t\t\"b-test\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f28a1fed-ca97-4c07-b018-6792556905e9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3fb5cf82-7a0c-47f1-b22f-dc1a10846d76",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for packages test",
					"item": [
						{
							"name": "Create custom package for testing deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "484e301a-0f87-41dd-a44a-ecc891a073d3",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-id-created-in-post\", response.data.id);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"    ",
											"    //Test that data.attributes has expected attributes",
											"    pm.test('expected data.attributes are present', function() {",
											"        pm.expect(response.data.attributes).to.be.an('object');",
											"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
											"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
											"    });",
											"        ",
											"    //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"    ",
											"    //Test that customCoverage matches what was passed in POST request",
											"    pm.test('custom coverage matches value passed in', function() {",
											"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"    });",
											"    ",
											"    //Test that isCustom is true",
											"    pm.test('isCustom is true', function() {",
											"        pm.expect(response.data.attributes.isCustom).to.be.true;",
											"    });",
											"    ",
											"    //Test that isSelected is true",
											"    pm.test('isSelected is true', function() {",
											"        pm.expect(response.data.attributes.isSelected).to.be.true;",
											"    });",
											"    ",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f87f0de5-2e22-4c5a-86aa-fd45391d5c06",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-one-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1222244-60e7-4306-a6ac-f816576fc3e8",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4d6cc1e5-df0d-4a8d-a142-a889ed7ef883",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"    pm.environment.set(\"tagName\", response.data.attributes.tags.tagList[0]);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create custom package for testing deletion in PUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21aef889-ed4a-4577-86ed-74484b054afe",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    if(response.data.id) {",
											"        pm.environment.set(\"custom-package-name-created-in-post-again\", response.data.attributes.name);",
											"        pm.environment.set(\"custom-package-id-created-in-post-again\", response.data.id);",
											"        pm.environment.set(\"provider-with-tags-id\", pm.environment.get(\"custom-package-id-created-in-post-again\").split('-')[0]);",
											"    }",
											"    ",
											"    //Test that type is packages",
											"    pm.test('type is packages', function(){",
											"        pm.expect(response.data.type).eq('packages');",
											"    });",
											"",
											"    //Test that name matches value passed in",
											"    pm.test('name matches value passed in', function() {",
											"        pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-two-uuid\"));",
											"    });",
											"    ",
											"    //Test that package type is custom",
											"    pm.test('packageType is custom', function() {",
											"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
											"    });",
											"    ",
											"    //Test that allowKbToAddTitles is false",
											"    pm.test('allowKbToAddTitles is false', function() {",
											"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
											"    });",
											"",
											"} else {",
											"    console.log('Custom package not created');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f24d2b6-3de7-4e01-aa2d-b453a4cff599",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set(\"custom-package-two-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom-packages-{{custom-package-two-uuid}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "23137c1d-4171-48ff-bda5-68e59881278f",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d6531af2-4303-46da-9663-54ed6d98f76e",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-again}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38afa113-e541-4cfe-a1c6-3959765c3293",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"\r",
											"var matchingPackages = jsonData.data.filter(\r",
											"  function(packageRecord) {\r",
											"    if (!packageRecord.attributes.isCustom && packageRecord.attributes.titleCount > 1) {\r",
											"      return packageRecord;\r",
											"    }\r",
											"  }\r",
											");\r",
											"\r",
											"pm.test('at least 1 matching package is returned from query', function() {\r",
											"  pm.expect(matchingPackages.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"if (matchingPackages.length > 0) {\r",
											"  pm.environment.set(\"partially-selected-package-id\", matchingPackages[0].id);\r",
											"} else {\r",
											"  console.log(\"Unable to find package id for testing partially selected packages\");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[selected]=false\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "filter[selected]",
											"value": "false\n"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "618d73a1-64b5-4c4d-83d3-ebb3aa09d6ea",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response must have a json body\", function () {\r",
											"  pm.response.to.be.ok;\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.environment.set(\"partially-selected-package-resource-id\", jsonData.data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Select 1 resource in not selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abe1cbd8-8e71-4ea4-9264-9bb7c16dda2e",
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{partially-selected-package-resource-id}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": false\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{partially-selected-package-resource-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{partially-selected-package-resource-id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d4ec26d-08fc-4bfa-a1a8-8d14a6cc274e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45b4c553-0125-4ca8-af93-c88d899a1267",
								"type": "text/javascript",
								"exec": [
									"    tv4.addSchema(\"schema_package.json\", JSON.parse(pm.variables.get(\"schema_package\")));",
									"    tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"    tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"    tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"    tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"    tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"    tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"    tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"    tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"    tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"    tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"    tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"    tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for providers adding tags",
					"item": [
						{
							"name": "Update provider with adding tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1667a857-6cef-43aa-8bb6-ce4105e7e202",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "661fe9ea-255f-4433-809b-136bd7432879",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{tagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second provider with tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6376920-1eb8-4a1b-b215-1fb594e63727",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b5df31c5-f75a-430f-ab30-0d902afba232",
										"exec": [
											"pm.environment.set(\"secondTagName\", \"bar-tag\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"{{secondTagName}}\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "192d08f2-e7b3-4a0b-b0bc-15b1ed281af6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f978f23-d394-4170-a3bb-a29637aed281",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for titles test",
					"item": [
						{
							"name": "GET Customer Specific Provider Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2247fb6-b9f1-434d-8335-80be855ccf68",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"",
											"if (jsonData.data.length > 0) {",
											"    pm.environment.set(\"custom-providerid\", jsonData.data[0].id);",
											"} else {",
											"    console.log(\"Unable to find customer specific provider id for custom title testing\");",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q={{custid}}\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers"
									],
									"query": [
										{
											"key": "q",
											"value": "{{custid}}\n"
										}
									]
								},
								"description": "Retrieves unique id of the customer specific provider. All Custom Packages are created as part of a customer specific provider. "
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fb69ee4-ce1e-4012-bffd-2146591fad7c",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.environment.set(\"custom-packageid\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c340a1a-c6af-4eb4-ab5e-b879f4a5a5a0",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"package-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Update custom package3 with tags",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "79c2cbd3-746e-41f1-8baa-47cdc2e641eb",
										"exec": [
											"pm.environment.set(\"tagName\", \"foo-tag\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ebd880d-3fd4-459b-981e-3a6bcc43c1e2",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    ",
											"     //Test that contentType matches what was passed in POST request",
											"    pm.test('content type matches value passed in', function() {",
											"        pm.expect(response.data.attributes.contentType).to.eq('Unknown');",
											"    });",
											"",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
											"    });",
											"    ",
											"    //Check that tagList is not empty",
											"    pm.test('Creating tagList', function(){",
											"        pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
											"    });",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"data\": {\n\t\t\"type\": \"tags\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"{{custom-package-name-created-in-post-again}}\",\n\t\t\t\"contentType\": \"Unknown\",\n\t\t\t\"tags\": {\n    \t\t\t\"tagList\": [\n    \t\t\t\"{{tagName}}\"\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73426d7e-02ba-4670-a0cf-2d708f648209",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedPackages = jsonData.data.filter(",
											"    function(packageRecord) {",
											"        if (!packageRecord.attributes.isCustom) {",
											"           return packageRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed package is returned from query', function() {",
											"    pm.expect(managedPackages.length).to.be.above(0);",
											"});",
											"",
											"if (managedPackages.length > 0) {",
											"    pm.environment.set(\"managed-packageid\", managedPackages[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed package id for custom title testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=abc\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									],
									"query": [
										{
											"key": "q",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for resources test",
					"item": [
						{
							"name": "Create Custom Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dc029a4-7d75-4b41-ba9a-b2c1bdfc292d",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7fc9d14-8ae1-4129-a880-c78867f3d9fd",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Title for duplicate check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2598c790-bc93-49bb-9eae-59a103eee020",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titlename-for-resource-duplicate\", jsonData.data.attributes.name);",
											"pm.environment.set(\"custom-titleid-for-resource-duplicate\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e03defce-ccaa-4030-8a35-7f5614a6f0ed",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-uuid2\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-uuid2}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "Create Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28dd9c25-5539-463b-a599-ee5dc7d65e90",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-for-resource\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0706bc26-22ff-42df-8d2f-934cd07c3fa7",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-for-resource-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								},
								"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7da85aca-26a1-4b17-92d7-66f461624f83",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"var managedTitles = jsonData.data.filter(",
											"    function(titleRecord) {",
											"        if (!titleRecord.attributes.isCustom) {",
											"           return titleRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed title is returned from query', function() {",
											"    pm.expect(managedTitles.length).to.be.above(0);",
											"});",
											"",
											"if (managedTitles.length > 0) {",
											"    pm.environment.set(\"managed-titleid\", managedTitles[0].id);",
											"    pm.environment.set(\"managed-titlename\", managedTitles[0].attributes.name);",
											"} else {",
											"    console.log(\"Unable to find managed title id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=abc\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "abc\n"
										}
									]
								},
								"description": "Locate a random managed package to test custom title create error scenario."
							},
							"response": []
						},
						{
							"name": "GET Sample Managed Resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d515c429-56cc-4aab-b9b9-7d4b10810888",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var managedResources = jsonData.included.filter(",
											"    function(resourceRecord) {",
											"        if (!resourceRecord.attributes.isPackageCustom) {",
											"           return resourceRecord;",
											"        }",
											"    }",
											");",
											"",
											"pm.test('at least 1 managed resource is returned from query', function() {",
											"    pm.expect(managedResources.length).to.be.above(0);",
											"});",
											"",
											"if (managedResources.length > 0) {",
											"    pm.environment.set(\"managed-title-package-resourceid\", managedResources[0].id);",
											"} else {",
											"    console.log(\"Unable to find managed resource id for resource testing\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{managed-titleid}}?include=resources\n",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{managed-titleid}}"
									],
									"query": [
										{
											"key": "include",
											"value": "resources\n"
										}
									]
								},
								"description": "Locate a random managed resource to test resource delete functionality"
							},
							"response": []
						},
						{
							"name": "Create custom title for tags test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0557bbbc-1fef-4a92-b6aa-ce4a0978b8da",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-title-for-resource-tags-test-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f18f6c6-d22f-4b32-834d-815850e59c73",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-titleid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-for-resource-tags-test-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n    "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Custom package for resource tag test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "24cb79b7-8a11-4918-9314-622de75a97fe",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-package-from-setup-uuid\", uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4173c335-9869-4b5c-8cac-2ad870ea9eec",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.environment.set(\"custom-packageid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{custom-package-from-setup-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST add custom title to custom package with resource tags",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b43a902-49b0-4c4a-8ee7-ae9a88be5a30",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store custom resource id for future reference in other tests/cleanup",
											"pm.environment.set(\"custom-resourceid-from-setup\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-from-setup}}\",\n      \"titleId\": \"{{custom-titleid-from-setup}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b1fee5d-4067-4297-9f59-c19f8205ea98",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be693ee4-6fc6-4fca-b014-1f258d370fe8",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.variables.get(\"custom-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"tag-name-for-resource\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n          \"{{tag-name-for-resource}}\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add custom labels to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dcab4eed-a38d-4dd0-a3ba-9cceca1d8946",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"custom-resource-with-tags-uuid\", uuid.v4());",
											"pm.environment.set(\"tag-name-for-resource\", \"tag one\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1223cf7f-81f9-46f5-aa59-205432ae2bb8",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is resources",
											"pm.test('type is resources', function(){",
											"    pm.expect(response.data.type).eq('resources');",
											"});",
											"    ",
											"    ",
											"// Test that attributes have the expected keys",
											"let attributes = response.data.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(attributes).to.be.an('object');",
											"    pm.expect(attributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
											"});",
											"",
											"//Check that userDefinedFields are correct",
											"pm.test('UserDefinedFields are correct', function(){",
											"    pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
											"    pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
											"    pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
											"    pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
											"    pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"test 3\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT add tags to managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8331c4ad-b316-4bed-b918-223f9239b119",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"managed-resource-with-tags-uuid\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fe8b333-ac46-4b85-bfbf-4a0a8dd2be0d",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('managed-resource-' + pm.variables.get(\"managed-resource-with-tags-uuid\"));",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tags', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(1);",
											"    pm.expect(response.data.attributes.tags.tagList[0]).eq(pm.environment.get(\"secondTagName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-resource-with-tags-uuid}}\",\n      \"tags\": {\n        \"tagList\": [\n          \"{{secondTagName}}\"\n        ]\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f5a805c8-7469-4db8-b350-d8fd3d9139fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9fe7c921-175d-4a77-9266-6a14a5c93e3d",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
									"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
									"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
									"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
									"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
									"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
									"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
									"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for custom labels",
					"item": [
						{
							"name": "PUT /custom-labels",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23756a7a-4597-4ead-ae48-8244f2712404",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"pm.test(\"Content-Type header has expected value\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//verify headers",
											"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
											"    pm.response.to.have.header(\"Transfer-Encoding\");",
											"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
											"});",
											"",
											"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
											"    pm.response.to.have.header(\"X-Okapi-Trace\");",
											"});",
											"",
											"//Get the first record",
											"let firstRecord = jsonData.data[0];",
											"    ",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in a record', function() {",
											"    pm.expect(firstRecord).to.be.an('object');",
											"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
											"    pm.expect(firstRecord.type).eq('customLabels');",
											"});",
											"",
											"// Test that attributes have the expected keys",
											"let firstAttributes = firstRecord.attributes;",
											"pm.test('expected attributes are present in a record', function() {",
											"    pm.expect(firstAttributes).to.be.an('object');",
											"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test custom label 1\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test custom label 2\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"custom-labels"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ddeb55f4-ee92-4ee1-b355-201368f386ea",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ad8852c5-c3ab-483a-8be6-f25be2921112",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
									"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
									"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "setup for access types",
					"item": [
						{
							"name": "Create new access type 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "813edd13-51df-49a8-ab89-1f09c5fb1aaa",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id1\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed\",\n            \"description\": \"some description\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new access type 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "102aa29e-7b64-4d54-ae91-919e905b22db",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id3\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "528a7850-862f-4c0e-963b-d39c9faa9942",
										"exec": [
											"pm.environment.set(\"access-type-name3\", \"Subscribed2\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"{{access-type-name3}}\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new access type 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ead3e0f5-7566-4d9b-91d2-5ed6a03dd8fa",
										"exec": [
											"pm.test(\"Status is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"    ",
											"// Store access type id for future reference in other tests/cleanup",
											"pm.environment.set(\"access-type-id4\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2646c5b6-444e-48f0-8e37-2449ae85e0fb",
										"exec": [
											"pm.environment.set(\"access-type-name4\", \"Trial\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"name": "Content-Type",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"{{access-type-name4}}\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"access-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package1 with access-type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b8d0b40e-a4ad-409e-85b5-c5dbbfe8a981",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "47edb847-0767-439b-8a55-d08ed94a2ba0",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
											"});",
											"",
											"//Test that id matches what was provided in query",
											"pm.test('id matches as provided in query', function(){",
											"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
											"});    ",
											"",
											"//Test that type is packages",
											"pm.test('type is packages', function(){",
											"    pm.expect(response.data.type).eq('packages');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
											"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
											"});",
											"",
											"//Test that contentType matches as provided in request",
											"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
											"pm.test('contentType matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.contentType).eq('Print');",
											"});",
											"",
											"//Test that isSelected matches as provided in request",
											"pm.test('isSelected matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.isSelected).to.be.true;",
											"});",
											"",
											"//Test that visibilityData matches as provided in request",
											"pm.test('visibilityData matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
											"});",
											"",
											"//Test that custom coverage matches provided in request",
											"pm.test('customCoverage matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
											"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
											"});",
											"",
											"//Test that resources are not included in relationships",
											"pm.test('relationships meta should not include resources', function() {",
											"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
											"});",
											"",
											"//Test that access type assigned",
											"pm.test('access type should be assigned', function() {",
											"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
											"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id3\"));",
											"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id3\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-package-id-created-in-post}}\",\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n            \"contentType\": \"Print\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            },\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id3}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update custom package2 with access-type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51223608-d3a7-4a16-b04e-51fa9a630063",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
											"});",
											"",
											"//Test that id matches what was provided in query",
											"pm.test('id matches as provided in query', function(){",
											"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-created-for-tags-id'));",
											"});    ",
											"",
											"//Test that type is packages",
											"pm.test('type is packages', function(){",
											"    pm.expect(response.data.type).eq('packages');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
											"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
											"});",
											"",
											"//Test that contentType matches as provided in request",
											"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
											"pm.test('contentType matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.contentType).eq('E-Journal');",
											"});",
											"",
											"//Test that isSelected matches as provided in request",
											"pm.test('isSelected matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.isSelected).to.be.true;",
											"});",
											"",
											"//Test that visibilityData matches as provided in request",
											"pm.test('visibilityData matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
											"});",
											"",
											"//Test that resources are not included in relationships",
											"pm.test('relationships meta should not include resources', function() {",
											"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
											"});",
											"",
											"//Test that access type assigned",
											"pm.test('access type should be assigned', function() {",
											"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
											"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id4\"));",
											"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id4\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"{{custom-package-created-for-tags-name}}\",\n            \"contentType\": \"E-Journal\",\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id4}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update custom resource with access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a7eab6d-9ee1-402f-a81a-061a21033822",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36738a1f-3e19-4ca0-a812-4e8cbb4dc438",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"{{access-type-id3}}\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "kb-credentials",
			"item": [
				{
					"name": "GET kb-credentials collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET credentials collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45062924-d606-44f8-b4d2-02fa855f7baf",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentialsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is kbCredentials",
													"        pm.expect(firstRecord.type).eq('kbCredentials');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"        });",
													"    } else {",
													"        console.log(\"No credentials exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78da4a4e-245e-438e-bd84-08128fa0cc0b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b9f778a-d62d-4fed-a2bd-1724eb04529b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST credentials valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1eb2cff7-851f-4bd2-bb25-4155af7f33e3",
												"exec": [
													"//Check that status is 201",
													"pm.test(\"Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"         ",
													" //Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"        ",
													" //Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function() {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Illinois');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});",
													"",
													"pm.environment.set(\"kb-credentials-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72c5fb75-9ea2-4714-b1dd-5b2b1c5aceb3",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e55ad88c-84bc-4fec-9cec-feda53979eae",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c0ba656-4f11-46e0-80bc-c84093893ce9",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with already existed name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7202f9f6-45b4-4b1e-b320-6b67f8897924",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Duplicate name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"Credentials with name 'University of Illinois' already exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86de5347-82eb-4890-89d1-17a2237ef1e8",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5536f385-446d-4894-ad19-7402ab880577",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a66199b3-547b-49b8-8257-686976ddaabb",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/kb-credentials/\" + pm.environment.get(\"kb-credentials-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    var response = res.json();",
													"    pm.test(\"Check changes\", function () {",
													"        pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"        pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"        pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"        pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"    });",
													"    ",
													"    pm.test('expected meta are present', function() {",
													"        pm.expect(response.meta).to.be.an('object');",
													"        pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28216a92-a0ed-4d7e-9429-735fdd6ab97d",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c6c030c-6ae9-4e60-95e8-3d7581a039cf",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm.apiKey}}\",\r\n      \"url\": \"{{rm.apiUrl}}\",\r\n      \"customerId\": \"{{rm.apiCustomer}}\"\r\n    }\r\n  }\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1253dc89-0f04-41f9-bfe4-96be3cf564ef",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"KB API Credentials are invalid\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with name longer than 255",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b756cd9d-ca95-48ae-8ae6-7605428a59cb",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 255 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"zxehyhvsiucipujicjhuziczzjvqhwmaepkvdmupcaqrscjiilqlnumrxyttwgfoqlxztlpsosldoqjcbrkyvvaxzcklqlzbdkofjkqtbmvhkuyhdlvyeuqmebrulxqzryqzpcxkbezpdwbwzguwwnjswhwfexngtxgkizjdwvcnxqlhsszbavqndixyxeqvceqdssviqaotmsvnuehsmghhwsnhwktzrrqizhckmwtgpcsdhdyxhgnrgnqzxbcu\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "672b2036-f865-4daa-b125-f3676cadfe20",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with already existed name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdd1514e-ded5-4a0d-ae9a-eb03e6c5a0e3",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Duplicate name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"Credentials with name 'University of Illinois' already exist\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c235664-411d-4529-8887-faf8cf2bcce0",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid url\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"url must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"\",\n      \"customerId\": \"{{rm.apiCustomer}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT credentials with empty customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d134e1e1-ed2f-46a7-9de8-d48dd0ec031b",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid customerId\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"customerId must not be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"{{rm.apiKey}}\",\n      \"url\": \"{{rm.apiUrl}}\",\n      \"customerId\": \"\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83fe299c-4523-4472-ad29-aa0fb2d31546",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7896b86d-58ad-4f21-843c-64e172f4eec0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET kb-credentials by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET credentials by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc26d05e-3b2f-4913-9d59-86508a9724c4",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function () {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"",
													"//Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function () {",
													"    pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"    pm.expect(response.attributes.apiKey).to.be.equals('****************************************');",
													"    pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"    pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function () {",
													"    pm.expect(response.meta).to.be.an('object');",
													"    pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfa9e18d-f69a-478a-8759-0319a2a321ac",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"kbCredentials\",\n    \"attributes\": {\n      \"name\": \"University of Illinois\",\n      \"apiKey\": \"invalid key\",\n      \"url\": \"{{rm-api-url-value}}\",\n      \"customerId\": \"{{rm-api-custid-value}}\"\n    }\n  }\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaa94fa2-d48a-42e7-bf43-2cc7a4675f96",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f072861-ea51-48d3-b722-4c298f4cb191",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e0dec8e-d302-44de-aecf-aaf20308a3cd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE kb-credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d416f0b0-679a-4f8d-be6f-de1cfff4d989",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss\",\r\n      \"apiKey\": \"QTh4lr58lK6RS44WI1wwY4tbXuXjHSJXaDO15wo1\",\r\n      \"url\": \"https://sandbox.ebsco.io\",\r\n      \"customerId\": \"apidvgvmt\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE missing credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c89948e-9aa4-4656-a859-806d6e5a901c",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE credentials with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83d8e21a-a05d-485f-b8ae-6d3ac92a081d",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'id\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE credentials with assigned user(s)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e6439e6-ecfb-45e7-ab99-82edcc081df1",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Credentials have related records and can't be deleted\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3f0b81c-1c21-47d5-9110-d5057fea366b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f79dc5f5-8a80-4873-839a-0d6edd649fa1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ff5902b9-78dd-4a0a-a133-54e023821361",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "67c3865e-7d82-48a8-9208-0134b6eb8edf",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_kbCredentialsCollection.json\",pm.variables.get(\"schema_kbCredentialsCollection\"));",
							"tv4.addSchema(\"schema_kbCredentials.json\", pm.variables.get(\"schema_kbCredentials\"));",
							"tv4.addSchema(\"schema_kbCredentialsDataAttributes.json\",pm.variables.get(\"schema_kbCredentialsDataAttributes\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user assignment",
			"item": [
				{
					"name": "GET users assigned to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET users collection for KB Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af49c1db-390c-4239-92c3-bfc072f87f3e",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type assignedUsers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is assignedUsers",
													"        pm.expect(firstRecord.type).eq('assignedUsers');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"credentialsId\", \"userName\", \"firstName\", \"middleName\", \"lastName\", \"patronGroup\");",
													"        });",
													"    } else {",
													"        console.log(\"No user exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET with non-existing KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0c6c5238-b689-4178-8a50-8eeeff9183e3",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"non-existing-credentials-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "08721833-a97b-45bd-91df-d7b5002343ba",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify attibutes",
													" pm.test('expected attributes are present', function() {",
													"    pm.expect(jsonData.data).to.be.an('array');",
													"     ",
													"    pm.expect(jsonData.meta).to.be.an('object');",
													"    pm.expect(jsonData.meta).to.include.all.keys(\"totalResults\");",
													"    ",
													"    pm.expect(jsonData.jsonapi).to.be.an('object');",
													"    pm.expect(jsonData.jsonapi).to.include.all.keys(\"version\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET with invalid KB Credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f23fb6e2-e99a-4784-a896-fcc92179328c",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.contains(\"'id' parameter is incorrect\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST assign user to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST assign user2 to KB Credentials1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "538743d5-83e0-4666-bfef-65929ca034e3",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"assigned-user-id2\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a694aed6-6400-427b-8542-4ea76f4e394d",
												"exec": [
													"//Check that status is 201",
													"pm.test(\"Status is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_assignedUser\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is assignedUsers",
													"pm.expect(response.type).eq('assignedUsers');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"         ",
													" //Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"credentialsId\", \"userName\", \"firstName\", \"middleName\", \"lastName\", \"patronGroup\");",
													"});",
													"        ",
													" //Test that credentialsId as expected",
													"pm.test('test credentialsId as expected', function() {",
													"    pm.expect(response.attributes.credentialsId).to.be.equals(pm.environment.get(\"kb-credentials-id1\"));",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST with non-existing KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f049be5c-68b8-4ae4-bbe3-6f4407aafe40",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"non-existing-credentials-id\", uuid.v4());",
													"pm.globals.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4eca6c42-8666-4506-b189-438bcfd7f03d",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{non-existing-user-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST with invalid KB credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9491a295-4d29-4ce1-a669-92f6635213f9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "96d79aba-9efb-4442-9362-ea229fb0f686",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.equal(\"must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"\");",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"data.attributes.credentialsId\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"invalid-id\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"john_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST without required attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2da105cb-5225-46c5-9260-93058ec85950",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "981e64dd-42cd-4b55-a5b2-224a9c3d8cd3",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 6 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(6);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.userName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.credentialsId\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.lastName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.patronGroup\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n\n    \"attributes\": {\n      \n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST with too long user name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe4109cf-f4f2-4dfb-9826-c3ab1a734884",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "396abab9-5425-4df2-a52a-0fe734f25221",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"value too long for type character varying(100)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST assign already assigned user to another KB Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c0b71da9-2dc2-4467-9f00-e76b7e8fdc14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6be63e72-3091-419e-83d4-80e77734b4ca",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"The user is already assigned to another credentials\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"john_doe\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT update user assignment to KB Credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT update user2 information",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7cd7f689-eed3-4277-ac8a-e6a5486da47b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df3f05da-8c73-4de4-92f3-44e3e05af3de",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Member\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT with invalid user id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c23be0dc-1903-4d26-8162-5195864c28d6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69e75bdc-befa-4d3d-866d-f481ce845f3a",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.equal(\"must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"\");",
													"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"invalid-id\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"invalid-id"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with non-existing user id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8f8f02b3-fe2d-48ee-b788-1192d69bb0f0",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ba0d3914-e39b-4d61-aee7-5f9bb98c407a",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{non-existing-user-id}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{non-existing-user-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{non-existing-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT without required attributes",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7508eeb-4c28-4ebc-be3f-0ec95bbf7c53",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff30cf6d-ccf9-42db-9c64-93dc52f198da",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 6 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(6);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.userName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.credentialsId\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.lastName\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.patronGroup\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"attributes\": {\n     \n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with too long user name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73c6f2f8-b6a4-48ba-a8c6-4f08c6584f98",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b137785e-cb6a-4c2f-ba1f-ca1cbeac8236",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"value too long for type character varying(100)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id1}}\",\n      \"firstName\": \"John\",\n      \"middleName\": \"William\",\n      \"lastName\": \"Doe\",\n      \"userName\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean ma\",\n      \"patronGroup\": \"Staff\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT with changing credentials for user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "046a3b8a-6f45-4c63-bcbc-093430f62985",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7612db47-1442-46dc-b3e3-ce94c79bf7a1",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Credentials ID and user ID can't be updated\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id2}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{non-existing-credentials-id}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE unassign user from KB Credentials",
					"item": [
						{
							"name": "Posistive",
							"item": [
								{
									"name": "DELETE unassign user1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ba649763-964d-49d7-8eb0-58c8dc70e0ed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8ebb9471-ec20-47be-9135-84b993ca5f88",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE already deleted item",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6ce9f5c3-7f37-49f3-8fd4-90f43dd8cfe1",
												"exec": [
													"var uuid = require('uuid');",
													"pm.environment.set(\"non-existing-user-id\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eee4811d-44d9-452b-8a7e-8f32ddac52b3",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"{{assigned-user-id1}}\",\n    \"type\": \"assignedUsers\",\n    \"attributes\": {\n      \"credentialsId\": \"{{kb-credentials-id2}}\",\n      \"firstName\": \"Jane\",\n      \"middleName\": \"Rosemary\",\n      \"lastName\": \"Doe\",\n      \"patronGroup\": \"Staff\",\n      \"userName\": \"jane_doe\"\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{assigned-user-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE non-existing user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a11ecc43-7643-4df0-8468-03a9336bd8ba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "af211401-5e57-407a-ac99-1340ee825a8a",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"   pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"Assigned User not found by id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{non-existing-user-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{non-existing-user-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE with invalid id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0b8184cf-139e-405d-87b4-5767058d5192",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eabe8c07-344d-4284-8764-7dd897636bf8",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"   pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"parameter is incorrect.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/invalid-id",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"invalid-id"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "543cabe7-0ddf-4333-93cf-35deb3a52fd2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "181282a8-e972-4ba7-8e63-9e97127c38a0",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_assignedUserCollection.json\", JSON.parse(pm.environment.get(\"schema_assignedUserCollection\")));",
							"tv4.addSchema(\"schema_assignedUser.json\", JSON.parse(pm.environment.get(\"schema_assignedUser\")));",
							"tv4.addSchema(\"schema_assignedUserDataAttributes.json\", JSON.parse(pm.environment.get(\"schema_assignedUserDataAttributes\")));",
							"tv4.addSchema(\"schema_assignedUserPostRequest.json\", JSON.parse(pm.environment.get(\"schema_assignedUserPostRequest\")));",
							"tv4.addSchema(\"schema_assignedUserPutRequest.json\", JSON.parse(pm.environment.get(\"schema_assignedUserPutRequest\")));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "user credentials",
			"item": [
				{
					"name": "GET user credentials",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET users credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b089d2b-f36d-47f8-b39a-869dc323f753",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_kbCredentials\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is kbCredentials",
													"pm.expect(response.type).eq('kbCredentials');",
													"",
													"//Test that object has the expected keys",
													"pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"meta\");",
													"",
													"pm.expect(response.id).to.be.equals(pm.environment.get('kb-credentials-id1'));",
													"",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function () {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"apiKey\", \"customerId\", \"url\");",
													"});",
													"",
													"//Test that data.attributes are expected attributes",
													"pm.test('expected data.attributes are as expected', function () {",
													"    pm.expect(response.attributes.name).to.be.equals('University of Massachusettss - Updated');",
													"    pm.expect(response.attributes.apiKey).to.be.equals(pm.environment.get('rm.apiKey'));",
													"    pm.expect(response.attributes.customerId).to.be.equals(pm.environment.get('rm.apiCustomer'));",
													"    pm.expect(response.attributes.url).to.be.equals(pm.environment.get('rm.apiUrl'));",
													"});",
													"",
													"pm.test('expected meta are present', function () {",
													"    pm.expect(response.meta).to.be.an('object');",
													"    pm.expect(response.meta).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad453eb9-2c56-4f85-b772-0448fefc2180",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{cred-user-xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/user-kb-credential",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"user-kb-credential"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "unassign user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f9891e7e-ee92-457f-850f-4827a85121bd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a494e79-4255-4ec7-a6c8-5f9562aa5fbf",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{cred-user-assigned-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"users",
												"{{cred-user-assigned-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "credentials for unassigned user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48da52d6-99e5-45f6-8673-85ddad2a234d",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + ",
													"        JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contains(\"User credentials not found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd966cac-3511-46c8-b4a5-9fefe3c39270",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{cred-user-xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/user-kb-credential",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"user-kb-credential"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "access-types",
			"item": [
				{
					"name": "GET access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09e4e65b-05b2-44c3-89b8-a25f60cc3bf8",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"usageNumber\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"credentialsId\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types collection by user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe10f66f-5190-4c6a-a103-59bbb60151f8",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypesCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is accessTypes",
													"        pm.expect(firstRecord.type).eq('accessTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"usageNumber\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"credentialsId\");",
													"        });",
													"    } else {",
													"        console.log(\"No Access types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6898f2b7-0221-4ec4-bbcd-a2a13ac75c30",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "939c6ddc-cc8e-46a7-b9fe-235a3645e554",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa7bb2db-22b7-4ae9-8a50-8b802fa4baa0",
												"exec": [
													"pm.test(\"success test\", function() {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//Check that status is 200\r",
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"//Check that content-type is application/vnd.api+json\r",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { \r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"//Validate response against json api schema\r",
													"pm.test(\"Validate schema\", function () {\r",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\r",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\r",
													"});\r",
													"\r",
													"pm.test('expected fields are present', function() {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"creator\", \"usageNumber\", \"metadata\");\r",
													"});\r",
													"\r",
													"pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));\r",
													"\r",
													"pm.expect(response.type).eq('accessTypes');\r",
													"\r",
													"pm.test('expected attributes are present', function() {\r",
													"    pm.expect(response.attributes).to.be.an('object');\r",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\", \"credentialsId\");\r",
													"});\r",
													"\r",
													"pm.test('expected creator are present', function() {\r",
													"    pm.expect(response.creator).to.be.an('object');\r",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");\r",
													"});\r",
													"\r",
													"pm.test('expected metadata are present', function() {\r",
													"    pm.expect(response.metadata).to.be.an('object');\r",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types by id and user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e38a731-2a79-456f-ae22-cc5afdc402ee",
												"exec": [
													"pm.test(\"success test\", function() {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//Check that status is 200\r",
													"pm.test(\"Status is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"//Check that content-type is application/vnd.api+json\r",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { \r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Response must have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json; \r",
													"});\r",
													"\r",
													"let response = pm.response.json();\r",
													"\r",
													"//Validate response against json api schema\r",
													"pm.test(\"Validate schema\", function () {\r",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));\r",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));\r",
													"});\r",
													"\r",
													"pm.test('expected fields are present', function() {\r",
													"    pm.expect(response).to.be.an('object');\r",
													"    pm.expect(response).to.include.all.keys(\"id\", \"type\", \"attributes\", \"creator\", \"usageNumber\", \"metadata\");\r",
													"});\r",
													"\r",
													"pm.expect(response.id).eq(pm.environment.get(\"access-type-id1\"));\r",
													"\r",
													"pm.expect(response.type).eq('accessTypes');\r",
													"\r",
													"pm.test('expected attributes are present', function() {\r",
													"    pm.expect(response.attributes).to.be.an('object');\r",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\", \"credentialsId\");\r",
													"});\r",
													"\r",
													"pm.test('expected creator are present', function() {\r",
													"    pm.expect(response.creator).to.be.an('object');\r",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");\r",
													"});\r",
													"\r",
													"pm.test('expected metadata are present', function() {\r",
													"    pm.expect(response.metadata).to.be.an('object');\r",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET missing access types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a22ee751-f774-48cc-ba46-6d10b2071153",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of access types if not null",
													"if (response) {",
													"    pm.test('expected one error with title', function () {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.equal(\"Access type not found: id = 99999999-9999-1999-a999-999999999999\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/99999999-9999-1999-a999-999999999999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"99999999-9999-1999-a999-999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48d4b257-0549-46d2-ae8c-58cfa01d7dc1",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contain(\"\\'accessTypeId\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8531924-0f29-4139-a8f8-1040bba140bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28332881-3fa9-4704-bbfa-3b8799b7b2f3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST to access-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Create access type 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d864c6d-5201-46e6-9d9a-e2b0f9750ef8",
												"exec": [
													"pm.test(\"Status is 201\", function () {",
													"    // pm.response.to.be.success;",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_accessTypeCollectionItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"    ",
													"pm.expect(response.type).eq('accessTypes');",
													"    ",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response.attributes).to.be.an('object');",
													"    pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"});",
													"    ",
													"pm.test('expected creator are present', function() {",
													"    pm.expect(response.creator).to.be.an('object');",
													"    pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"});",
													"    ",
													"pm.test('expected metadata are present', function() {",
													"    pm.expect(response.metadata).to.be.an('object');",
													"    pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\");",
													"});",
													"    ",
													"// Store access type id for future reference in other tests/cleanup",
													"pm.environment.set(\"access-type-id2\", response.id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2fc253b-6279-4025-a3c3-562db9627aab",
												"exec": [
													"pm.environment.set(\"access-type-name2\", \"Trial updated\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Trial updated\",\n            \"description\": \"Indicates subscription of the entity\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Create access type (with no type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddb82d54-c89a-4308-b437-85fdb9efc49a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"attributes\": {\n            \"name\": \"Trial\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with name too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9444a6b-221a-4efd-b529-f6e74f12180e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid name\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"name is too long (maximum is 75 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo lig\",\n            \"description\": \"Indicates subscription of the entity\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with description too long)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc546259-d6b1-4897-a298-c0c049be3b11",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.equal(\"Invalid description\");",
													"    pm.expect(response.errors[0].detail).to.equal(\"description is too long (maximum is 150 characters)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum\",\n            \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis pa\",\n            \"credentialsId\": \"{{kb-credentials-id1}}\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access type  (with unknown property)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "743db598-4682-4e81-96e8-f99a6c4b5bef",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].message).to.contain(\"Unrecognized field\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Lorem ipsum\",\n            \"description\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\"\n        },\n        \"unknownProperty\": \"unknownValue\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2fc442c-70b2-4ad1-840f-e8d040ae1e95",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cd5558e-6bb9-4d53-abf7-d021e9253c4c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update access-type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb5b366d-ac32-4b31-b6eb-c3ef035c4aa1",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") +\"/eholdings/kb-credentials/\" ",
													"    + pm.environment.get(\"kb-credentials-id1\") + \"/access-types/\" + pm.environment.get(\"access-type-id1\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check changes\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.type).to.equal(\"accessTypes\");",
													"        ",
													"        pm.test('expected attributes are present', function() {",
													"        pm.expect(response.attributes).to.be.an('object');",
													"        pm.expect(response.attributes).to.include.all.keys(\"name\", \"description\");",
													"        ",
													"        pm.expect(response.attributes.name).to.equal(\"Subscribed updated\");",
													"        pm.expect(response.attributes.description).to.equal(\"Indicates subscription of the entity\");",
													"    });",
													"    ",
													"    pm.test('expected creator is present', function() {",
													"        pm.expect(response.creator).to.be.an('object');",
													"        pm.expect(response.creator).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"     pm.test('expected updater is present', function() {",
													"        pm.expect(response.updater).to.be.an('object');",
													"        pm.expect(response.updater).to.include.all.keys(\"lastName\", \"firstName\");",
													"    });",
													"    ",
													"    pm.test('expected metadata are present', function() {",
													"        pm.expect(response.metadata).to.be.an('object');",
													"        pm.expect(response.metadata).to.include.all.keys(\"createdDate\", \"createdByUserId\", \"createdByUsername\", \"updatedDate\", \"updatedByUserId\", \"updatedByUsername\");",
													"    });",
													"",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33b681b8-4e81-4d7a-8a03-76c086f4df10",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contains('\\'accessTypeId\\' parameter is incorrect');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "with not existed id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79e88123-b071-44d2-a089-d6505715a699",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.contain('not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "045ebb07-1d77-467d-9115-590e96973ee3",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"notExistedId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"name": "Content-Type",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"type\": \"accessTypes\",\n        \"attributes\": {\n            \"name\": \"Subscribed updated\",\n            \"description\": \"Indicates subscription of the entity\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{notExistedId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{notExistedId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE access-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "DELETE access types by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "588464ac-264e-4a48-a184-5634d39f3045",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.be.success;",
													"});",
													"",
													"pm.test(\"Response without error json body\", function () {",
													"    pm.response.to.be.success;",
													"    pm.response.to.not.have.body;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "DELETE access-type assigned to records",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "983fb02f-e181-482c-ae15-88e16d07aaae",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"Can\\'t delete access type that has assigned records\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/{{access-type-id3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"{{access-type-id3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "DELETE access types with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0413b0c7-123b-4712-99f7-8b43f4977cde",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response) {",
													"    pm.test('expected one error with title', function() {",
													"        pm.expect(response.errors[0]).to.be.an('object');",
													"        pm.expect(response.errors[0].title).to.contains(\"\\'accessTypeId\\' parameter is incorrect\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/access-types/9999",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"access-types",
												"9999"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "833d47f6-e22b-4e2f-8a82-cc436b8f7994",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd29f0a4-fcca-432f-a4bd-fafddc51bd35",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c09fff08-7977-4bd8-8767-6c1927c5133c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "672124a7-3b42-420a-a7fe-dc349b5f6146",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_accessTypesCollection.json\", pm.variables.get(\"schema_accessTypesCollection\"));",
							"tv4.addSchema(\"schema_accessType.json\", pm.variables.get(\"schema_accessType\"));",
							"tv4.addSchema(\"schema_accessTypeDataAttributes.json\", pm.variables.get(\"schema_accessTypeDataAttributes\"));",
							"tv4.addSchema(\"schema_userDisplayInfo.json\", pm.variables.get(\"schema_userDisplayInfo\"));",
							"tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", pm.environment.get(\"schema_metaTotalResults\"));",
							"tv4.addSchema(\"schema_jsonapi.json\", pm.environment.get(\"schema_jsonapi\"));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "providers",
			"item": [
				{
					"name": "GET provider collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9f24f84-bd58-4247-a380-7f97d6996d8e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"supportsCustomPackages\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute types",
													"        pm.test('expected data.attributes types are present', function() {",
													"            pm.expect(firstRecord.attributes.name).to.be.a('string');",
													"            pm.expect(firstRecord.attributes.packagesTotal).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.packagesSelected).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.supportsCustomPackages).to.be.a('boolean');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"packages\")",
													"        });",
													"        ",
													"        //Test that relationships.packages has expected attributes",
													"        pm.test('expected relationships.packages are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages).to.include.all.keys(\"meta\")",
													"        });",
													"        ",
													"        //Test that relationships.packages.meta has expected attributes",
													"        pm.test('expected relationships.packages.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that packages are not included in relationships",
													"        pm.test('relationships meta should not include packages', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No providers found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d146a8ee-8f67-40a2-83cc-1e5ecf411333",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        })",
													"        //Test that name contains either basket or weaving in it",
													"        pm.test('name contains query string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('Basket');",
													"        })",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Basket",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Basket"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d34b458-294f-4992-a14c-151ad11ff79d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that 12 records equal to or less than count are in response",
													"        pm.test('number of records less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(15);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=12",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8c2898f-cfe7-41c8-a876-b6029a534a47",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that number of records returned are less than or equal to count",
													"        pm.test('number of provider records returned are less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&page=1&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc053ffd-fafe-4049-9022-653208ad3377",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b774736-decb-49e8-8610-5ccff49af15b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"let len = response.data.length;",
													"pm.test('response contains 1 provider', function() {",
													"    pm.expect(len).to.eq(1);",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with non-existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d86ca25-1d51-4e97-add6-925f36bfa26c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response is empty', function() {",
													"    pm.expect(len).to.eq(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7a9067a-cdaf-4e08-81af-770b4974ee1d",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"non-existing-tag\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with filter[tags] with list of tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4aaa1275-70a1-49ed-b9cb-1bc6f6da10c7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let len = response.data.length;",
													"pm.test('response contains both providers with tags', function() {",
													"    pm.expect(len).to.eq(2);",
													"});",
													"",
													"function providerByIdRequest(id){",
													"    return {",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/providers/\" + id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"    }",
													"}",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[0].id), function(err, res) {",
													"    pm.test(\"Check name of second tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"secondTagName\"));",
													"    });",
													"});",
													"",
													"pm.sendRequest(providerByIdRequest(response.data[1].id), function(err, res) {",
													"    pm.test(\"Check name of first tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "65b574e6-1147-41aa-a4cb-1078fb8a1a71",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?filter[tags]={{tagName}},{{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}},{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "296bfa10-a00c-47c2-a200-62d267894874",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b00ce7b-d5cc-4a0e-a49b-75abd297e257",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid sort parameter');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=invalidsort",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "invalidsort"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae2e1f84-b349-4a04-9e9e-cc2eb8a53941",
												"exec": [
													"let response = pm.response;",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba47b79c-df2a-400c-973e-83059b5998ef",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cea70cc-cd68-4e85-b9cf-101c5c7ee1f8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq('18');",
													"});    ",
													"",
													"//Test that type is providers",
													"pm.test('type is providers', function(){",
													"    pm.expect(response.data.type).eq('providers');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"providerToken\",\"supportsCustomPackages\", \"proxy\");",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId including packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "141fa0c8-8a4c-4281-ad59-998ea467e2bb",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that packages are included in relationships",
													"pm.test('relationships meta should include packages', function() {",
													"    pm.expect(response.data.relationships.packages.data).is.not.empty;",
													"});",
													"",
													"//Test that list of packages are included",
													"pm.test('include packages list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No packages included\");",
													"    } else {",
													"        //Test that packages are included",
													"        pm.test('should include packages', function() {",
													"            pm.expect(response.included[0].type).to.eq('packages');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": "packages"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bd412b6-e587-4f6c-8262-7a8c0c61fa07",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a10497b-a414-4331-b1e6-00ac22286ccd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Provider id is invalid - and');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/and",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"and"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dff00859-2172-4978-a7b2-6e0feff472e4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update proxy - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e533139-8eb5-4fdb-a388-345f32eb3e75",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that proxy value matches value passed in",
													"if (Object.keys(response.data.attributes.proxy).length !== 0) {",
													"    pm.test(\"Proxy id matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.proxy.id).eq('<n>');",
													"    });",
													"} else {",
													"    console.log(\"Proxy not updated as expected\");",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"19\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 19,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1dc11593-426b-42e9-b7ac-5a3e21b456da",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"18\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"factName\", \"prompt\", \"helpText\", \"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('hello test token');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"18\",\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"packagesSelected\": 7,\n      \"providerToken\": {\n        \"factName\": \"[[galesiteid]]\",\n        \"prompt\": \"/itweb/\",\n        \"helpText\": \"<ul>\\r\\n    <li>Enter your Gale<sup>®</sup> site ID in the space provided below. The site ID may contain a combination of alpha/numeric characters, varying in length. <blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n    <p> Example: The site ID immediately follows /itweb/ in a URL. The site ID in the following URL is <i>aa11bb22</i>. </p>\\r\\n    </blockquote></li>\\r\\n</ul>\\r\\n<blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\"><blockquote style=\\\"margin-right: 0px;\\\" dir=\\\"ltr\\\">\\r\\n<p><span style=\\\"text-decoration: underline;\\\">http://infotrac.galegroup.com/itweb/aa11bb22?db=AIM</span></p>\\r\\n</blockquote></blockquote><br />\\r\\n<ul>\\r\\n    <li>If no site ID is specified, your Gale Group links may not function properly, as Gale Group requires this information for authentication. </li>\\r\\n    <li>If you are unable to locate the site ID, please contact Gale Group. For contact information, visit: <a href=\\\"http://access.gale.com/authentication/\\\">http://access.gale.com/authentication/</a>. </li>\\r\\n</ul>\\r\\n\",\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": true\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token when value is number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd1013b0-a9f0-4c41-9945-bdd6c1371ee9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_provider\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('123');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": 123\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update proxy - invalid proxy id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a12970d6-bdc2-4288-a329-271583f61f4c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": null\n      },\n      \"packagesSelected\": 1,\n      \"proxy\": {\n        \"id\": \"invalid\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update request - invalid json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c27dddd-90ce-425d-ae90-9a18ee547873",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed.",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update provider tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f773f633-80a9-4c81-b581-36fd9101ba13",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update provider tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f5f3b077-a095-4d72-be5a-a25c98444e7c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"providers",
														"18",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET packages included to provider",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "for provider that exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bc1c14e-63d1-4ca7-b0dd-9b3d95ffc58c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\")",
													"        });",
													"        ",
													"        //Test that providerId matches what we passed in ",
													"        pm.test('providerId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.providerId).to.eq(19);",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\", \"provider\")",
													"        });",
													"    ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No packages found for this provider');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "q and count and sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9aaa53-95f9-495c-8ef6-8c4cf3ae0b8c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"            pm.expect(secondRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"            pm.expect(secondRecord.attributes.name).to.include('Search');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87ab2f42-89b0-4ee1-ae74-60ed3bb1bdd7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] and filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef3bc3b6-28b0-41be-9c5a-528612a31643",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"        ",
													"        //Test that contentType matches whats passed in query",
													"        pm.test('check contentType', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Aggregated Full Text');",
													"        });",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=aggregatedfulltext",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "aggregatedfulltext"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "129f256c-6077-47c4-9490-40d7d6fb1f52",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"//Test that particular package has a correct tag list",
													"pm.test('Particular package has a correct tag list', function(){",
													"    pm.expect(response.data[0].attributes.tags.tagList[0]).eq(pm.environment.get(\"tagName\"));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q={{custom-package-name-created-in-post-again}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "{{custom-package-name-created-in-post-again}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "list of packages with valid providerId and valid query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3d9b81-9556-4cc7-8f22-f332ce548863",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=E-Journal",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "E-Journal"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by tags ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70c40034-1be7-404d-983f-f1946cb19abe",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].id.split('-')[0]).eq(pm.environment.get(\"provider-with-tags-id\"));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data[0].type).eq('packages');",
													"});",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tagOne = pm.environment.get(\"tag-name-for-multiple-adding-a\");",
													"    var tagTwo = pm.environment.get(\"tag-name-for-multiple-adding-b\");",
													"    pm.expect(_.includes(responseTags,tagOne)).to.eq(true);",
													"    pm.expect(_.includes(responseTags,tagTwo)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(2); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6884c6ac-23be-4656-b286-658b3b1e4b88",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[tags]={{tag-name-for-multiple-adding-a}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4acf40a-162c-4c4d-96ca-8c2de4b417da",
												"exec": [
													"var packageId = pm.environment.get(\"custom-package-created-for-tags-id\");",
													"var providerId = packageId.split(\"-\")[0];",
													"pm.environment.set(\"provider-id\", providerId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8ba8aaf3-eb3e-47c2-b884-5c79938a76ab",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-id}}/packages?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered by access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "200f979a-df2a-4494-8de1-3c797476cb02",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[access-type]={{access-type-name3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId and filtered bynon existing access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edc374d8-ab25-45cd-9805-a698885800d4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]=Not Existing",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "Not Existing"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "for non-existing provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56efe280-71f7-4a4a-889e-71e8454f113e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8abbb6b-6944-4452-8083-105a61ae7e1f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(response.errors[0].title).eq(\"Search parameter cannot be empty\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "593982d9-8d54-457b-a798-25f26731dd39",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1165eff8-d769-4a21-918b-585c8c5cac76",
												"exec": [
													"//Ensure that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that response contains expected error message",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													"",
													"//Check that X-Okapi-Trace header is present",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "q and sort param invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1495e9b3-3c3d-47bb-809f-c2bec40c285c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for sort');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "filter[selected] invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12f2f464-c943-40c3-8ac6-9ca202644577",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//This should actually be a 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[selected]');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ff05c61-3c86-488f-961d-1243526c365f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[type]');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=unsupported",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "unsupported"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85f63468-c49e-47d1-b39b-79ad260d3aa3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "07665c8d-60c7-49ff-8d7b-2918f37a28ca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ce4878b-8d8f-427b-96fe-56cbc94612bd",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4ca6282e-752f-4d51-a7b0-5c9d799a03d6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3e92dacb-1d13-4752-87e0-cef49db00fed",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
							"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
							"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
							"tv4.addSchema(\"schema_providerGetDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerGetDataAttributes\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "packages",
			"item": [
				{
					"name": "GET package collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d35d8b9-1cb4-41ef-aee3-05e7846171f7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
													"            \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\");",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\")",
													"        });",
													"        ",
													"        //Test that relationships.resources has expected attributes",
													"        pm.test('expected relationships.resources are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources).to.include.all.keys(\"meta\");",
													"        });",
													"        ",
													"        //Test that relationships.resources.meta has expected attributes",
													"        pm.test('expected relationships.resources.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No packages found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daab1ceb-bea1-4964-85c6-16868c9d9d25",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"",
													"        //Test that query string is present in package name",
													"        pm.test('query string is present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    } else {",
													"        console.log('No packages found for this query search');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a550297a-d77e-4c46-9d3b-90aeefe31d39",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that query string is present in package name",
													"        pm.test('query string present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b1fbce1-bcf5-45a9-b469-e0ec77a04177",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let totalResults;",
													"if(response.meta) {",
													"    totalResults = response.meta.totalResults;",
													"}",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(7);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Ensure that total results is greater than count",
													"        pm.test('totalResults greater than count', function() {",
													"            pm.expect(len) < totalResults;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=7",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "216831a8-b5e5-433a-9e6a-44281bd30199",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "780b2565-82f9-4bd2-8857-e82bfc6e4d39",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        pm.variables.set(\"packagename-pageone\", response.data[0].attributes.name);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset two",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dffbc6c5-0032-4490-8d58-5bfe78795cbd",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        let firstRecordPageTwo = response.data[0].attributes.name;",
													"        ",
													"        //Check that page 1 and page 2 do not have same records",
													"        pm.test('page 1 and page 2 should not have same records', function() {",
													"            pm.expect(pm.variables.get(\"packagename-pageone\")).to.not.eql('firstRecordPageTwo');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid sort - by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6dc6243-98f3-49f7-8a5f-abbd6a14e552",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66594ff6-ad67-4b77-b821-d4635ba8a910",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=true&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6699ef2e-28d7-40b5-b076-e5ebd44c5162",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bd74983-f4ce-4cbc-b4e2-cf00b0edb32c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4995958d-55fa-47d8-af15-bef3ea1ffe61",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-a\"));",
													"        pm.expect(response.data.attributes.tags.tagList[1]).to.eq(pm.environment.get(\"tag-name-for-multiple-adding-b\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{tag-name-for-multiple-adding-a}},{{tag-name-for-multiple-adding-b}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-multiple-adding-a}},{{tag-name-for-multiple-adding-b}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[tags] with non existing tag",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ca7ce97-5944-4344-9e5d-dfbaa02a1d80",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3df60516-6311-47eb-aef5-b1ca8b2fef44",
												"exec": [
													"pm.variables.set(\"non-existing-tag\", \"nonExisting\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[tags]={{non-existing-tag}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{non-existing-tag}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4639aad6-6206-4b90-8a0f-a9cb83f2d4e0",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/eholdings/packages/\" + response.data[0].id,",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check name of tag\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.data.attributes.tags.tagList[0]).to.eq(pm.environment.get(\"tagName\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]={{access-type-name3}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] multiple param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7038ece5-0acd-4745-9f61-a88d08d6f03f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).to.be.above(0);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[access-type]={{access-type-name4}}&filter[tags]={{tagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name4}}"
												},
												{
													"key": "filter[tags]",
													"value": "{{tagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[access-type] with non existing access type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb61d8a1-1f2e-4172-9aac-14e19b9eea73",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/{{provider-with-tags-id}}/packages?filter[access-type]=Not Existing",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"{{provider-with-tags-id}}",
												"packages"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "Not Existing"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae205ebd-34d4-4659-9999-1c1ee7bddeb1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).eq(5);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that contentType matches passed value",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Abstract and Index');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=abstractandindex&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "abstractandindex"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e66af28-2a79-4d20-bb4c-9bf0d07ed503",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name.toLowerCase()).to.include('package');",
													"            pm.globals.set(\"custom-package-name-that-exists\", firstRecord.attributes.name);",
													"        });",
													"        ",
													"        //Test that isCustom is true",
													"        pm.test('check isCustom', function() {",
													"            pm.expect(firstRecord.attributes.isCustom).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with empty search string q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ee9258a-b74d-4460-9965-207fe5549304",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that we get the expected error message",
													"    pm.test('Ensure that errors title is as expected', function() {",
													"        pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "731dad0a-d780-4471-bd77-96785f7b7d22",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort filter param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b1089a9-9b67-4fdd-b47b-4ff5c84654fa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for sort');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14c68996-955a-477a-b22c-d038d38c7f12",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[selected]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e27eae4-622a-4d4c-944b-0e8a63b1efb5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[type]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5f545b6-b3e4-4a0e-b83a-fdf22fd77a8f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[custom]=invalid&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[custom]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06b06ced-0e21-4289-95a2-a2f76fdcc3c2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"// Per https://issues.folio.org/browse/UIEH-483 -- only true is allowed",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=false&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "false"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dd28657-f1a3-48e7-b7da-c173fcaf062a",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST package",
					"item": [
						{
							"name": "With Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package with access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da22dd53-8465-4d20-abff-9962c0b80c16",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid2\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom package');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"    //Test that accessType is assigned",
															"    pm.test('accessType is assigned', function() {",
															"        pm.expect(response.data.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fe7fadbf-fcfa-457d-bfc9-a75cf70ef2ec",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom package\",\n            \"contentType\": \"E-Journal\",\n            \"accessTypeId\": \"{{access-type-id2}}\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            }\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4ddf2224-22c5-4084-aef8-9f684c67bb07",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c7d886c-920b-44ad-9fc1-92d43c5d7f9f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "Create custom package with invalid access type id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "618c48d0-d0bc-4c98-aa35-e7e59e6d63a1",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function() {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('must match \\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[1-5][a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$\\\"');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.accessTypeId');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('9999');",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom package\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"9999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create custom package with missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "451b3c38-f4ad-4c4e-afa7-92006c7fa818",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.eq('Access type not found: id = 99999999-9999-1999-a999-999999999999');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"accessTypeId\": \"99999999-9999-1999-a999-999999999999\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Without Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create custom package valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "560d3f84-805c-4695-9467-2da554d105c9",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Check if we get a collection of packages in response",
															"if(response.data) {",
															"    if(response.data.id !== 0) {",
															"        pm.environment.set(\"custom-package-id-created-in-post-valid1\", response.data.id);",
															"    }",
															"    ",
															"    //Test that type is packages",
															"    pm.test('type is packages', function(){",
															"        pm.expect(response.data.type).eq('packages');",
															"    });",
															"    ",
															"    //Test that data.attributes has expected attributes",
															"    pm.test('expected data.attributes are present', function() {",
															"        pm.expect(response.data.attributes).to.be.an('object');",
															"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
															"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
															"    });",
															"        ",
															"    //Test that contentType matches what was passed in POST request",
															"    pm.test('content type matches value passed in', function() {",
															"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
															"    });",
															"    ",
															"    //Test that customCoverage matches what was passed in POST request",
															"    pm.test('custom coverage matches value passed in', function() {",
															"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"    });",
															"    ",
															"    //Test that isCustom is true",
															"    pm.test('isCustom is true', function() {",
															"        pm.expect(response.data.attributes.isCustom).to.be.true;",
															"    });",
															"    ",
															"    //Test that isSelected is true",
															"    pm.test('isSelected is true', function() {",
															"        pm.expect(response.data.attributes.isSelected).to.be.true;",
															"    });",
															"    ",
															"    //Test that name matches value passed in",
															"    pm.test('name matches value passed in', function() {",
															"        pm.expect(response.data.attributes.name).to.eq('custom packages api test valid');",
															"    });",
															"    ",
															"    //Test that package type is custom",
															"    pm.test('packageType is custom', function() {",
															"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
															"    });",
															"    ",
															"    //Test that allowKbToAddTitles is false",
															"    pm.test('allowKbToAddTitles is false', function() {",
															"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
															"    });",
															"    ",
															"} else {",
															"    console.log('Custom package not created');",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "with package name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fa43428-012e-4106-aead-8424acea3732",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Custom Package with the provided name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "with invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a6ce1e05-8e57-4c95-a341-bee1020961b9",
														"exec": [
															"//Check that status is 400",
															"// This test should be re-visited after https://issues.folio.org/browse/UIEH-488 is fixed.",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": 123,\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "bad data for customCoverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "13c78936-cef1-4905-a532-a8a26d9f6165",
														"exec": [
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text()).to.contains('Json content error');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"123\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": 2003-01-01,\n\t\t\t\t\"endCoverage\": 2003-12-01\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5847fb87-cad1-4021-9701-546d6f97a88c",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"   pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.name');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										},
										{
											"name": "package without content type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0fe6b4fb-a571-4914-9c14-5ebf86599ea9",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.eq('may not be null');",
															"        pm.expect(response.errors[0].type).to.eq('1');",
															"        pm.expect(response.errors[0].code).to.eq('-1');",
															"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.contentType');",
															"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"xxx\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4ed9ca05-dd14-4df0-84a0-43357fe77a4b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "060c383b-8ff2-48e3-8136-767ac06a2625",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST packages bulk",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST packages bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cda37eca-46e5-417a-9600-626aacf3e536",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test packages empty list",
													"pm.test(\"no failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk not existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46588598-68c9-4ac5-97cc-5e32e434ee20",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(1);",
													"   pm.expect(meta.failed.packages[0]).to.eql(\"111-111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"111-111\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk invalid id format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6abdba4-1dcb-4b92-8d18-50a775a7a174",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_packageBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"packageId\",\"name\", \"providerId\", \"providerName\", \"packageType\", \"contentType\", \"customCoverage\", \"isCustom\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstRecord.id).eq(pm.variables.get(\"packageId\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"packages\");",
													"});",
													"",
													"//test packages list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.packages.length).to.eql(1);",
													"   pm.expect(meta.failed.packages[0]).to.eql(\"19-9223372036854775808\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"19-9223372036854775808\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e5bf838-31b4-463a-8e20-3efc8fda0c84",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b37bce5f-fb78-453e-8fd7-fe6832533202",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST packages bulk invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "407823bc-133b-4947-a9bc-21b4d908f7a9",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"{{packageId}}\", \"413-3757-9g04662\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e31ad34-5635-4b1d-ae21-e7ef83a2c363",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"packages\": [\"\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST packages bulk invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95a26a5f-1241-4b12-9340-355f9f2b33bb",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('size must be between 0 and 20');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"packages\": [\n        \"123356-102084161\",\n        \"123356-102084162\",\n        \"123356-102084163\",\n        \"123356-102084164\",\n        \"123356-102084165\",\n        \"123356-102084166\",\n        \"123356-102084167\",\n        \"123356-102084168\",\n        \"123356-102084169\",\n        \"123356-102084111\",\n        \"123356-102084112\",\n        \"123356-102084113\",\n        \"123356-102084114\",\n        \"123356-102084115\",\n        \"123356-102084116\",\n        \"123356-102084117\",\n        \"123356-102084118\",\n        \"123356-102084119\",\n        \"123356-102084120\",\n        \"123356-102084121\",\n        \"123356-102084122\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19d3bc93-1c84-4e94-ad95-6894a8355576",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c655b98-43ea-418c-9354-04cf0f3214e8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5f5954b-b8c8-45ba-9e5c-65f25b91b2b1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data.type).eq('packages');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
													"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9ab1ce4-7f8c-40e9-a2af-46b8a236e3d6",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});",
													"",
													"//Test that provider is included in relationships",
													"pm.test('relationships meta should include provider', function() {",
													"    pm.expect(response.data.relationships.provider.data).is.not.empty;",
													"});",
													"",
													"//Test that provider is included",
													"pm.test('include provider', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No provider included\");",
													"    } else {",
													"        //Test that provider is included",
													"        pm.test('should include provider', function() {",
													"            pm.expect(response.included[0].type).to.eq('providers');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67c95d9a-c52d-4ec6-bd52-db90b9e3f2c1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            pm.expect(response.included[0].type).to.eq('resources');",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId including resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a755b19-61d5-4d8f-96f6-7901d1ca258b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(response.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let firstRecord = response.included[0];",
													"            pm.expect(firstRecord.type).to.eq('resources');",
													"            pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ce39f71-c6bd-49b0-8765-d90ec974b20d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae3433c9-0cd3-47d3-8e83-95719bbf2d95",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and empty included resources tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8d26c6c-0cb1-4f50-b991-6b800e83a4a9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that record has empty tag list",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(0); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "379eeb5c-9df1-43eb-ba13-ec30811b1cf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources filtered by tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0823a3c6-b3fd-4727-b0e6-0f429242feb9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that tags matches value passed in",
													"pm.test('name matches value passed in', function() {",
													"    var responseTags = response.data[0].attributes.tags.tagList;",
													"    var tag = pm.environment.get(\"tag-name-for-resource\");",
													"    pm.expect(_.includes(responseTags,tag)).to.eq(true);",
													"});",
													"",
													"//Test that all package tags included in response",
													"pm.test('package tags included in responce', function() {",
													"    pm.expect(response.data[0].attributes.tags.tagList.length).to.eql(1); ",
													"});",
													"",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(1);",
													"});",
													"",
													"pm.test('One record in response array', function() {",
													"    pm.expect(response.data.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06c8337d-a8e3-4976-863f-5931e328aee7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]={{tag-name-for-resource}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{tag-name-for-resource}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and including resources non existing tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3fa2293f-2006-47b0-b269-b3e723ac0b79",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "37b671c6-15c8-4810-8597-c54ef5ac0aef",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that total records value as expected",
													"pm.test('total records as expected', function() {",
													"    pm.expect(response.meta.totalResults).to.eql(0);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=non-existing-tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "non-existing-tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and included resources empty tags",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3dbcf03c-5885-44d6-9718-d6a4ef90dc98",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "431cc9b5-da6b-458a-8ab9-a142461c82d3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" ",
													"    + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data[0].attributes.packageId).eq(pm.variables.get('custom-packageid-from-setup'));",
													"});    ",
													"",
													"//Test that type is resource",
													"pm.test('type is resource', function(){",
													"    pm.expect(response.data[0].type).eq('resources');",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[tags]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb18ace5-1df6-40e8-8399-13aab0669e38",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7138d180-b429-4f8f-93e2-8ed0f482dabf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "006a6fe0-504d-4c9e-909b-e26f4e70be12",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0d0dc24-a9ad-4449-b7da-c9aa454ab860",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId with providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6571370d-9f20-433c-a2d8-4f1a92aac580",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "baa5d408-072b-4c98-92fd-8dc33cb6badb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "75b88006-29c8-4990-bc13-3d3c4a876a87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT package by packageId",
					"item": [
						{
							"name": "Custom Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fd82ea6-aee7-440c-818b-9207ed7d5dca",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5bcb8f82-dba7-4a39-8fa4-95317a2f9922",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															"",
															"//Test that access type assigned",
															"pm.test('access type should be assigned', function() {",
															"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
															"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-package-id-created-in-post}}\",\n        \"type\": \"packages\",\n        \"attributes\": {\n            \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n            \"contentType\": \"Print\",\n            \"customCoverage\": {\n                \"beginCoverage\": \"2003-01-01\",\n                \"endCoverage\": \"2003-12-01\"\n            },\n            \"isCustom\": true,\n            \"isSelected\": true,\n            \"visibilityData\": {\n                \"isHidden\": true\n            },\n            \"allowKbToAddTitles\": false,\n            \"proxy\": {\n                \"id\": \"<n>\",\n                \"inherited\": false\n            },\n            \"accessTypeId\": \"{{access-type-id2}}\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "visibility data and coverage update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f3025946-0f27-4947-8d75-c06f414fdb9f",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.environment.get('custom-package-id-created-in-post'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"//This should be re-visited after https://issues.folio.org/browse/UIEH-490 is fixed.",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.false;",
															"});",
															"",
															"//Test that custom coverage matches provided in request",
															"pm.test('customCoverage matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2004-01-01');",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2004-12-01');",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2004-01-01\",\n        \"endCoverage\": \"2004-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom package without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "46f0addc-efe2-4ff7-9044-116c966bed8a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "97194128-5356-48a0-9293-4f2af157bc43",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"some test custom package\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with name that already exists",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "04864e77-7ab6-41a9-b6b4-961f554ab474",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package name already exists');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f18b0937-078e-4f97-8121-1c8a354cc999",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"{{custom-package-name-that-exists}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package with isSelected false should delete it",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f45ab82c-b042-4e4d-b9cf-7f7eab0e0fce",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 404",
															"pm.test(\"Status is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Package not found');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"random test package\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": false,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-again}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post-again}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a1fd19b0-5866-4787-967d-ff5c7812391c",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"hello world\",\n      \"contentType\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isSelected\": true,\n      \"isCustom\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type when it is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "97e42652-cbfe-4704-8090-9faf54aa93ad",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      },\n      \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom package access type invalid id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7fcf4c5f-db53-44b4-838b-891ba45793ec",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      },\n      \"accessTypeId\": \"invalid-id\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Package",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update managed package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "19b38e0f-8693-4537-8200-45dd344196ee",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eb6b29c6-ece9-48a4-a07e-5608470c3db3",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"//Test that id matches what was provided in query",
															"pm.test('id matches as provided in query', function(){",
															"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
															"});    ",
															"",
															"//Test that type is packages",
															"pm.test('type is packages', function(){",
															"    pm.expect(response.data.type).eq('packages');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
															"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\",\"proxy\");",
															"});",
															"",
															"",
															"//Test that isSelected matches as provided in request",
															"pm.test('isSelected matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.isSelected).to.be.true;",
															"});",
															"",
															"//Test that visibilityData matches as provided in request",
															"pm.test('visibilityData matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.visibilityData.isHidden).to.be.true;",
															"});",
															"",
															"//Test that allowKbToAddTitles matches as provided in request",
															"pm.test('allowKbToAddTitles matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.allowKbToAddTitles).to.be.true;",
															"});",
															"",
															"//Test that resources are not included in relationships",
															"pm.test('relationships meta should not include resources', function() {",
															"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
															"});",
															"",
															"//Test that access type assigned",
															"pm.test('access type should be assigned', function() {",
															"    pm.expect(response.data.relationships.accessType.meta.included).to.be.true;",
															"    pm.expect(response.data.relationships.accessType.data.id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"    pm.expect(response.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"{{access-type-id2}}\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=false",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f25435dd-e767-4311-aef2-ef69fe8c7af7",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were not selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.not.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-01-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-02-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-01-12\",\n        \"endCoverage\": \"2018-02-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : false,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update managed package with isFullPackage=true",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e9a9c88f-99e1-4b1f-9769-4d8f493c3538",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"titles in package were all selected\", function() {",
															"    pm.expect(response.data.attributes.selectedCount).to.equal(response.data.attributes.titleCount);",
															"});",
															"",
															"//Test that data.attributes has expected attributes",
															"pm.test(\"package was updated\", function() {",
															"    pm.expect(response.data.attributes.customCoverage.beginCoverage).to.equal(\"2018-03-12\");",
															"    pm.expect(response.data.attributes.customCoverage.endCoverage).to.equal(\"2018-04-13\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-03-12\",\n        \"endCoverage\": \"2018-04-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"isFullPackage\" : true,\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{partially-selected-package-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "invalid access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "779b7a05-c4f5-46b7-90ad-669ffadc3870",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"invalid-id\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid dates for coverage",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b065ef4f-7d10-41a3-a3c9-fa62221c0fe4",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid beginCoverage');",
															"        pm.expect(response.errors[0].detail).to.eq('beginCoverage has invalid format. Should be YYYY-MM-DD');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"13-08-2018\",\n        \"endCoverage\": \"13-09-2018\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isSelected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "66167b73-c9a4-4137-9ae5-4a5bb71d7771",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": \"invalid\",\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-12\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid isHidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "147e5347-a754-4f48-8d2a-3eed8c34cea1",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": \"invalid\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid allowKbToAddTitles",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35367fbc-2aa2-493f-8896-e5a3c55d2feb",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isCustom\": false,\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"allowKbToAddTitles\": \"invalid\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-13\",\n        \"endCoverage\": \"2018-09-13\"\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "invalid json in request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c40d048a-ea85-4dda-827b-75a87b793d7d",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.eq(true);",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"visibilityData\": {\n        \"isHidden\": true\n      },\n      \"allowKbToAddTitles\": true,\n      \"customCoverage\": {\n        \"beginCoverage\": 13-08-2018,\n        \"endCoverage\": 13-09-2018\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "missing access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "901ae2f1-6278-4109-8761-d90db7f64b6f",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "169d328d-9c6a-4c1b-b1cd-ad50c5fbaa37",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.contains('Package is not updatable');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"accessTypeId\": \"{{access-type-id2}}\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": false,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{packageId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update package tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e492f5c-eee1-43b6-87e7-7f97274fff0a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom-packages-' + pm.globals.get(\"custom-package-one-uuid\"));",
															"});",
															"",
															"//Test that contentType matches as provided in request",
															"pm.test('contentType matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.contentType).eq('Print');",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update package tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0d7e58a1-3b55-4869-9fa6-c20a159b74b4",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"contentType\": \"Print\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										},
										{
											"name": "update package tags without contentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ebb1e54a-2240-44a1-a10e-d5d6c7d27ae1",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid contentType');",
															"        pm.expect(response.errors[0].detail).to.eq('contentType must not be null');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"contentType\": null,\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"packages",
														"{{custom-package-id-created-in-post}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Delete custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "630d2680-1317-4102-a724-e2b404fc6bcc",
												"exec": [
													"//Check that status is 204",
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-package-id-created-in-post-valid2}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid providerId in packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a92c02e9-e87d-4460-97f0-b4f1b052a77c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that appropriate error message is being returned",
													"pm.test('Ensure that appropriate error message is returned', function(){",
													"    pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "226f69f0-7caf-427b-9332-fd80a41c4d80",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"/* Tests below should be re-visited after https://issues.folio.org/browse/UIEH-427 is fixed.*/",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cb3c55c-9dac-43ff-b41e-51dbbe210de9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package cannot be deleted');",
													"        pm.expect(response.errors[0].detail).to.eq('Invalid package');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources included to package",
					"item": [
						{
							"name": "valid filter[access-type] param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ddfa0c4-f294-40fb-aa52-96ce3e6ab457",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Check if we get a collection of packages in response",
											"if(response.data) {",
											"    let len = response.data.length;",
											"    if(len > 0){",
											"        //Test that count is equal to number of records returned in response",
											"        pm.test('count equals number of records in response', function() {",
											"            pm.expect(len).to.be.above(0);",
											"        });",
											"        //Get the first record",
											"        let firstRecord = response.data[0];",
											"        ",
											"        //Test that type is packages",
											"        pm.test('type is resources', function(){",
											"            pm.expect(firstRecord.type).eq('resources');",
											"        });",
											"        ",
											"        //Test that isSelected is true",
											"        pm.test('check isSelected', function() {",
											"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
											"        });",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources?filter[access-type]={{access-type-name2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}",
										"resources"
									],
									"query": [
										{
											"key": "filter[access-type]",
											"value": "{{access-type-name2}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "adc2818a-ef99-44aa-8967-a55a57c29852",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "33ed352c-2759-4fd1-bece-1d0189f40861",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
							"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
							"tv4.addSchema(\"schema_packageTagsItem.json\", JSON.parse(pm.variables.get(\"schema_packageTagsItem\")));",
							"tv4.addSchema(\"schema_packageTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
							"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));",
							"tv4.addSchema(\"schema_packageBulkFetchCollection.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchCollection\")));",
							"tv4.addSchema(\"schema_packageBulkFetchCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchCollectionItem\")));",
							"tv4.addSchema(\"schema_packageBulkFetchDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageBulkFetchDataAttributes\")));",
							"tv4.addSchema(\"schema_packageFailedInformation.json\", JSON.parse(pm.variables.get(\"schema_packageFailedInformation\")));",
							"tv4.addSchema(\"schema_packageFailedIds.json\", JSON.parse(pm.variables.get(\"schema_packageFailedIds\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "resources",
			"item": [
				{
					"name": "POST resource",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources POST add managed title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cba47e22-283e-4411-bb5f-13cfab04987d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"managed-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39aa852b-e3af-4545-911e-0610500baf05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{managed-titleid}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to custom package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8e118c6-4ebb-4d6d-8d63-7d2472d3be17",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"custom-titleid-for-resource\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"pm.test(\"url is as expected\", function () {",
													"    pm.expect(firstAttributes.url).eq(\"http://test\");",
													"});",
													"// Store custom resource id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-resourceid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3fd7d2d6-1cc9-4327-a5bb-fbc8bf4923dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources POST add managed title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "414aecb0-f42c-4b0e-ba1f-857a80a2228e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51891531-d95a-4a30-8632-637baade1441",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{managed-titleid}}\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST add custom title to managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e5ac901-f812-4d1d-aca9-e0a09f616789",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid PackageId\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Packageid Cannot associate Title with a managed Package\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "86c333f1-a569-419c-b2d6-571f13c3f068",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{managed-packageid}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9923eb3e-692d-4b1b-98a5-7b6b19f2f710",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// confirm error returns invalid url",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Url\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Url has invalid format\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "915611e7-0b00-4345-a975-b2704ef780fc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"not a url\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3407e2ef-0878-44e0-990e-8d6aecaca611",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(jsonData.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(jsonData.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "375c163d-82e6-42e7-806f-d2bc3d0117ba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"1\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid titleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e93d17f1-1097-44b6-86bc-0f9867a49da3",
												"exec": [
													"",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81e3eb79-def5-4fcd-9845-50af3e9935c7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"1\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources POST invalid content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "631d78d9-cd4b-4a77-b774-885fb8d00866",
												"exec": [
													" pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected error message is returned\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.be.equal('Content-type header must be [\"application/vnd.api+json\"] but it is \"application/json\"');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26c758a2-5251-461a-a23e-969153bd2411",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST resources bulk",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "POST resources bulk",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7391f8d-2400-4a89-8965-fb1de0059a7c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources empty list",
													"pm.test(\"no failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48531dd5-49e0-4170-800e-32c1f6a0bd3b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e89b43e-b00b-490c-922f-b8d5f05dd67a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "POST resources bulk invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21a37fce-4029-42e2-85c8-23ac93e5d8d3",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"413-3757-9g04662\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk not existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84b84ecc-17f7-49d8-a02a-0cd1bb972baa",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(1);",
													"   pm.expect(meta.failed.resources[0]).to.eql(\"111-111-111\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"111-111-111\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk invalid id format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adb19fb6-9a44-4868-a0a9-89aa416a0599",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resourceBulkFetchCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected top-level keys are present in a record', function() {",
													"    pm.expect(jsonData).to.be.an('object');",
													"    pm.expect(jsonData).to.include.all.keys(\"included\", \"meta\", \"jsonapi\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.included[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(",
													"        \"titleId\",\"name\", \"publicationType\", \"packageId\", \"providerId\", \"providerName\", \"managedCoverages\", \"customCoverages\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test(\"title id is as expected\", function () {",
													"    pm.expect(firstAttributes.titleId).eq(Number(pm.variables.get(\"managed-titleid\")));",
													"});",
													"",
													"pm.test(\"package id is as expected\", function () {",
													"    pm.expect(firstAttributes.packageId).eq(pm.variables.get(\"custom-packageid-for-resource\"));",
													"});",
													"",
													"let meta = jsonData.meta;",
													"",
													"pm.test(\"metadata is as expected\", function () {",
													"   pm.expect(meta).to.be.an('object');",
													"   pm.expect(meta).to.include.all.keys(\"failed\");",
													"   pm.expect(meta.failed).to.be.an('object');",
													"   pm.expect(meta.failed).to.include.all.keys(\"resources\");",
													"});",
													"",
													"//test resources list contains one element",
													"pm.test(\"check failed resource ids\", function () {",
													"   pm.expect(meta.failed.resources.length).to.eql(1);",
													"   pm.expect(meta.failed.resources[0]).to.eql(\"19-9223372036854775808-904661\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"19-9223372036854775808-904661\"]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "198f581b-d6ca-4970-83f3-f572e0051d6f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('elements in list must match pattern');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST resources bulk invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af6ee1f8-5cec-47df-ad6c-f5f5b180bae3",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('Ensure that errors array is not empty', function() {",
													"  pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message\",",
													"pm.test('Ensure that errors has message as expected', function() {",
													"    pm.expect(jsonData.errors[0].message).eq('size must be between 0 and 20');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"resources\": [\"{{managed-resourceid}}\", \"123356-102084166-1145851\", \"123356-102084166-1145852\", \"123356-102084166-1145853\", \"123356-102084166-1145854\",\n\t\"123356-102084166-1145856\", \"123356-102084166-1145857\", \"123356-102084166-1145858\", \"123356-102084166-1145859\", \"123356-102084166-1145860\",\n\t\"123356-102084166-1145861\", \"123356-102084166-1145862\", \"123356-102084166-1145863\", \"123356-102084166-1145864\", \"123356-102084166-1145865\",\n\t\"123356-102084166-1145866\", \"123356-102084166-1145867\", \"123356-102084166-1145868\", \"123356-102084166-1145869\", \"123356-102084166-1145870\",\n\t\"123356-102084166-1145871\"\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/bulk/fetch",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"bulk",
												"fetch"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d6c7961-35bc-4410-9316-7b51edeadebb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c6d4f6e-4c12-473d-a73d-81e978afc047",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources GET specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0560ae21-760b-43f3-8352-644254f56aae",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"managed-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8960a14-9d7f-4286-9f3a-a4a8bed8e2b9",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68608612-927b-49b5-af11-a3f18b0ef8a4",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"});",
													"",
													"pm.test(\"userDefinedFields are present\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"    pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"    pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"    pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"    pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19ef4dc3-37a4-4d0d-80df-c0e02923b859",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"providers\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.providerId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1264d396-f678-4811-818e-5d7c2ecf7471",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"packages\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.packageId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b9637e-bb4f-4798-8703-d5211df90e3b",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 1 record and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(1);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"included type is as expected\", function () {",
													"    pm.expect(includedItems[0].type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"included id is as expected\", function () {",
													"    pm.expect(includedItems[0].id).eq(firstAttributes.titleId.toString());",
													"});",
													"         ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and include provider,package,title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d148290a-40a5-4594-bad6-2708d300bd6c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"    ",
													"//Get the provider relationship",
													"let providerRelationship = firstRecord.relationships.provider.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in provider relationship', function() {",
													"    pm.expect(providerRelationship).to.be.an('object');",
													"    pm.expect(providerRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(providerRelationship.id).eq(firstAttributes.providerId.toString());",
													"});",
													"",
													"//Get the package relationship",
													"let packageRelationship = firstRecord.relationships.package.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in package relationship', function() {",
													"    pm.expect(packageRelationship).to.be.an('object');",
													"    pm.expect(packageRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(packageRelationship.id).eq(firstAttributes.packageId.toString());",
													"});",
													"",
													"//Get the title relationship",
													"let titleRelationship = firstRecord.relationships.title.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in title relationship', function() {",
													"    pm.expect(titleRelationship).to.be.an('object');",
													"    pm.expect(titleRelationship).to.include.all.keys(\"id\", \"type\");",
													"    pm.expect(titleRelationship.id).eq(firstAttributes.titleId.toString());",
													"});",
													"",
													" //Get the included",
													"let includedItems = jsonData.included;",
													"",
													"//Test that included is an array of 3 records and has the expected keys",
													"pm.test('expected keys are present in included array record', function() {",
													"    pm.expect(includedItems).to.be.an('array');",
													"    pm.expect(includedItems.length).to.eql(3);",
													"    pm.expect(includedItems[0]).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"     ",
													"var includedTitles = includedItems.filter(",
													"        function(titles) {",
													"            if (titles.type.toLowerCase().includes(\"titles\")) {",
													"               return titles;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included title is as expected', function() {",
													"    pm.expect(includedTitles.length).eq(1);",
													"    pm.expect(includedTitles[0].id).eq(firstAttributes.titleId.toString());",
													"});     ",
													"",
													"var includedPackages = includedItems.filter(",
													"        function(packages) {",
													"            if (packages.type.toLowerCase().includes(\"packages\")) {",
													"               return packages;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included package is as expected', function() {",
													"    pm.expect(includedPackages.length).eq(1);",
													"    pm.expect(includedPackages[0].id).eq(firstAttributes.packageId.toString());",
													"});          ",
													"",
													"var includedProvider = includedItems.filter(",
													"        function(providers) {",
													"            if (providers.type.toLowerCase().includes(\"providers\")) {",
													"               return providers;",
													"            }",
													"        }",
													"    );",
													"    ",
													"pm.test('Included provider is as expected', function() {",
													"    pm.expect(includedProvider.length).eq(1);",
													"    pm.expect(includedProvider[0].id).eq(firstAttributes.providerId.toString());",
													"});           ",
													"        "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=provider,package,title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "provider,package,title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e30a150-c0e4-4dbf-94b7-d4ebeee7038c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"custom-resourceid-from-setup\"));",
													"});",
													"",
													"pm.test('resource tags expected', function() {",
													"    pm.expect(firstAttributes.tags.tagList).to.be.an('array').that.is.not.empty;",
													"});",
													"  ",
													"pm.test(\"resource tags size as expected\", function () {",
													"   pm.expect(Object.keys(firstAttributes.tags.tagList).length).to.eql(1);",
													"});",
													"",
													"pm.test(\"tags content as expected\", function () {",
													"   pm.expect(firstAttributes.tags.tagList[0]).to.eql(\"tag one\");",
													"});  ",
													"  "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources GET invalid resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16699db8-7a8c-4ef8-8321-0c5e3a67bacb",
												"exec": [
													"// status should be 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Errors array should return a more relevant response",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid - 1\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources GET specific resource and invalid include",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0b757d0-a65f-4a60-83fa-b18d90115318",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"resources\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\");",
													"});",
													"",
													"//Test that relationships has expected attributes and invalid include is ignored",
													"pm.test('expected relationships are present', function() {",
													"    pm.expect(firstRecord.relationships).to.include.all.keys(\"provider\", \"title\", \"package\");",
													" });",
													"",
													"pm.test('relationships meta should not include provider', function() {",
													"    pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include package', function() {",
													"    pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"});",
													"pm.test('relationships meta should not include title', function() {",
													"    pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}?include=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											],
											"query": [
												{
													"key": "include",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2edd1ca-23cc-4c70-8aaf-68c7d2705a27",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac0d53c4-e49e-4d07-99b7-50cfd79b0950",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT resource by resourceId",
					"item": [
						{
							"name": "Custom Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update custom resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bb11e98e-9dfe-4c4a-810b-8c2fa259507d",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custom embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "877dca2f-67ed-4c21-aca5-18682230cc2d",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"id\": \"{{custom-resourceid}}\",\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"packageId\": \"{{custom-packageid-for-resource}}\",\n      \"titleId\": \"{{custom-titleid-for-resource}}\",\n      \"url\": \"http://test\",\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": false,\n      \"publicationType\": \"Book\",\n      \"providerId\": \"{{custom-providerid}}\",\n      \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n      \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n      \"isSelected\": true,\n      \"managedCoverages\": [],\n      \"managedEmbargoPeriod\": {\n        \"embargoValue\": 0\n      },\n      \"visibilityData\": {\n        \"isHidden\": false\n      },\n      \"customEmbargoPeriod\": {\n        \"embargoUnit\": \"Months\",\n        \"embargoValue\": 5\n      },\n      \"customCoverages\": [\n        {\n          \"beginCoverage\": \"2001-01-01\",\n          \"endCoverage\": \"2004-02-01\"\n        }\n      ],\n      \"coverageStatement\": \"Test Coverage Statement\",\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n      \"publisherName\": \"test publisher\",\n      \"edition\": \"test edition\",\n      \"description\": \"test description\",\n      \"subjects\": [],\n      \"contributors\": [\n        {\n          \"type\": \"author\",\n          \"contributor\": \"smith, john\"\n        },\n        {\n          \"type\": \"illustrator\",\n          \"contributor\": \"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n          \"id\": \"11-2222-3333\",\n          \"type\": \"ISSN\",\n          \"subtype\": \"Online\"\n        }\n      ],\n      \"isTitleCustom\": true,\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource - custom only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fe85a69-6205-4974-bcd6-abd2effc8426",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isTitleCustom\", \"titleId\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\",\"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"url is as expected\", function () {",
															"   pm.expect(firstAttributes.url).to.eql(\"https://test\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "737a0272-cd0e-4ee2-a54a-efcd7b911c67",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": true,\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update custom resource invalid url",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "32c7828e-02f6-4a99-9081-27fb32614c7d",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"   pm.expect(jsonData.errors.length).to.eql(1);",
															"   pm.expect(jsonData.errors[0].title).to.equal(\"Invalid url\");",
															"   pm.expect(jsonData.errors[0].detail).to.equal(\"url has invalid format. Should start with https:// or http://\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a6d379be-a86d-4dd2-8cd7-a74ba4f7e15c",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isPeerReviewed\": false,\n            \"name\": \"custom title-b72f107f-ceff-49e1-8a3f-e7a9b8dffa13\",\n            \"publicationType\": \"Book\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"url\": \"not a url\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid proxy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf4f4bcb-1dca-409e-9dad-d5c7befebb8d",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Proxy ID\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "765386e7-8072-4b1f-89df-ec74b481e292",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"invalid\"\n            },\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid coverageStatement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b206d3d0-46a7-49c0-ad1e-caf67cdd629b",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9f58e016-6efb-4dea-93e4-2471573f7fb8",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"{{long-coverage}}\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid customCoverages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f87b316-276c-437b-9876-130519b4b7a7",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"BeginCoverage should be smaller than EndCoverage.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9376a56e-d465-47c3-8c1d-93e01edaf2c6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2004-01-01\",\n                    \"endCoverage\": \"2001-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoValue",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed766951-00d7-4177-a4bf-870347f7da59",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f20d5050-a8ca-4860-920d-d017a3453008",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Days\",\n                \"embargoValue\": -1\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid embargoUnit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f627d15b-ab7c-4422-b20d-a6dd787aa5c4",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "858ad5e1-fc5b-4d3d-a2fd-d8554301c9ea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"minutes\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid visibilityData",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06696be8-7fdd-4f9d-8512-973844294858",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2248b8ed-8e13-4abc-9b80-59425b19420d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": \"invalid\"\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ]\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update custom resource Invalid custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d223a14-0dc7-4074-9cf0-f6edc1b891b1",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bca81ed0-c53a-4666-a1dd-ddb9a75ad2c5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{custom-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"titleId\": \"{{custom-titleid-for-resource}}\",\n            \"url\": \"http://test\",\n            \"name\": \"custom title-{{custom-resource-uuid}}\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"smith, john\"\n                },\n                {\n                    \"type\": \"illustrator\",\n                    \"contributor\": \"smith, ralph\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"11-2222-3333\",\n                    \"type\": \"ISSN\",\n                    \"subtype\": \"Online\"\n                }\n            ],\n            \"userDefinedField3\": \"*****************************************************************************************************\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Managed Resource",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "/resources PUT update managed resource",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b2be0f9b-f881-4b7f-bd6d-bb6a17f5cea2",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"coverageStatement\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"custome embargo period is as expected\", function () {",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoUnit).to.eql(\"Months\");",
															"   pm.expect(firstAttributes.customEmbargoPeriod.embargoValue).to.eql(5);",
															"});",
															"",
															"pm.test(\"custom coverages is as expected\", function () {",
															"   pm.expect(firstAttributes.customCoverages.length).to.eql(1);",
															"   pm.expect(firstAttributes.customCoverages[0].beginCoverage).to.eql(\"2001-01-01\");",
															"   pm.expect(firstAttributes.customCoverages[0].endCoverage).to.eql(\"2004-02-01\");",
															"});",
															"",
															"pm.test(\"coverage statement is as expected\", function () {",
															"   pm.expect(firstAttributes.coverageStatement).to.eql(\"Test Coverage Statement\");",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "198fe7d3-f6be-4719-aecd-e6a26f0f0c32",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"id\": \"{{managed-resourceid}}\",\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"packageId\": \"{{custom-packageid-for-resource}}\",\n            \"packageName\": \"custom-package-{{custom-package-for-resource-uuid}}\",\n            \"titleId\": \"{{managed-titleid}}\",\n            \"name\": \"ABC of Diabetes (ABC Series)\",\n            \"providerId\": \"{{custom-providerid}}\",\n            \"providerName\": \"API DEV GOVERNMENT CUSTOMER\",\n            \"isPeerReviewed\": false,\n            \"publicationType\": \"Book\",\n            \"isSelected\": true,\n            \"managedCoverages\": [],\n            \"managedEmbargoPeriod\": {\n                \"embargoValue\": 0\n            },\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"customEmbargoPeriod\": {\n                \"embargoUnit\": \"Months\",\n                \"embargoValue\": 5\n            },\n            \"customCoverages\": [\n                {\n                    \"beginCoverage\": \"2001-01-01\",\n                    \"endCoverage\": \"2004-02-01\"\n                }\n            ],\n            \"coverageStatement\": \"Test Coverage Statement\",\n            \"proxy\": {\n                \"id\": \"<n>\"\n            },\n            \"publisherName\": \"Wiley-Blackwell\",\n            \"edition\": \"\",\n            \"subjects\": [\n                {\n                    \"subject\": \"MEDICAL / Endocrinology & Metabolism\",\n                    \"type\": \"BISAC\"\n                }\n            ],\n            \"contributors\": [\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Kumar, Sudhesh\"\n                },\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Watkins, Peter J.\"\n                },\n                {\n                    \"type\": \"author\",\n                    \"contributor\": \"Holt, Tim A.\"\n                }\n            ],\n            \"identifiers\": [\n                {\n                    \"id\": \"978-1-4051-7784-9\",\n                    \"subtype\": \"Print\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-118-68486-3\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-282-46121-5\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                },\n                {\n                    \"id\": \"978-1-4443-1697-1\",\n                    \"subtype\": \"Online\",\n                    \"type\": \"ISBN\"\n                }\n            ],\n            \"isTitleCustom\": false,\n            \"description\": \"\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in custom package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "31b3d04d-dafe-4273-b5ba-4afafc516d5f",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eq(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6b0b14f0-ef8a-43c7-be45-66410628625a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"Update a managed title name\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource in managed package - custom resource only fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d15ca5c-a975-4f46-b8b3-15a8ff3a4bb9",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"//description should be undefined because user is not allowed to update description for a managed resource",
															"pm.test(\"description should be undefined\", function () {",
															"   pm.expect(firstAttributes.description).to.eql(undefined);",
															"});",
															"",
															"//edition should be undefined because user is not allowed to update edition for a managed resource",
															"pm.test(\"edition should be undefined\", function () {",
															"   pm.expect(firstAttributes.edition).to.eql(undefined);",
															"});",
															"",
															"//isPeerReviewed should be false because user is not allowed to update isPeerReviewed for a managed resource",
															"pm.test(\"isPeerReviewed should be null\", function () {",
															"   pm.expect(firstAttributes.isPeerReviewed).to.be.false;",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1c9be3ab-b222-43d9-ad1a-adbbe48fec5c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"name\": \"Update a managed title name 2\",\n            \"isPeerReviewed\": true,\n            \"publicationType\": \"Newspaper\",\n            \"publisherName\": \"Test Publisher\",\n            \"edition\": \"5\",\n            \"description\": \"Test Description\",\n            \"url\": \"https://test\",\n            \"isSelected\": true,\n            \"isTitleCustom\": false,\n            \"visibilityData\": {\n                \"isHidden\": false\n            },\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-title-package-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "/resources PUT update managed resource invalid JSON",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "17542c8a-77b4-46c7-939b-2614caae97d2",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "876f2f52-6c74-4a2c-ad60-25a9074a9bda",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": false,\n      \"visibilityData\": null,\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n      \"beginCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource coverageStatement if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "457516a5-e156-41cc-80d2-c361595d3860",
														"exec": [
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entry\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute CoverageStatement is longer than 200 characters.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c9f40b5d-c264-48e1-8bae-4350f913f8b4",
														"exec": [
															"let toRepeat = \"0\";",
															"pm.variables.set(\"long-coverage\", toRepeat.repeat(201));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\":null,\n      \"customCoverages\" : [],\n      \"coverageStatement\": \"{{long-coverage}}\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource embargo if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2001d13d-cd7d-42e7-8c73-bb4c502d9b94",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute EmbargoValue is less than 0.\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9d679c8f-92d6-4bb2-9f81-a72ba519378a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": {\n      \"embargoUnit\" : \"Weeks\",\n      \"embargoValue\" : -1\n      },\n      \"customCoverages\" : []\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom coverage if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d47edb07-e80c-4f28-9b6b-69e2253871c2",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.have.jsonBody();",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//verify headers",
															"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Errors array contains 1 entries\", function () {",
															"    pm.expect(jsonData.errors.length).to.eql(1);",
															"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid beginCoverage\");",
															"    pm.expect(jsonData.errors[0].detail).to.equal(\"beginCoverage has invalid format. Should be YYYY-MM-DD\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2b77dc22-33d8-4f97-bafe-cbcc108195e6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": null,\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : [\n      {\n        \"beginCoverage\" : \"200\",\n    \t\"endCoverage\" : \"2001-01-02\"\n      }\n      ]\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource visibility if not selected",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b8068ff9-d061-40d8-a800-32d82934425d",
														"exec": [
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
															"    pm.response.to.have.header(\"Transfer-Encoding\");",
															"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e80393ed-0102-4a82-8f54-2319f1498e79",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n      \"visibilityData\": {\n    \t\"isHidden\" : \"invalid\"\n      },\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/resources PUT update managed resource custom label",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c132d6e4-2fb0-44a0-bcd8-f3510f7f1bce",
														"exec": [
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"pm.test(\"Response must have body with error message\", function () {",
															"    pm.expect(pm.response.json().errors[0].title).to.equal('Invalid userDefinedField3');",
															"    pm.expect(pm.response.json().errors[0].detail).to.equal('userDefinedField3 is too long (maximum is 100 characters)');",
															"});",
															"",
															"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
															"    pm.response.to.have.header(\"X-Okapi-Trace\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b597d0a8-a513-4e18-98fb-2e94bae7eb2c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n  \"data\": {\n    \"type\": \"resources\",\n    \"attributes\": {\n      \"isSelected\": true,\n      \"isTitleCustom\": false,\n\t  \"userDefinedField3\" : \"*****************************************************************************************************\",\n      \"customEmbargoPeriod\": null,\n      \"customCoverages\" : []\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{managed-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "adfc52bb-7514-4d6d-ba71-72924e295997",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "201b0ed0-cf51-4bb4-96c4-34face143a5a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update resource tags",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9c9a4b18-19c0-4f19-95ee-45bb7d26432a",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
															"});",
															"",
															"//Test that type is tags",
															"pm.test('type is tags', function(){",
															"    pm.expect(response.data.type).eq('tags');",
															"});",
															"    ",
															"//Test that data.attributes has expected attributes",
															"pm.test('expected data.attributes are present', function() {",
															"    pm.expect(response.data.attributes).to.be.an('object');",
															"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
															"});",
															"",
															"//Test that name matches name provided in request",
															"pm.test('name matches as provided in request', function() {",
															"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
															"});",
															"",
															"//Check that tagList contains correct tags",
															"pm.test('Existing tags', function(){",
															"    pm.expect(response.data.attributes.tags.tagList.size) === 2;",
															"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
															"    pm.expect(response.data.attributes.tags.tagList[1]).eq(\"another-tag\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update resource tags without name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bd5d450b-6b56-467e-9aea-a8a5e136b6e8",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].title).to.eq('Invalid name');",
															"        pm.expect(response.errors[0].detail).to.eq('name must not be empty');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"foo-tag\",\n    \t\t\"another-tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}",
														"tags"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "delete tags for particular record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a85de4ed-fa1a-428e-bee9-472b57e9b8e8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
													"});",
													"",
													"//Test that type is tags",
													"pm.test('type is tags', function(){",
													"    pm.expect(response.data.type).eq('tags');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
													"});",
													"",
													"//Test that name matches name provided in request",
													"pm.test('name matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.name).to.eq('custom title-' + pm.globals.get(\"custom-resource-uuid\"));",
													"});",
													"",
													"//Check that tagList contains correct tags",
													"pm.test('Existing tags', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) === 1;",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"test tag\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"tags\": {\n    \t\t\"tagList\": [\n    \t\t\"test tag\"\n\t\t\t]\n\t\t}\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid-from-setup}}",
												"tags"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Access Type",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "update custom resource with access type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ea40dec0-30f7-4a25-ac5e-056c38b36d74",
														"exec": [
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_resource\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Get the first record",
															"let firstRecord = jsonData.data;",
															"    ",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in a record', function() {",
															"    pm.expect(firstRecord).to.be.an('object');",
															"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
															"});",
															"",
															"// Test that attributes have the expected keys",
															"let firstAttributes = firstRecord.attributes;",
															"pm.test('expected attributes are present in a record', function() {",
															"    pm.expect(firstAttributes).to.be.an('object');",
															"    pm.expect(firstAttributes).to.include.all.keys(\"isPeerReviewed\",\"isTitleCustom\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\",\"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"providerId\", \"providerName\",\"visibilityData\", \"managedCoverages\", \"customCoverages\", \"proxy\", \"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
															"});",
															"",
															"pm.test(\"data type is as expected\", function () {",
															"    pm.expect(firstRecord.type).eq(\"resources\");",
															"});",
															"",
															"pm.test(\"isSelected is as expected\", function () {",
															"   pm.expect(firstAttributes.isSelected).to.eql(true);",
															"});",
															"",
															"pm.test(\"isHidden is as expected\", function () {",
															"   pm.expect(firstAttributes.visibilityData.isHidden).to.eql(false);",
															"});",
															"",
															"pm.test(\"proxy is as expected\", function () {",
															"   pm.expect(firstAttributes.proxy.id).to.eql(\"<n>\");",
															"});",
															"",
															"pm.test(\"relationships is as expected\", function () {",
															"   pm.expect(firstRecord.relationships.accessType.data.type).to.eq(\"accessTypes\");",
															"   pm.expect(firstRecord.relationships.accessType.data.id).to.eq(pm.environment.get(\"access-type-id2\"));",
															"   pm.expect(jsonData.included[0].id).to.be.equal(pm.environment.get(\"access-type-id2\"));",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7f82c556-1ad8-4dbd-a486-4bfce7d63baf",
														"exec": [
															"var uuid = require('uuid');",
															"pm.globals.set(\"custom-resource-uuid\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"{{access-type-id2}}\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid-from-setup}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "update custom resource with access type when it is missing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c9c6ebc2-f07a-4289-ae8b-312de3e93832",
														"exec": [
															"pm.test(\"success test\", function () {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 400",
															"pm.test(\"Status is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Validate response against json api schema",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if (response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function () {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function () {",
															"        pm.expect(response.errors[0].title).to.contains('Access type not found');",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8fafa96d-eda4-45f1-b867-f9d932542fcd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"9b2f5369-04b0-4a54-b1e5-89713ab19188\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update custom resource with access type invalid id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "acc11f84-6083-4db8-8291-074807b07769",
														"exec": [
															"pm.test(\"success test\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"//Check that status is 422",
															"pm.test(\"Status is 422\", function () {",
															"    pm.response.to.have.status(422);",
															"});",
															"",
															"//Ensure that errors array is not empty",
															"if(response.errors) {",
															"    pm.test('Ensure that errors array is not empty', function() {",
															"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
															"    });",
															"",
															"    //Test that we get expected error message",
															"    pm.test('Ensure that we get expected error message', function() {",
															"        pm.expect(response.errors[0].message).to.contains('must match');",
															"    }); ",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e17cc058-518c-44f3-9b51-638fa5e03b09",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.api+json"
													},
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"accessTypeId\": \"invalid id\",\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"resources",
														"{{custom-resourceid}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c39b1834-a5b8-48b0-bea0-04bbb0a6a74e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b8fde7c-452b-4176-808c-6ee2b42c2cc3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE resource by resourceId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/resources DELETE specific resource (custom title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4a5e9b5-605e-42ea-bf18-7e9b0971e93e",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{custom-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE specific resource (managed title)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed743724-120a-4f0b-8da6-03eecef3187c",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/resources DELETE previously deleted resource id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50fa82a5-d402-4f83-b1ce-92e51f15c88f",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"   pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE managed title in managed package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6259b773-8693-4036-b56c-3a15815bff8d",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Resource cannot be deleted\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Resource is not in a custom package\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"{{managed-title-package-resourceid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/resources DELETE invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9769d87c-9c11-447a-bff0-e9184477b0c8",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"   pm.expect(jsonData.errors.length).to.eql(1);",
													"  pm.expect(jsonData.errors[0].title).to.equal(\"Resource id is invalid - 1\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"resources",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET resources by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfac3418-4804-4ecb-a1a3-7d1f79cfea75",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is resources",
													"        pm.test('type is resources', function() {",
													"            pm.expect(firstRecord.type).eq('resources');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"isTitleCustom\", \"publisherName\", \"titleId\", \"contributors\", \"identifiers\", \"name\", \"publicationType\", \"subjects\", \"customEmbargoPeriod\", ",
													"            \"isPackageCustom\", \"isSelected\", \"isTokenNeeded\", \"locationId\", \"managedEmbargoPeriod\", \"packageId\", \"packageName\", \"url\", \"providerId\", \"providerName\", \"visibilityData\", \"managedCoverages\", \"customCoverages\");",
													"        });",
													"        ",
													"        //Test that packageId matches what we passed in ",
													"        pm.test('packageId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.packageId).to.eq(pm.variables.get('packageId'));",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"title\", \"provider\", \"package\");",
													"        });",
													"    ",
													"        //Test that title is not included in relationships",
													"        pm.test('relationships meta should not include title', function() {",
													"            pm.expect(firstRecord.relationships.title.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that package is not included in relationships",
													"        pm.test('relationships meta should not include package', function() {",
													"            pm.expect(firstRecord.relationships.package.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No resources found for this package');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid packageId and custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f49004b-d7a2-455e-b0b3-f6164124ada1",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_resourceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of resources in response",
													"if(response.data) {",
													"    //Get the first record",
													"    let firstRecord = response.data[0];",
													"    ",
													"    //Test that type is resources",
													"    pm.test('type is resources', function() {",
													"        pm.expect(firstRecord.type).eq('resources');",
													"    });",
													"    ",
													"    //Test that data.attributes has expected attributes",
													"    pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"userDefinedField1\", \"userDefinedField2\", \"userDefinedField3\", \"userDefinedField4\", \"userDefinedField5\");",
													"    });",
													"    ",
													"    ",
													"    pm.test('userDefinedFields are correct', function() {",
													"        pm.expect(firstRecord.attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(firstRecord.attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(firstRecord.attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(firstRecord.attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{custom-packageid-from-setup}}",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "253dc382-f0a8-46c0-bda3-94fa0cfdfc91",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48223058-9e57-4314-b476-f15f7322b662",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId and providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3792789d-03f7-4821-a4a9-d08f79d12733",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc/resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc",
												"resources"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2bd65a47-7650-469a-a5a3-79a1e8ec0dd0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab950a6b-63d2-4452-b260-5f43b7170b4f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b73384ea-b9f4-4ec8-8832-158c0d7c4b3d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "137c4a4d-8079-497c-8b5c-125103896ac1",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceTagsItem.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsItem\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceTagsDataAttributes\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchCollection.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchCollection\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceBulkFetchDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceBulkFetchDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceFailedInformation.json\", JSON.parse(pm.variables.get(\"schema_resourceFailedInformation\")));",
							"tv4.addSchema(\"schema_resourceFailedIds.json\", JSON.parse(pm.variables.get(\"schema_resourceFailedIds\")));",
							"tv4.addSchema(\"schema_errors.schema\", JSON.parse(pm.variables.get(\"schema_errors\")));",
							"tv4.addSchema(\"schema_error.schema\", JSON.parse(pm.variables.get(\"schema_error\")));",
							"tv4.addSchema(\"schema_parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "GET title collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles query only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8668ed9-0bcd-4f79-afcc-6e3901dbd2e5",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"        ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"            ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"        ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"        ",
													"    // Test that first title contains search term",
													"    pm.test('title name in first result includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with name sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dccede1d-c40c-4ef2-a76d-84ad85b0f175",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"    ",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Save first id to compare with a relevance sort result -- the 2 should be different",
													"    pm.environment.set(\"name-sort-id1\", firstRecord.id);",
													"} else {",
													"    console.log(\"Sample Title Query with name sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with relevance sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7bcc0d6-296e-4f97-95ca-699e6ba9613f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"contributors\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Test that first sorted by relevance title id does not equal name sort title id",
													"    pm.test('first title name does not equal first title in relevance sort', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"} else {",
													"     console.log(\"Sample Title Query with relevance sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=relevance",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "relevance"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaed48e4-3022-4cd9-a527-3413ed07faf3",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[publisher]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d286d50-27f4-4c0d-b516-b1d53ebef9e5",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"data array contains the default (25) entries\", function () {",
													"    pm.expect(jsonData.data.length).to.eql(25);",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publisherName.toLowerCase()).to.include('academic');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[publisher] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[publisher]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[publisher]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[subject]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "477ecae5-97d6-42d2-bc0c-09ba45845960",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingSubjects = [];",
													"        jsonData.data.filter(",
													"            function(item){",
													"                item.attributes.subjects.filter(",
													"                    function(subject) {",
													"                        if (subject.subject.toLowerCase().includes('history')) {",
													"                            matchingSubjects.push(subject.subject);",
													"                        }",
													"                    }",
													"                );",
													"            }",
													"        );",
													"    ",
													"    pm.test('at least 1 subject includes query term', function() {",
													"        pm.expect(matchingSubjects.length).to.be.above(0);",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[subject] returned 0 results\");",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[subject]=history",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[subject]",
													"value": "history"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76356121-861f-4085-9b60-34e93dcf495d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingIdentifiers = firstAttributes.identifiers.filter(",
													"        function(identifier) {",
													"            if (identifier.id.toLowerCase().includes('99')&&(['issn', 'isbn'].includes(identifier.type.toLowerCase()))) {",
													"               return identifier.id;",
													"            }",
													"        }",
													"    );",
													"    ",
													"    pm.test('at least 1 issn or isbn identifier includes query term', function() {",
													"        pm.expect(matchingIdentifiers.length).to.be.above(0);",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Title Query with filter[isxn] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter for no results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3722925c-9810-4686-b1f5-054b3095df3d",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[type]&filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e1c858c-5657-4f7e-85e8-7ab0bdfaeaf9",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cef112b-5b72-47ef-9090-26e36e9296ae",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged title', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    pm.expect(titleIds).to.include(taggedTitleId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with multiple tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5beaa91-ee3e-4ef3-9409-47ed10a4ca98",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type' header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response includes tagged titles', function() {",
													"    let titleIds = jsonData.data.map(record => record.id);",
													"    let taggedTitleId = pm.environment.get('managed-title-package-resourceid').split('-')[2];",
													"    let taggedCustomTitleId = pm.environment.get('custom-resourceid-from-setup').split('-')[2];",
													"    pm.expect(titleIds).to.include.all.members([taggedTitleId,taggedCustomTitleId]);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}},test tag",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}},test tag"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[tags] with pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae0a28f5-6b12-4b44-82f1-0e1c889c9eb3",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    console.log(firstAttributes);",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});",
													"",
													"// Test that first title publisher name contains search term",
													"pm.test('response has 1 title', function() {",
													"    pm.expect(jsonData.data.length).eq(1);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "file",
											"file": {
												"src": ""
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[tags]={{secondTagName}},test tag&count=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[tags]",
													"value": "{{secondTagName}},test tag"
												},
												{
													"key": "count",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "845f1974-e1f4-49e7-89c3-d05992b379f6",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    // Test that first title on page 2 does not have same id as first title on page 1 ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Titles Query with paging returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[access-type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9243de7-c85b-4c94-adc0-13ba5d7e267c",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_titleCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publicationType\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[access-type]={{access-type-name2}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[access-type]",
													"value": "{{access-type-name2}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles no parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a604bb4-4948-45ee-a527-1edb05eac61c",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9115ffb-2cdf-4052-8d75-ca4d20516d66",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Value of required parameter filter[name], filter[isxn], filter[subject] or filter[publisher] is missing.\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query with sort only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "439b8363-a497-4032-9069-05484a151db6",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn] &filter[name] conflicting filter parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7abc7290-4062-4b33-8f38-be8af31af0e1",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Conflicting filter parameters\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99&filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												},
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid too large",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6faf91ad-ca0a-4538-ab35-5b72fd45f499",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"2147483648\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2147483648&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2147483648"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ce37c6a-e7e5-4dbe-bb75-baab00f5d3ec",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"\\n 'page' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 1\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=-1&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64a71e45-94fc-48fa-9f4b-6cf9314110ad",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"a\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=a&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "a"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET title by  titleid",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles GET specific title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3623630e-3333-45ad-9ed0-0ca05451e565",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf920c1f-c17a-4f67-ab27-26287ef50208",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.data.length).to.be.above(0);",
													"});",
													"",
													"if (relationships.resources.data.length > 0) {",
													"    pm.test(\"data array contains the default entries\", function () {",
													"        pm.expect(relationships.resources.data[0].type).to.eql(\"resources\");",
													"    });",
													"} else {",
													"      console.log(\"Sample Titles GET byId including resources returned 0 relationships\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a22ce2c-1a29-4241-b341-92415e23dac7",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"pm.test(\"included resource with tags\", function () {",
													"    let taggedCustomResourceId = pm.environment.get('custom-resourceid-from-setup');",
													"    let taggedResource = jsonData.included.filter(resource => resource.id === taggedCustomResourceId)[0];",
													"    pm.expect(taggedResource.attributes.tags.tagList).to.include(\"test tag\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48c56c9b-6013-46ef-af99-4257a25d2974",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-with-tags}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-with-tags}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources with custom labels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95f3c40b-edfd-4596-a768-197efa5c5545",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"    ",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(jsonData.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that resources are included in relationships",
													"pm.test('relationships meta should include resources', function() {",
													"    pm.expect(jsonData.data.relationships.resources.data).is.not.empty;",
													"});",
													"",
													"//Test that list of resources are included",
													"pm.test('include resources list', function() {",
													"    if (jsonData.included === undefined || jsonData.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No resources included\");",
													"    } else {",
													"        //Test that resources are included",
													"        pm.test('should include resources', function() {",
													"            let resourceWithLabels = jsonData.included.filter(resource => resource.id === pm.environment.get(\"custom-resourceid-from-setup\"))[0];",
													"            pm.expect(resourceWithLabels.type).to.eq('resources');",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField1).eq(\"test 1\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField2).eq(\"test 2\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField4).eq(\"test 4\");",
													"            pm.expect(resourceWithLabels.attributes.userDefinedField5).eq(\"test 5\");",
													"        });",
													"    }",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52c6d657-71a4-4c88-a6ed-bf1fbf80168c",
												"exec": [
													"pm.environment.set('custom-titleid-with-tags', pm.environment.get('custom-resourceid-from-setup').split('-')[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid-from-setup}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid-from-setup}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources bad value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "365612f3-0bc7-4cad-9b37-5d4415ce8dd9",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.meta.included).to.be.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=badValue",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "badValue"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles GET non existing title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b52036fa-357e-421d-bb10-37fb4cd2aa90",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "POST title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles POST valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ad3c4ed-3136-4285-9a97-3b1dda901c11",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"edition\", \"description\", \"isPeerReviewed\", \"contributors\", \"tags\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"title name is as expected\", function () {",
													"    pm.expect(firstAttributes.name).eq(\"custom title-\" + pm.variables.get(\"custom-title-uuid\"));",
													"});",
													"",
													"pm.test(\"publisher name is as expected\", function () {",
													"    pm.expect(firstAttributes.publisherName).eq(\"test publisher\");",
													"});",
													"",
													"pm.test(\"isTitleCustom is true\", function () {",
													"    pm.expect(firstAttributes.isTitleCustom).eq(true);",
													"});",
													"",
													"pm.test(\"subjects are as expected\", function () {",
													"   pm.expect(firstAttributes.subjects).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"identifiers are as expected\", function () {",
													"   pm.expect(firstAttributes.identifiers).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.identifiers.length).to.eql(1);",
													"   pm.expect(firstAttributes.identifiers[0].id).to.eql(\"11-2222-3333\");",
													"   pm.expect(firstAttributes.identifiers[0].type).to.eql(\"ISSN\");",
													"   pm.expect(firstAttributes.identifiers[0].subtype).to.eql(\"Online\");",
													"});",
													"",
													"pm.test(\"publicationType is as expected\", function () {",
													"   pm.expect(firstAttributes.publicationType).to.eql(\"Database\");",
													"});",
													"",
													"pm.test(\"edition is as expected\", function () {",
													"   pm.expect(firstAttributes.edition).to.eql(\"test edition\");",
													"});",
													"",
													"pm.test(\"description is as expected\", function () {",
													"   pm.expect(firstAttributes.description).to.eql(\"test description\");",
													"});",
													"",
													"pm.test(\"isPeerReviewed is as expected\", function () {",
													"   pm.expect(firstAttributes.isPeerReviewed).to.eql(true);",
													"});",
													"",
													"pm.test(\"contributors are as expected\", function () {",
													"   pm.expect(firstAttributes.contributors).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.contributors.length).to.eql(2);",
													"   pm.expect(firstAttributes.contributors[0].type.toLowerCase()).to.eql(\"author\");",
													"   pm.expect(firstAttributes.contributors[0].contributor).to.eql(\"smith, john\");",
													"   pm.expect(firstAttributes.contributors[1].type.toLowerCase()).to.eql(\"illustrator\");",
													"   pm.expect(firstAttributes.contributors[1].contributor).to.eql(\"smith, ralph\");",
													"});",
													"",
													"",
													"",
													"const getResourceRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/resources/' + pm.variables.get(\"custom-packageid\") + \"-\" + jsonData.data.id,",
													"  method: 'GET',",
													"  header: {",
													"    'Content-Type' : 'application/vnd.api+json',",
													"    'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"    'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"      ",
													"  },",
													"};",
													"pm.sendRequest(getResourceRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    attributes = res.json().data.attributes;",
													"    pm.test('userDefinedFields are as expected', function(){",
													"        pm.expect(attributes.userDefinedField1).eq(\"test 1\");",
													"        pm.expect(attributes.userDefinedField2).eq(\"test 2\");",
													"        pm.expect(attributes.userDefinedField3).eq(\"test 3\");",
													"        pm.expect(attributes.userDefinedField4).eq(\"test 4\");",
													"        pm.expect(attributes.userDefinedField5).eq(\"test 5\");",
													"    });",
													"});",
													"",
													"//Check that tagList is empty",
													"pm.test('TagList is empty', function(){",
													"    pm.expect(firstAttributes.tags.tagList.size) === 0;",
													"});",
													"",
													"// Store custom title id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-titleid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31fbc61a-ed1e-42ee-b1e2-faa2c904c2ee",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"title-tag\"\n\t\t\t]\n    \t},\n      \"userDefinedField1\": \"test 1\",\n      \"userDefinedField2\": \"test 2\",\n      \"userDefinedField3\": \"test 3\",\n      \"userDefinedField4\": \"test 4\",\n      \"userDefinedField5\": \"test 5\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles POST provider not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1eee90b7-bf2a-464d-9cf5-bbef1182e2cd",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Provider not found\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"1-1\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST duplicate title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f26aa200-249c-4c5f-8ba7-f43eca90b293",
												"exec": [
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc4c2dc9-d19e-4bcb-9f24-f06b5f6af82a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30c49f46-9124-4bcb-888d-961599c7486f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "da1c166d-b9dc-460c-8fd2-e27289f7415e",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ed4cd8d-0289-4f3e-8a98-290a4b63c8ec",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST non existing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72d10c95-57d1-4e14-b01f-3e62c6a5cb24",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "62ef7d73-5006-4c4b-b5c9-08c7a1040b59",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-pubtype-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-pubtype-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"badpubtype\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "712b718e-25e2-4635-907d-bb1b987bc6fd",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.expect(pm.response.reason()).to.equal(\"Unprocessable Entity\")",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Missing resource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  }\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "921ed5ef-475f-4791-a60a-226a0665bd12",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST cannot add custom title to managed resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd157957-ccd5-47ce-9719-d0fb01b3126e",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Cannot create custom title because Customer is not the Provider\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{managed-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5956c306-ddbf-4500-9286-b94db2b02d3d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d5d6b47-dc80-4298-89ab-d546d43993d3",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid isPeerReviewed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "557c382a-586a-487c-a0b9-5edf56a5ff02",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9dbad031-b406-4a6e-ba19-6674009d9207",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": \"badvalue\",\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "256c2060-49a5-49c2-8063-587972868474",
												"exec": [
													"",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Edition is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c23fe32-3402-45ca-b1ae-4a221e47b643",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"{{long-edition}}\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b48c314b-23de-4d36-9a9c-c43ef7bba019",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca02a9f1-c519-439c-adfa-9c6a2f43dcf0",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"{{long-description}}\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid contributor type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9d55fcf-b9c3-45a3-8f6d-279a48a30914",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Parameter contributorsList.contributorType must be one of (author, editor, illustrator).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f38713f-ff2a-4810-87ef-3eaaaa7a83e4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n       {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        }\n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6d5ebb1-8716-40ab-adcc-dc45c82d1578",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function() {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function() {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function() {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function() {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed259bc4-8822-4be7-b097-a5312099976f",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-identifier\", toRepeat.repeat(21));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\":\"{{long-identifier}}\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9299c2c5-1cb5-426f-8928-aef7762d6d13",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e2c34ef-1c9b-4b1b-acce-0307c028f1c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ec67af0-7e38-4b3c-8c5c-85e982cf5204",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4989cac-afd5-4bf8-971b-ce337a1c53dc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"invalidtype\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92c723bf-9cb1-481b-be47-ade7df3e9c20",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d457ab9-bf6e-4f23-af12-61b675fdcd59",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"invalidsubtype\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update title with adding tags",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d10ec17-4ecd-42bb-a0ad-8a6c9804a92b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_title\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that type is titles",
													"pm.test('type is titles', function(){",
													"    pm.expect(response.data.type).eq('titles');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\",\"publicationType\", \"publisherName\",",
													"    \"isPeerReviewed\", \"edition\", \"contributors\", \"identifiers\", \"tags\");",
													"});",
													"",
													"//Test that publicationType matches as provided in request",
													"pm.test('publicationType matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publicationType).to.eq(\"Database\");",
													"});",
													"",
													"//Test that publisherName matches provided in request",
													"pm.test('publisherName matches as provided in request', function() {",
													"    pm.expect(response.data.attributes.publisherName).to.eq(\"test publisher\");",
													"});",
													"",
													"//Test that isPeerReviewed is true",
													"pm.test('isPeerReviewed is true', function() {",
													"    pm.expect(response.data.attributes.isPeerReviewed).to.be.true;",
													"});",
													"",
													"//Check that tagList is not empty",
													"pm.test('TagList is not empty', function(){",
													"    pm.expect(response.data.attributes.tags.tagList.size) !== 0;",
													"});",
													"",
													"//Check that tag in tagList matches with value",
													"pm.test('Creating tagList', function(){",
													"    pm.expect(response.data.attributes.tags.tagList[0]).eq(\"foo-tag\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": [\n    \t\"foo-tag\"\n\t\t\t]\n    \t}\n\t}\n\t}\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles PUT update custom title missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9b40049-68ce-42c4-bc4e-d04b64ca704a",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"// Error text as returned from rm api",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.eq(\"Invalid Identifier id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "57208ff0-4950-401e-afc2-dc39229a3567",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b094a33e-bc8c-46ba-b06c-c3e92261ff6b",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f5c0f80-983f-4437-9a6a-e33f1f15f4ab",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Invalid\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid identifer type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae1bbdf0-1d2c-4ad3-bc7b-d87bf26f0514",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e75d0aa9-3ace-4161-9ce3-0111fa4c1462",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"Invalid\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid contributor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f132a248-1973-42fd-8bb6-a4e5921010eb",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Attribute Type is invalid.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "96fd1c37-e9bd-41d9-a68c-0307bbe36e7e",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f562e75-3086-47eb-a8fe-3ee97fcbb17e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd6fafd1-6462-4bb5-b501-83a4ee071168",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"5\",\n      \"description\": \"{{long-description}}\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0107bfaf-0c9d-4601-86b1-06c961429c7d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2f57e99f-36ff-4f7b-b930-73e9556b29c2",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"test publisher name\",\n      \"edition\": \"{{long-edition}}\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a5c4e96-066a-4d41-9b89-71712292863e",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "517e46d2-0ec5-407b-bce8-c5fbd16fd0ba",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d5a5db8-30b8-470d-b718-815dabb9aedd",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "788d790c-8642-48cc-9fb5-21e9da0b30a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"invalid\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title invalid peer review",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f92c36f-3683-4393-9bf2-c7518c82b462",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text().startsWith('Json content error')).to.be.true;",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "62ba525c-cfa1-4ab5-bee7-0d384e83e50c",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-resource-uuid}}\",\n      \"isPeerReviewed\": \"invalid\",\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title duplicate title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eba7887-2bd7-4b59-bc0e-3d1335d359a5",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d0c7d8ed-0d09-4942-9051-52007a3f32d9",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{custom-titlename-for-resource-duplicate}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles PUT update custom title Invalid name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "218bc022-69a2-4ad1-8955-c505601dcf75",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4939186-ac5a-4437-bfbd-0bc80553b35d",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"id\": \"{{custom-titleid}}\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"isPeerReviewed\": true,\n      \"publicationType\": \"Newspaper\",\n      \"publisherName\": \"Test Publisher\",\n      \"edition\": \"5\",\n      \"description\": \"Test Description\",\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ]\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{custom-titleid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4dc1ab16-55d7-4f75-8b07-0de7a28a8ea8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0fc4423d-c9c3-4edf-876c-7c9143b5902e",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_titleData.json\", JSON.parse(pm.variables.get(\"schema_titleData\")));",
							"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
							"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_identifier.json\", JSON.parse(pm.variables.get(\"schema_identifier\")));",
							"tv4.addSchema(\"schema_publicationType.json\", JSON.parse(pm.variables.get(\"schema_publicationType\")));",
							"tv4.addSchema(\"schema_subject.json\", JSON.parse(pm.variables.get(\"schema_subject\")));",
							"tv4.addSchema(\"schema_contributor.json\", JSON.parse(pm.variables.get(\"schema_contributor\")));",
							"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_resourceCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_resourceCollectionItem\")));",
							"tv4.addSchema(\"schema_resourceDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_resourceDataAttributes\")));",
							"tv4.addSchema(\"schema_resourceRelationships.json\", JSON.parse(pm.variables.get(\"schema_resourceRelationships\")));",
							"tv4.addSchema(\"schema_embargo.json\", JSON.parse(pm.variables.get(\"schema_embargo\")));",
							"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
							"tv4.addSchema(\"schema_titles.json\", JSON.parse(pm.variables.get(\"schema_titles\")));",
							"tv4.addSchema(\"schema_titleListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_titleListDataAttributes\")));",
							"tv4.addSchema(\"schema_metaIncluded.json\", JSON.parse(pm.variables.get(\"schema_metaIncluded\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "configuration",
			"item": [
				{
					"name": "GET Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50db3e12-3e0c-42f5-9ff2-88e80bba75c3",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Delete Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7a79c013-347c-4948-b8ad-4269ed7a1a54",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "819b6d11-c67c-4a7b-a7fe-ff02a2cf0dfc",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-url-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d73126cd-cc81-4920-912c-e63461b6b2e3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ff489ab2-4d86-4eea-809b-debf92ad6c0a",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-key-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1589b9f9-b0e3-497e-bc0a-6975be7249bc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a807ce44-6039-4d5c-92cf-fd64ffd33b92",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-customer-id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run tests",
									"item": [
										{
											"name": "GET Configuration - when configuration is not configured",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa9dc1b7-1b5d-42ac-9e00-dedf7f4a1f08",
														"exec": [
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
															"});",
															"",
															"//Test that id is configuration",
															"pm.test('id is configuration', function(){",
															"    pm.expect(response.data.id).eq('configuration');",
															"});    ",
															"",
															"//Test that type is configurations",
															"pm.test('type is configurations', function(){",
															"    pm.expect(response.data.type).eq('configurations');",
															"});",
															"    ",
															"//Test that default value for rmapiBaseUrl is returned",
															"pm.test('rmapiBaseUrl is returned with default value', function(){",
															"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(\"https://api.ebsco.com\");",
															"});",
															"",
															"//Test apiKey is missing when it is not configured",
															"let apiKey = \"****************************************\";",
															"pm.test('apiKey is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"apiKey\");",
															"});",
															"",
															"//Test that customerId is missing when it is not configured",
															"let custid = pm.environment.get(\"rm-api-custid-value\");",
															"pm.test('customer id is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"custid\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reset Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b97103f0-efea-4269-a4ef-8a6d26d8bc72",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "de3b2c7b-e2c4-4f56-8285-4e3d50248f2c",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-url-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-url-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb871391-26f8-4b62-974d-175878dbe634",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "504ad2e8-83c3-4eda-8c9f-9c0bd43c64b3",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-key-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-key-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "24de9945-1db2-42cd-9ea8-b637f2f80c3c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "018a5951-c9e7-4956-b2dc-b5a4e264159c",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-customer-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-customer-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51c1aa88-ca23-464b-9e76-5808ecad3ef4",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_configuration\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RM API Url id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2247a63-67a9-43ce-bf96-302aeb972052",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cee6b031-db96-4fce-a4e7-edb2a7959b37",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5efb827-eaed-48fb-82af-12a84809cc31",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f426031c-bae7-4860-a0a8-d5a8e382cf0f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API apiKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3af90cf8-c9fd-45f1-a8b0-c09ff69ff78e",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c4121d9-3477-4656-a25c-806a1360c2a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT Configuration - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae8b2d98-372c-4f49-b0af-cec5122343a5",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"not a customer id\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when api key is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fea01c58-c365-4ec0-a3d3-fc684cd6e743",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"not an apikey\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91b25f28-8385-421e-a4f7-9514b087b6e8",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"not a url\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7fa320e-6be6-41f0-91ce-19c6434155c5",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when all fields are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96331ed5-75c0-4a91-9c1f-70e75b8f4e03",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"\",\n            \"apiKey\": \"\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d3220af-52d4-4ec5-a97c-67a602c6f6cb",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid API key');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when json is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a4ee029-e6db-42aa-9ec6-7b902db9484e",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed."
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        },\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd862c98-31fd-4e1b-a8ba-d1b23c7e2960",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "13995845-f7ed-443c-aacb-203521f1f964",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_configurationData.json\", JSON.parse(pm.variables.get(\"schema_configurationData\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_configurationAttributes.json\", JSON.parse(pm.variables.get(\"schema_configurationAttributes\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "status",
			"item": [
				{
					"name": "GET status",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Status - when status is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4822fa0b-fafb-45d7-846f-9dfbbbd8aae2",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is true', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT invalid RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f18c288c-e33c-4a0e-8368-03cb37ba3e18",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "08721765-fbdb-4a52-8854-1168c22d11c7",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"not a url\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when api url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a53e4e1f-ca49-4e8f-b297-ac8f92ec3203",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f71efb52-f52f-4f20-b659-7afd817f28f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34379a03-2292-47e1-9aa3-6ebeb7d7b649",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.url\",\n    \"description\": \"EBSCO RM-API URL\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-url-value}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6f4a110-3033-4e02-9321-9c395e94d6ec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d679b2b8-2855-4b3e-8e6e-4b6bde1884e1",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"invalid id\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc1a64b6-bf3d-4b9d-b308-1a0961a2c630",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "57fd537e-0f96-4e7c-b44d-27cf8e238383",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de45ea12-b096-4bc6-b42d-efe77326c900",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.customerId\",\n    \"description\": \"EBSCO RM-API Customer ID\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-custid-value}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "03dc3878-5a3e-4ad6-9df0-84bcc2dc3714",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0f26224e-82b1-4015-b0e7-3bb5b681f116",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"invalid api key\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when apiKey is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08bb017c-5861-4e01-8be6-5e93192f9494",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_status\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3975d343-952f-438e-b34f-a7527bd44aa5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "68de94fc-a113-4166-8f33-83b6ccf6689e",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"module\": \"EKB\",\n    \"configName\": \"api_access\",\n    \"code\": \"kb.ebsco.apiKey\",\n    \"description\": \"EBSCO RM-API API Key\",\n    \"enabled\": true,\n    \"value\": \"{{rm-api-key-value}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "064aa384-30c4-4758-8b14-5f64e676b981",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f413b61c-c723-4457-a761-c45e4b9aa07b",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_statusData.json\", JSON.parse(pm.variables.get(\"schema_statusData\")));",
							"tv4.addSchema(\"schema_statusAttributes.json\", JSON.parse(pm.variables.get(\"schema_statusAttributes\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "GET proxy-types",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Get proxies",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a85d50e-b2e5-4b36-aea0-942649122efa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is proxyType",
													"        pm.expect(firstRecord.type).eq('proxyTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
													"        });",
													"    } else {",
													"        console.log(\"No Proxy types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"proxy-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17fbc6b3-bc88-479c-aaa8-43b5fd2a4b0f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyTypes\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is proxyType",
													"        pm.expect(firstRecord.type).eq('proxyTypes');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
													"        });",
													"    } else {",
													"        console.log(\"No Proxy types exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"proxy-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Get proxies by non-existing KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ecfec6e-ac62-49e0-b363-f6982e344837",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"KbCredentials not found by id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"proxy-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by  invalid KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f655fbab-284c-4e78-8ea8-85ceee21d8df",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/proxy-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"proxy-types"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f06f3add-264f-45a8-b31d-147152c6d917",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a8059ad-9a3b-4571-a728-2af797933db1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GET root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET root proxy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "951107be-2e99-45d8-83e6-4145cdcf5f18",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET root proxy by KB Credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02228ff-e236-4685-9dc3-a87c306055d3",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Get proxies by non-existing KB Credentials id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e3842ba-1bcf-48c6-b27b-6865dd152410",
												"exec": [
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.be.notFound;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"KbCredentials not found by id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{non-existing-credentials-id}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{non-existing-credentials-id}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get proxies by  invalid KB Credentials id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "620a895b-d706-44ad-a657-eca980e7dbc6",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.be.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.contain(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/invalid-id/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"invalid-id",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0eb72f18-9b30-4599-be5a-8faf7fe4903e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a2a08f9-2323-49fd-88b5-7fca0a472d54",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT root-proxy",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT root proxy when root proxy is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65cd4268-f559-4e52-8614-e98736458bfe",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"   pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_rootProxy\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"credentialsId\", \"attributes\");",
													"});",
													"",
													"//Test that id is root-proxy",
													"pm.test('id is root-proxy', function(){",
													"    pm.expect(response.data.id).eq('root-proxy');",
													"});    ",
													"",
													"//Test that type is rootProxies",
													"pm.test('type is rootProxies', function(){",
													"    pm.expect(response.data.type).eq('rootProxies');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"id\");",
													"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
													"});",
													"",
													"//Test that data.attributes.id is root-proxy",
													"pm.test('expected data.attributes.id is root-proxy', function(){",
													"    pm.expect(response.data.attributes.id).eq('root-proxy');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"<n>\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update root proxy without proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01f45ec5-ac39-425a-9d09-a10191afedbe",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.be.clientError;",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/json",
													"pm.test(\"'Content-Type' is application/json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 4 entries\", function () {",
													"    pm.expect(response.errors.length).to.eql(4);",
													"    ",
													"    var requiredParameterArray = [];",
													"    response.errors.forEach((element) => {",
													"\t    requiredParameterArray.push(element.parameters[0].key);",
													"    });",
													"    ",
													"    pm.expect(requiredParameterArray).to.contain(\"data.id\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.type\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.id\");",
													"    pm.expect(requiredParameterArray).to.contain(\"data.attributes.proxyTypeId\");",
													"",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"attributes\": {\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid proxyTypeId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07d6c3cc-fc0d-4cff-869a-ae8f5d80e33e",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Test that response has expected error message",
													"pm.test('expected error message is present in response', function() {",
													"    pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								},
								{
									"name": "update root proxy with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adbef047-a11b-435f-b5bb-d3ead4c1f568",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.badRequest;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"}); ",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(response.errors.length).to.eql(1);",
													"    pm.expect(response.errors[0].title).to.eq(\"Invalid Proxy ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"id\": \"root-proxy\",\n    \"type\": \"rootProxies\",\n    \"attributes\": {\n      \"id\": \"root-proxy\",\n      \"proxyTypeId\": \"invalid\"\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/root-proxy",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"root-proxy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aa64b921-dd6d-4447-a42e-d34ed26a525e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "678be53e-aa77-46ed-8361-43491bc063fc",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_proxyTypesData.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesData\")));",
							"tv4.addSchema(\"schema_proxyTypesDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_proxyTypesDataAttributes\")));",
							"tv4.addSchema(\"schema_rootProxyData.json\", JSON.parse(pm.variables.get(\"schema_rootProxyData\")));",
							"tv4.addSchema(\"schema_rootProxyDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_rootProxyDataAttributes\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_errors.schema\", pm.environment.get(\"schema_errors\"));",
							"tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tags",
			"item": [
				{
					"name": "GET tags collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adf5eb0b-f714-4404-8e94-1f5b5c22f8e4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"value\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute type",
													"        pm.test('expected data.attributes type is present', function() {",
													"            pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationship is present', function() {",
													"            pm.expect(firstRecord.relationships.record).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"record\")",
													"        });",
													"    } else {",
													"        console.log('No tags found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											]
										}
									},
									"response": []
								},
								{
									"name": "with all rectypes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43b37cff-ccf3-4169-bae0-18d49379f222",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider&filter[rectype]=package&filter[rectype]=title&filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												},
												{
													"key": "filter[rectype]",
													"value": "package"
												},
												{
													"key": "filter[rectype]",
													"value": "title"
												},
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d42f7f35-0c8e-4f3c-a12f-25b73516bf47",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to providers', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f12c156-d256-4092-a593-7024093e5996",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to packages', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=package",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "package"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c67f73a-8783-4203-ba2f-8798d29a63aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is a string",
													"        pm.test('Value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to titles', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "title"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with rectype=resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0e7d608-1d77-4019-a2b6-a0643f32c86e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type tags if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is tags",
													"        pm.test('type is tags', function() {",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        })",
													"        //Test that value is string type",
													"        pm.test('value is string type', function() {",
													"           pm.expect(firstRecord.attributes.value).to.be.a('string');",
													"        })",
													"        ",
													"        pm.test('Record is related to resources', function() {",
													"        pm.expect(firstRecord.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    } else {",
													"        console.log(\"No results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=resource",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "resource"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid filter(all rectypes)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5380cd2-f4a4-443b-bc82-4b446748de05",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_tagCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of tags in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is tags",
													"        pm.test('type is tags', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('tags');",
													"        });",
													"    }",
													"}",
													"",
													"    response.data.forEach(function(element) {",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-packageid\")){",
													"        pm.test('Record includes query term packages', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"packages\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === \"18\"){",
													"        pm.test('Record includes query term providers', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"providers\");",
													"            });",
													"    }",
													"     if (element.relationships.record.data.id === pm.environment.get(\"custom-titleid\")){",
													"        pm.test('Record includes query term titles', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"titles\");",
													"            });",
													"    }",
													"    if (element.relationships.record.data.id === pm.environment.get(\"custom-resourceid-from-setup\")){",
													"        pm.test('Record includes query term resources', function() {",
													"        pm.expect(element.relationships.record.data.type).eq(\"resources\");",
													"            });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[r=provider",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[r",
													"value": "provider"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with invalid request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfef9b7e-e6c7-4822-9ade-786ffa347097",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid \\'filter[rectype]\\' parameter value: providers. Possible values: provider, package, title, resource');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/tags?filter[rectype]=providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"tags"
											],
											"query": [
												{
													"key": "filter[rectype]",
													"value": "providers"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "70ef95db-fbd5-46f1-ac76-b94d48f04ab2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "da80149b-296d-4e1b-9245-5637847e2200",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
							"tv4.addSchema(\"schema_tagRelationships.json\", JSON.parse(pm.variables.get(\"schema_tagRelationships\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_tagCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_tagCollectionItem\")));",
							"tv4.addSchema(\"schema_tagCollection.json\", JSON.parse(pm.variables.get(\"schema_tagCollection\")));",
							"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));",
							"tv4.addSchema(\"schema_tagDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_tagDataAttributes\")));",
							"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
							"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_uuid.schema\", JSON.parse(pm.variables.get(\"schema_uuid\")));"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "custom-labels",
			"item": [
				{
					"name": "GET collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET custom labels collection",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb2c539b-9e77-4b3f-b8dc-effc82b663f8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabels');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\");",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET custom labels collection by credentials",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da294b96-86cb-4070-8597-166a8fe735da",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"//Check that content-type is application/vnd.api+json",
													"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
													"      pm.response.to.have.header(\"Content-Type\");",
													"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is customLabel",
													"        pm.expect(firstRecord.type).eq('customLabels');",
													"",
													"        //Test that object has the expected keys",
													"        pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"        pm.expect(firstRecord.credentialsId).to.be.equal(pm.environment.get(\"kb-credentials-id1\"))",
													"         ",
													"         //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"        pm.expect(firstRecord.attributes).to.be.an('object');",
													"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\", \"displayOnPublicationFinder\");",
													"        });",
													"    } else {",
													"        console.log(\"No Custom Labels exist\");",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "GET custom-labels by missing credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2b0d4a8-a103-4d64-988f-7c0c813eefdf",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT custom-labels with one item",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5755148-c4f3-4db4-89d2-f44094bee7b3",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"    pm.expect(firstRecord.type).eq('customLabels');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT custom-labels with five items",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf3280e7-65ea-46d5-81da-1cef1b5b3daa",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_customLabelsCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test('expected size', function () {",
													"    pm.expect(jsonData.data.length).eq(5);",
													"})",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data[0];",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"type\", \"attributes\", \"credentialsId\");",
													"    pm.expect(firstRecord.type).eq('customLabels');",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"id\", \"displayLabel\", \"displayOnFullTextFinder\",\"displayOnPublicationFinder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 2,\n                \"displayLabel\": \"test 2 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 3,\n                \"displayLabel\": \"test 3 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 4,\n                \"displayLabel\": \"test 4 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        },\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 5,\n                \"displayLabel\": \"test 5 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT /custom-labels with id not in range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaf57579-e502-4f0e-8e52-8452ed5bdf65",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label id should be in range 1 - 5\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 6,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e543649-df3a-4c17-8853-ca8269fe626d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label id\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": -1,\n                \"displayLabel\": \"test 1 updated\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid name length",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "648d8d79-074f-4ac6-ad8e-7fcd0e98a937",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapiError\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Custom Label Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Custom Label Name is too long (maximum is 50 characters)\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid full text finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c1329aa-3c84-468f-9fea-604819adeb48",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": null,\n                \"displayOnPublicationFinder\": true\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with invalid publication finder",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73c1f1f9-6731-4ac3-a6c3-590d6f24e481",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].message).to.equal(\"may not be null\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": null\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"{{kb-credentials-id1}}",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels with duplicate ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9596e411-c15d-4c02-89c2-11728402da94",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT /custom-labels to missing credentials id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20ee4dbc-96b7-481f-923b-2d43c9895ed3",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.clientError;",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"KbCredentials not found by id: 99999999-9999-1999-a999-999999999999\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": [\n        {\n            \"type\": \"customLabels\",\n            \"attributes\": {\n                \"id\": 1,\n                \"displayLabel\": \"Lorem ipsum dolor sit amet\",\n                \"displayOnFullTextFinder\": false,\n                \"displayOnPublicationFinder\": false\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/99999999-9999-1999-a999-999999999999/custom-labels",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"kb-credentials",
												"99999999-9999-1999-a999-999999999999",
												"custom-labels"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec3203b-f0f5-4739-9abb-ac7d6506317d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c1e6aee2-8461-4694-88b3-5d4ee0dccd00",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "36857302-e198-49b7-ae5c-8b541dd26858",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1509a3b4-651a-4234-8066-faf657fb5de2",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_customLabelsCollection.json\", JSON.parse(pm.variables.get(\"schema_customLabelsCollection\")));",
							"tv4.addSchema(\"schema_customLabelDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_customLabelDataAttributes\")));",
							"tv4.addSchema(\"schema_customLabel.json\", JSON.parse(pm.variables.get(\"schema_customLabel\")));",
							"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
							"",
							"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
							"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
							"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
							"tv4.addSchema(\"schema_uuid.schema\", pm.variables.get(\"schema_uuid\"));",
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tear-down",
			"item": [
				{
					"name": "tear-down tags test",
					"item": [
						{
							"name": "Delete tags for provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6a71272-09b5-4754-9277-f3014787fd33",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('Gale | Cengage');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Tag list is empty', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"Gale | Cengage\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"18",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for second provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e9fd92f-50d6-4566-88e1-9a74ab63e21f",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_providerTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"type\", \"attributes\");",
											"});",
											"",
											"//Test that type is tags",
											"pm.test('type is tags', function(){",
											"    pm.expect(response.data.type).eq('tags');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"tags\");",
											"});",
											"",
											"//Test that name matches name provided in request",
											"pm.test('name matches as provided in request', function() {",
											"    pm.expect(response.data.attributes.name).to.eq('EBSCO');",
											"});",
											"",
											"//Check that tagList contains correct tags",
											"pm.test('Existing tag', function(){",
											"    pm.expect(response.data.attributes.tags.tagList.length).eq(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"EBSCO\",\n      \"tags\": {\n    \t\t\"tagList\": [\n\t\t\t]\n\t\t}\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"providers",
										"19",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35d5dae9-182d-4150-b8c8-1c4cbde8cba7",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate response against json api schema",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageTags\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"//Check that tagList is empty in response",
											" pm.test(\"Package with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"data\": {\n     \"type\": \"tags\",\n     \"attributes\": {\n       \"name\": \"new-custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\",\n       \"tags\": {\n    \t\"tagList\": [\n\t\t\t]\n    \t}\n     }\n   }\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93e4ccf3-0b21-40e1-9195-ab158ae774ac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b4c51eb0-902e-40a2-8356-438e8cb09f21",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"tags\",\r\n    \"attributes\": {\r\n      \"name\": \"custom title-{{custom-resource-with-tags-uuid}}\",\r\n      \"tags\": {\r\n        \"tagList\": [\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags to test titles",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "418004e0-07f4-46ad-9489-76b3442d1b30",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "368a85ed-c667-4c71-899e-16f4a3821107",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\",\n      \"tags\": {\n    \t\"tagList\": []\n    \t}\n\t}\n\t}\n}\n        "
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{custom-titleid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"titles",
										"{{custom-titleid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete tags for managed resource",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3afffcdf-f9d7-4138-a69e-80890ec8abec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cceaf976-7e2d-4efb-aaba-da833d307b61",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let response = pm.response.json();",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"//Check that tagList is empty in response",
											" pm.test(\"Resource with empty tagList\", function () {",
											"     pm.expect(response.data.attributes.tags.tagList.length).to.eql(0);",
											" });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"tags\",\n    \"attributes\": {\n      \"name\": \"managed-resource-{{managed-title-package-resourceid}}\",\n      \"tags\": {\n        \"tagList\": [\n        ]\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{managed-title-package-resourceid}}/tags",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{managed-title-package-resourceid}}",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created for tags test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f6936f2-9d26-421f-86a3-069c5dcc813d",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b81affda-97ee-424f-b2c2-ff8f768320b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-created-for-tags-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-created-for-tags-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9711b24b-75db-40db-a469-d2415668fc37",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dea2c9bb-9502-463d-bfd2-ae8fbba5236e",
								"type": "text/javascript",
								"exec": [
									"tv4.addSchema(\"schema_providers.json\", JSON.parse(pm.variables.get(\"schema_providers\")));",
									"tv4.addSchema(\"schema_providerTags.json\", JSON.parse(pm.variables.get(\"schema_providerTags\")));",
									"tv4.addSchema(\"schema_providerTagsItem.json\", JSON.parse(pm.variables.get(\"schema_providerTagsItem\")));",
									"tv4.addSchema(\"schema_providerTagsDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerTagsDataAttributes\")));",
									"tv4.addSchema(\"schema_metaTotalResults.json\", JSON.parse(pm.variables.get(\"schema_metaTotalResults\")));",
									"tv4.addSchema(\"schema_jsonapi.json\", JSON.parse(pm.variables.get(\"schema_jsonapi\")));",
									"tv4.addSchema(\"schema_providerListDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_providerListDataAttributes\")));",
									"tv4.addSchema(\"schema_relationships.json\", JSON.parse(pm.variables.get(\"schema_relationships\")));",
									"tv4.addSchema(\"schema_included.json\", JSON.parse(pm.variables.get(\"schema_included\")));",
									"tv4.addSchema(\"schema_providerData.json\", JSON.parse(pm.variables.get(\"schema_providerData\")));",
									"tv4.addSchema(\"schema_token.json\", JSON.parse(pm.variables.get(\"schema_token\")));",
									"tv4.addSchema(\"schema_proxy.json\", JSON.parse(pm.variables.get(\"schema_proxy\")));",
									"tv4.addSchema(\"schema_relationshipData.json\", JSON.parse(pm.variables.get(\"schema_relationshipData\")));",
									"tv4.addSchema(\"schema_packageCollectionItem.json\", JSON.parse(pm.variables.get(\"schema_packageCollectionItem\")));",
									"tv4.addSchema(\"schema_packageDataAttributes.json\", JSON.parse(pm.variables.get(\"schema_packageDataAttributes\")));",
									"tv4.addSchema(\"schema_packageRelationships.json\", JSON.parse(pm.variables.get(\"schema_packageRelationships\")));",
									"tv4.addSchema(\"schema_contentTypeEnum.json\", JSON.parse(pm.variables.get(\"schema_contentTypeEnum\")));",
									"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.variables.get(\"schema_coverage\")));",
									"tv4.addSchema(\"schema_visibilityData.json\", JSON.parse(pm.variables.get(\"schema_visibilityData\")));",
									"tv4.addSchema(\"schema_hasManyRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasManyRelationship\")));",
									"tv4.addSchema(\"schema_hasOneRelationship.json\", JSON.parse(pm.variables.get(\"schema_hasOneRelationship\")));",
									"tv4.addSchema(\"schema_jsonapiError.json\", JSON.parse(pm.variables.get(\"schema_jsonapiError\")));",
									"tv4.addSchema(\"schema_jsonapiErrorResponse.json\", JSON.parse(pm.variables.get(\"schema_jsonapiErrorResponse\")));",
									"tv4.addSchema(\"schema_tags.schema\", JSON.parse(pm.variables.get(\"schema_tags\")));",
									"tv4.addSchema(\"schema_packageTags.json\", JSON.parse(pm.variables.get(\"schema_packageTags\")));"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down resources test",
					"item": [
						{
							"name": "Unassign access mapping from resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32ecf826-87fd-4de7-860e-e05f4171cc5f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ef18c3b-9b37-4a2a-8c14-84262ea535fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"resources\",\n        \"attributes\": {\n            \"isSelected\": true,\n            \"isTitleCustom\": true,\n            \"userDefinedField1\": \"test 1\",\n            \"userDefinedField2\": \"test 2\",\n            \"userDefinedField3\": \"\",\n            \"userDefinedField4\": \"test 4\",\n            \"userDefinedField5\": \"test 5\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom resource with tags (custom title)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "122e0aca-c820-4811-8ef1-f6f69ed194dc",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-resourceid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-resourceid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c2c8a7e-ae2d-42a3-a45b-74addf198b5b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "86a3da52-4ab9-4928-84a3-44c96e964db4",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-for-resource}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-for-resource}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						},
						{
							"name": "Delete Custom Package (created for resource tags)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1dd48c34-acbf-4e2b-9921-dfbf0f798f3f",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid-from-setup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Custom Resource created for test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64d1977d-abeb-4a5c-8438-e39e5c8dbcbf",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/resources/{{custom-packageid}}-{{custom-titleid-from-setup}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"resources",
										"{{custom-packageid}}-{{custom-titleid-from-setup}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for resource testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "679326a6-3c76-42c7-b1ed-1e2a67ecdf76",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64d5bc7a-a4fd-4734-8ff0-72c0b3ddf8a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down packages",
					"item": [
						{
							"name": "Unassign access mapping from cusom package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a16d8b9d-43af-49a0-ac1d-cfb71d36dc04",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that access type unassigned",
											"pm.test('access type should be unassigned', function() {",
											"    pm.expect(response.data.relationships).not.to.have.property('accessType');",
											"    pm.expect(response.included.length).to.be.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"id\": \"{{custom-package-id-created-in-post}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Journal\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2003-01-01\",\n        \"endCoverage\": \"2003-12-01\"\n      },\n      \"isCustom\": true,\n      \"isSelected\": true,\n      \"name\": \"custom-packages-{{custom-package-one-uuid}}\",\n      \"visibilityData\": {\n        \"isHidden\": false,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": false,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign access mapping from managed package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0e93bc2-c58b-4848-90c2-863d6aad4897",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate schema\", function () {",
											"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
											"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
											"});",
											"",
											"//Test that access type unassigned",
											"pm.test('access type should be unassigned', function() {",
											"    pm.expect(response.data.relationships).not.to.have.property('accessType');",
											"    pm.expect(response.included.length).to.be.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"data\": {\n    \"id\": \"{{packageId}}\",\n    \"type\": \"packages\",\n    \"attributes\": {\n      \"contentType\": \"E-Book\",\n      \"customCoverage\": {\n        \"beginCoverage\": \"2018-08-12\",\n        \"endCoverage\": \"2018-09-13\"\n      },\n      \"isCustom\": false,\n      \"isSelected\": true,\n      \"name\": \"ABC-CLIO eBook Collection\",\n      \"visibilityData\": {\n        \"isHidden\": true,\n        \"reason\": \"\"\n      },\n      \"allowKbToAddTitles\": true,\n      \"proxy\": {\n        \"id\": \"<n>\",\n        \"inherited\": false\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{packageId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f443c50-01f9-4e15-a3ac-cdaa43944af2",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19e9ca4f-309e-480d-b545-56fa89ec8366",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post-valid1}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Delete custom package created in post 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0efb030a-6127-4590-857f-c43b51337478",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a6b229de-ebfb-43ab-89a9-f997907acf52",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-package-id-created-in-post}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						},
						{
							"name": "Deselect partially selected package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eaa3b3d-b2b4-42b7-b4b4-155e30b11697",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Test that data.attributes has expected attributes",
											"pm.test(\"titles in package were deselected\", function() {",
											"    pm.expect(response.data.attributes.selectedCount).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7e4149a-01d5-43b2-8d8f-6bb9ce838c8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"id\": \"{{partially-selected-package-id}}\",\r\n    \"type\": \"packages\",\r\n    \"attributes\": {\r\n      \"isCustom\": false,\r\n      \"isSelected\": false\r\n\t}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{partially-selected-package-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{partially-selected-package-id}}"
									]
								},
								"description": "Delete custom package created in post."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21bf6fd9-7597-468d-8156-749116e6b158",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d51eda3-bbf9-4fd6-ab19-a0bf7f5df429",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down titles test",
					"item": [
						{
							"name": "Delete Custom Package",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f4fc684-22b0-4001-911f-170b79ecaa5b",
										"exec": [
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a521b38-dd03-462a-8069-8c4f83a74c7d",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"packages",
										"{{custom-packageid}}"
									]
								},
								"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
							},
							"response": []
						}
					],
					"description": "Deletes newly created custom package which is used for custom titles testing. Deleting a custom package deletes all custom titles that are contained within the package ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "90d936bb-03a3-4e92-86bb-8e5e8b3d6650",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3ef9f47b-0bdc-4ee5-9d8a-6c6677b0064d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down permission",
					"item": [
						{
							"name": "Delete permission if it was added",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e96349e0-80f4-4b37-9936-ea949790ecd4",
										"exec": [
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(!pm.variables.get(\"permissionExists\")) {",
											"    jsonData.permissions = jsonData.permissions.filter(permission => (permission !== \"kb-ebsco.all\"));",
											"",
											"    const permissionsPutRequest = {",
											"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
											"      method: 'PUT',",
											"      header: {",
											"        'Content-Type' : 'application/json',",
											"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
											"        'X-Okapi-Token' : pm.variables.get(\"X-Okapi-Token\")",
											"          ",
											"      },",
											"      body: {",
											"        mode: 'application/json',",
											"        raw: JSON.stringify(jsonData)",
											"      }",
											"    };",
											"    ",
											"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
											"      if (err) { console.log(err); }",
											"      pm.test('Response must be valid', function () {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res).to.have.property('code', 200);",
											"        pm.expect(res).to.have.property('status', 'OK');",
											"      });",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80302c84-76b0-46a7-85ce-8fc1706b3dda",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{userId}}"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down access-type test",
					"item": [
						{
							"name": "DELETE second access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8acc6e6-fd79-4875-86b0-be7737185b53",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE third access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecdf7dbd-4cfe-43e4-9b17-491dad5f4966",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id3}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE fourth access type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1138c280-94df-4d58-8573-ede63eb87cca",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/access-types/{{access-type-id4}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"access-types",
										"{{access-type-id4}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down assign-user",
					"item": [
						{
							"name": "DELETE unassign user2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "648677b2-a991-4ef5-bb12-5c0a75014268",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "729acb0b-3ec6-425b-9e59-63f8af213f60",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}/users/{{assigned-user-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}",
										"users",
										"{{assigned-user-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down user credentials",
					"item": [
						{
							"name": "unassign permission to user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36eb7079-10f6-491a-95db-ce9d78c0b68c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cfe912b4-4a50-4414-aebf-04de1cdf6de0",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{kb-cred-perm-assigned-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{kb-cred-perm-assigned-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user credentials permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21a57f9c-7f2c-4599-b6ee-bf25fc6224cf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1ab3835-0707-4fca-a062-cffb57140e94",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{kb-cred-perm-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions",
										"{{kb-cred-perm-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth user Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "04b53455-cb7e-4fea-ba08-7220d953df00",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f8768db-83ef-436c-b851-8ed4a688c744",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{cred-user-auth-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{cred-user-auth-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "credentials user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5935df3-3107-4cb5-85ce-4f79a5b0cba0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c03fab7f-4142-4d45-8b4d-bdc3eb55cd88",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{cred-user-id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{cred-user-id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tear-down kb-credentials test",
					"item": [
						{
							"name": "DELETE missing credentials 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f8ded4e-f9e0-46ce-adb9-380c528d1ae3",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/vnd.api+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE missing credentials 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dc4b6ba-6042-4044-8972-18d1e1bafd89",
										"exec": [
											"//Check that status is 204",
											"pm.test(\"Status is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.be.success;",
											"});",
											"",
											"pm.test(\"Response without error json body\", function () {",
											"    pm.response.to.be.success;",
											"    pm.response.to.not.have.body;",
											"    pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"data\": {\r\n    \"type\": \"kbCredentials\",\r\n    \"attributes\": {\r\n      \"name\": \"University of Massachusettss - Updated\",\r\n      \"apiKey\": \"{{rm-api-key-value}}\",\r\n      \"url\": \"{{rm-api-url-value}}\",\r\n      \"customerId\": \"{{rm-api-custid-value}}\"\r\n    }\r\n  }\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/kb-credentials/{{kb-credentials-id2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"kb-credentials",
										"{{kb-credentials-id2}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e24e4752-8888-409c-8577-4a7b373e1990",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bd0c45a0-df16-472c-abe3-6fadbdfcbd47",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "905e7584-62ad-473a-aac1-b0a455395b69",
			"key": "custid",
			"value": "apidvgvmt",
			"type": "string"
		},
		{
			"id": "a89a44b7-aaab-4b31-a59a-4d9bbbe04112",
			"key": "packageId",
			"value": "583-4345",
			"type": "string"
		},
		{
			"id": "6638e53f-b69a-4033-9f8f-ba5667e86cf3",
			"key": "rmapi_api_key",
			"value": "",
			"type": "string"
		},
		{
			"id": "292ac531-b36e-4dee-9073-4a8ea836ca21",
			"key": "rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		},
		{
			"id": "8549c616-bc84-4ba4-bf6a-28fac06670de",
			"key": "default_rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}